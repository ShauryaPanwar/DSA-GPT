blogTitle,blogSubheading,blogContent
An A-Z of useful Python tricks,n A-Z of useful Python trick,"Python is one of the world‚Äôs most popular, in-demand programming languages. This is for many reasons: I use Python daily as an integral part of my job as a data scientist. Along the way, I‚Äôve picked up a few useful tricks and tips. Here, I‚Äôve made an attempt at sharing some of them in an A-Z format. Most of these ‚Äòtricks‚Äô are things I‚Äôve used or stumbled upon during my day-to-day work. Some I found while browsing the  Python Standard Library docs . A few others I found searching through  PyPi . However, credit where it is due ‚Äî I discovered four or five of them over at  awesome-python.com . This is a curated list of hundreds of interesting Python tools and modules. It is worth browsing for inspiration! One of the many reasons why Python is such a popular language is because it is readable and expressive. It is often joked that Python is ‚Äò executable pseudocode ‚Äô. But when you can write code like this, it‚Äôs difficult to argue otherwise: You want to plot graphs in the console? You can have graphs in the console. Python has some great default datatypes, but sometimes they just won‚Äôt behave exactly how you‚Äôd like them to. Luckily, the Python Standard Library offers  the collections module . This handy add-on provides you with further datatypes. Ever wondered how you can look inside a Python object and see what attributes it has? Of course you have. From the command line: This can be a really useful feature when running Python interactively, and for dynamically exploring objects and modules you are working with. Read more  here . Yes,  really . Don‚Äôt pretend you‚Äôre not gonna try it out‚Ä¶ üëç One consequence of Python‚Äôs popularity is that there are always new versions under development. New versions mean new features‚Ää‚Äî‚Ääunless your version is out-of-date. Fear not, however. The  __future__ module  lets you import functionality from future versions of Python. It‚Äôs literally like time travel, or magic, or something. Why not have a go  importing curly braces ? Geography can be a challenging terrain for programmers to navigate (ha, a pun!). But  the geopy module  makes it unnervingly easy. It works by abstracting the APIs of a range of different geocoding services. It enables you to obtain a place‚Äôs full street address, latitude, longitude, and even altitude. There‚Äôs also a useful distance class. It calculates the distance between two locations in your favorite unit of measurement. Stuck on a coding problem and can‚Äôt remember that solution you saw before? Need to check StackOverflow, but don‚Äôt want to leave the terminal? Then you need  this useful command line tool . Ask it whatever question you have, and it‚Äôll do its best to return an answer. Be aware though ‚Äî it scrapes code from top answers from StackOverflow. It might not always give the most helpful information‚Ä¶ Python‚Äôs  inspect module  is great for understanding what is happening behind the scenes. You can even call its methods on itself! The code sample below uses  inspect.getsource()  to print its own source code. It also uses  inspect.getmodule()  to print the module in which it was defined. The last line of code prints out its own line number. Of course, beyond these trivial uses, the inspect module can prove useful for understanding what your code is doing. You could also use it for writing self-documenting code. The Jedi library is an autocompletion and code analysis library. It makes writing code quicker and more productive. Unless you‚Äôre developing your own IDE, you‚Äôll probably be most interested in  using Jedi as an editor plugin . Luckily, there are already loads available! You may already be using Jedi, however. The IPython project makes use of Jedi for its code autocompletion functionality. When learning any language, there are many milestones along the way. With Python, understanding the mysterious  **kwargs  syntax probably counts as one. The double-asterisk in front of a dictionary object lets you pass the contents of that dictionary as  named arguments to a function . The dictionary‚Äôs keys are the argument names, and the values are the values passed to the function. You don‚Äôt even need to call it  kwargs ! This is useful when you want to write functions that can handle named arguments not defined in advance. One of my favourite things about programming in Python are its  list comprehensions . These expressions make it easy to write very clean code that reads almost like natural language. You can read more about how to use them  here . Python supports functional programming through a number of inbuilt features. One of the most useful is the  map()  function ‚Äî especially in combination with  lambda functions . In the example above,  map()  applies a simple lambda function to each element in  x . It returns a map object, which can be converted to some iterable object such as a list or tuple. If you haven‚Äôt seen it already, then be prepared to have your mind blown by  Python‚Äôs newspaper module . It lets you retrieve news articles and associated meta-data from a range of leading international publications. You can retrieve images, text and author names. It even has some  inbuilt NLP functionality . So if you were thinking of using BeautifulSoup or some other DIY webscraping library for your next project, save yourself the time and effort and  $ pip install newspaper3k  instead. Python provides support for  operator overloading , which is one of those terms that make you sound like a legit computer scientist. It‚Äôs actually a simple concept. Ever wondered why Python lets you use the  +  operator to add numbers and also to concatenate strings? That‚Äôs operator overloading in action. You can define objects which use Python‚Äôs standard operator symbols in their own specific way. This lets you use them in contexts relevant to the objects you‚Äôre working with. Python‚Äôs default  print  function does its job. But try printing out any large, nested object, and the result is rather ugly. Here‚Äôs where the  Standard Library‚Äôs pretty-print module  steps in. This prints out complex structured objects in an easy-to-read format. A must-have for any Python developer who works with non-trivial data structures. Python supports multithreading, and this is facilitated by the Standard Library‚Äôs Queue module. This module lets you implement queue data structures. These are data structures that let you add and retrieve entries according to a specific rule. ‚ÄòFirst in, first out‚Äô (or FIFO) queues let you retrieve objects in the order they were added. ‚ÄòLast in, first out‚Äô (LIFO) queues let you access the most recently added objects first. Finally, priority queues let you retrieve objects according to the order in which they are sorted. Here‚Äôs an example of how to use queues  for multithreaded programming in Python. When defining a class or an object in Python, it is useful to provide an ‚Äòofficial‚Äô way of representing that object as a string. For example: This makes debugging code a lot easier. Add it to your class definitions as below: Python makes a great scripting language. Sometimes using the standard os and subprocess libraries can be a bit of a headache. The  sh library  provides a neat alternative. It lets you call any program as if it were an ordinary function ‚Äî useful for automating workflows and tasks, all from within Python. Python is a dynamically-typed language. You don‚Äôt need to specify datatypes when you define variables, functions, classes etc. This allows for rapid development times. However, there are few things more annoying than a runtime error caused by a simple typing issue. Since Python 3.5 , you have the option to provide type hints when defining functions. You can also define type aliases: Although not compulsory, type annotations can make your code easier to understand. They also allow you to use type checking tools to catch those stray TypeErrors before runtime. Probably worthwhile if you are working on large, complex projects! A quick and easy way to generate Universally Unique IDs (or ‚ÄòUUIDs‚Äô) is through the  Python Standard Library‚Äôs uuid module . This creates a randomized 128-bit number that will almost certainly be unique. In fact, there are over 2¬π¬≤¬≤ possible UUIDs that can be generated. That‚Äôs over five undecillion (or 5,000,000,000,000,000,000,000,000,000,000,000,000). The probability of finding duplicates in a given set is extremely low. Even with a trillion UUIDs, the probability of a duplicate existing is much, much less than one-in-a-billion. Pretty good for two lines of code. This is probably my favorite Python thing of all. Chances are you are working on multiple Python projects at any one time. Unfortunately, sometimes two projects will rely on different versions of the same dependency. Which do you install on your system? Luckily, Python‚Äôs  support for virtual environments  lets you have the best of both worlds. From the command line: Now you can have standalone versions and installations of Python running on the same machine. Sorted! Wikipedia has a great API that allows users programmatic access to an unrivalled body of completely free knowledge and information. The  wikipedia module  makes accessing this API almost embarrassingly convenient. Like the real site, the module provides support for multiple languages, page disambiguation, random page retrieval, and even has a  donate()  method. Humour is a key feature of the Python language ‚Äî after all, it is named after the British comedy sketch show  Monty Python‚Äôs Flying Circus . Much of Python‚Äôs official documentation references the show‚Äôs most famous sketches. The sense of humour isn‚Äôt restricted to the docs, though. Have a go running the line below: Never change, Python. Never change. YAML stands for ‚Äò YAML Ain‚Äôt Markup Language ‚Äô. It is a data formatting language, and is a superset of JSON. Unlike JSON, it can store more complex objects and refer to its own elements. You can also write comments, making it particularly suited to writing configuration files. The  PyYAML module  lets you use YAML with Python. Install with: And then import into your projects: PyYAML lets you store Python objects of any datatype, and instances of any user-defined classes also. One last trick for ya, and it really is a cool one. Ever needed to form a dictionary out of two lists? The  zip()  inbuilt function takes a number of iterable objects and returns a list of tuples. Each tuple groups the elements of the input objects by their positional index. You can also ‚Äòunzip‚Äô objects by calling  *zip()  on them. So there you have it, an A-Z of Python tricks ‚Äî hopefully you‚Äôve found something useful for your next project. Python‚Äôs a very diverse and well-developed language, so there‚Äôs bound to be many features I haven‚Äôt got round to including. Please share any of your own favorite Python tricks by leaving a response below!"
Learning Python: From Zero to Hero,earning Python: From Zero to Her,"This post was originally published at  TK's Blog . First of all, what is Python? According to its creator, Guido van Rossum, Python is a: ‚Äúhigh-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.‚Äù For me, the first reason to learn Python was that it is, in fact, a beautiful   programming language. It was really natural to code in it and express my thoughts. Another reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let‚Äôs learn a bit about it. You can think about variables as words that store a value. Simple as that. In Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called ‚Äúone.‚Äù Let‚Äôs do it: How simple was that? You just assigned the value 1 to the variable ‚Äúone.‚Äù And you can assign any other  value  to whatever other  variables  you want. As you see in the table above, the variable ‚Äú two ‚Äù stores the integer  2 , and ‚Äú some_number ‚Äù stores  10,000 . Besides integers, we can also use booleans (True / False), strings, float, and so many other data types. ‚Äú If ‚Äù uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the ‚Äúif‚Äù statement. For example: 2  is greater than  1 , so the ‚Äú print ‚Äù code is executed. The ‚Äú else ‚Äù statement will be executed if the ‚Äú if ‚Äù expression is  false . 1  is not greater than  2 , so the code inside the ‚Äú else ‚Äù statement will be executed. You can also use an ‚Äú elif ‚Äù statement: In Python, we can iterate in different forms. I‚Äôll talk about two:  while   and  for . While  Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from  1  to  10 . The  while  loop needs a ‚Äú loop condition. ‚Äù If it stays True, it continues iterating. In this example, when  num  is  11  the  loop condition  equals  False . Another basic bit of code to better understand it: The  loop condition  is  True  so it keeps iterating ‚Äî until we set it to  False . For Looping : you apply the variable ‚Äú num ‚Äù to the block, and the ‚Äú for ‚Äù statement will iterate it for you. This code will print the same as  while  code: from  1  to  10 . See? It is so simple. The range starts with  1  and goes until the  11 th element ( 10  is the  10 th element). Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 ‚Ä¶ Do I have another way to store all the integers that I want, but not in  millions of variables ? You guessed it ‚Äî there is indeed another way to store them. List  is a collection that can be used to store a list of values (like these integers that you want). So let‚Äôs use it: It is really simple. We created an array and stored it on  my_integer . But maybe you are asking: ‚ÄúHow can I get a value from this array?‚Äù Great question.  List  has a concept called  index . The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea. To make it clearer, we can represent the array and each element with its index. I can draw it: Using the Python syntax, it‚Äôs also simple to understand: Imagine that you don‚Äôt want to store integers. You just want to store strings, like a list of your relatives‚Äô names. Mine would look something like this: It works the same way as integers. Nice. We just learned how  Lists  indices work. But I still need to show you how we can add an element to the  List  data structure (an item to a list). The most common method to add a new value to a  List  is  append . Let‚Äôs see how it works: append  is super simple. You just need to apply the element (eg. ‚Äú The Effective Engineer ‚Äù) as the  append  parameter. Well, enough about  Lists .  Let‚Äôs talk about another data structure. Now we know that  Lists  are indexed with integer numbers. But what if we don‚Äôt want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices. Let‚Äôs learn about the  Dictionary  data structure.  Dictionary  is a collection of key-value pairs. Here‚Äôs what it looks like: The  key  is the index pointing to the   value . How do we access the  Dictionary   value ? You guessed it ‚Äî using the  key . Let‚Äôs try it: I created a  Dictionary  about me. My name, nickname, and nationality. Those attributes are the  Dictionary   keys . As we learned how to access the  List  using index, we also use indices ( keys  in the  Dictionary  context) to access the  value  stored in the  Dictionary . In the example, I printed a phrase about me using all the values stored in the  Dictionary . Pretty simple, right? Another cool thing about  Dictionary  is that we can use anything as the value. In the  Dictionary   I created, I want to add the  key  ‚Äúage‚Äù and my real integer age in it: Here we have a  key  (age)  value  (24) pair using string as the  key  and integer as the  value . As we did with  Lists , let‚Äôs learn how to add elements to a  Dictionary . The  key   pointing to a   value  is a big part of what  Dictionary  is. This is also true when we are talking about adding elements to it: We just need to assign a  value  to a  Dictionary   key . Nothing complicated here, right? As we learned in the  Python Basics , the  List  iteration is very simple. We  Python   developers commonly use  For  looping. Let‚Äôs do it: So for each book in the bookshelf, we ( can do everything with it ) print it. Pretty simple and intuitive. That‚Äôs Python. For a hash data structure, we can also use the  for  loop, but we apply the  key  : This is an example how to use it. For each  key  in the  dictionary  , we  print  the  key  and its corresponding  value . Another way to do it is to use the  iteritems  method. We did name the two parameters as  key  and  value , but it is not necessary. We can name them anything. Let‚Äôs see it: We can see we used attribute as a parameter for the  Dictionary   key , and it works properly. Great! Objects  are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics:  data  and  behavior . Cars have  data,  like number of wheels, number of doors, and seating capacity They also exhibit  behavior : they can accelerate, stop, show how much fuel is left, and so many other things. We identify  data  as  attributes  and  behavior  as  methods  in object-oriented programming. Again: Data ‚Üí Attributes and Behavior ‚Üí Methods And a  Class  is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components. Python, as an Object-Oriented programming language, has these concepts:  class  and  object . A class is a blueprint, a model for its objects. So again, a class it is just a model, or a way to define  attributes  and  behavior  (as we talked about in the theory section). As an example, a vehicle  class  has its own  attributes  that define what  objects  are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle. With this in mind, let‚Äôs look at Python syntax for  classes : We define classes with a  class statement ‚Äî  and that‚Äôs it. Easy, isn‚Äôt it? Objects  are instances of a  class . We create an instance by naming the class. Here  car  is an  object  (or instance) of the  class   Vehicle . Remember that our vehicle  class  has four  attributes : number of wheels, type of tank, seating capacity, and maximum velocity. We set all these  attributes  when creating a vehicle  object . So here, we define our  class  to receive data when it initiates it: We use the  init   method . We call it a constructor method. So when we create the vehicle  object , we can define these  attributes . Imagine that we love the  Tesla Model S,  and we want to create this kind of  object . It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let‚Äôs create this  object: Four wheels + electric ‚Äútank type‚Äù + five seats + 250km/hour maximum speed. All attributes are set. But how can we access these attributes‚Äô values? We  send a message to the object asking about them . We call it a  method . It‚Äôs the  object‚Äôs behavior . Let‚Äôs implement it: This is an implementation of two methods:  number_of_wheels  and  set_number_of_wheels . We call it  getter  &  setter . Because the first gets the attribute value, and the second sets a new value for the attribute. In Python, we can do that using  @property  ( decorators ) to define  getters  and  setters . Let‚Äôs see it with code: And we can use these methods as attributes: This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don‚Äôt apply two as a parameter, but set the value 2 to  number_of_wheels . This is one way to write  pythonic   getter  and  setter  code. But we can also use methods for other things, like the ‚Äú make_noise ‚Äù method. Let‚Äôs see it: When we call this method, it just returns a string  ‚Äú VRRRRUUUUM. ‚Äù Encapsulation is a mechanism that restricts direct access to objects‚Äô data and methods. But at the same time, it facilitates operation on that data (objects‚Äô methods). ‚ÄúEncapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an  object  is generally hidden from view outside of the object‚Äôs definition.‚Äù ‚Äî Wikipedia All internal representation of an object is hidden from the outside. Only the object can interact with its internal data. First, we need to understand how  public  and  non-public  instance variables and methods work. For a Python class, we can initialize a  public instance variable  within our constructor method. Let‚Äôs see this: Within the constructor method: Here we apply the  first_name  value as an argument to the  public instance variable . Within the class: Here, we do not need to apply the  first_name  as an argument, and all instance objects will have a  class attribute  initialized with  TK . Cool. We have now learned that we can use  public instance variables  and  class attributes . Another interesting thing about the  public  part is that we can manage the variable value. What do I mean by that? Our  object  can manage its variable value:  Get  and  Set  variable values. Keeping the  Person  class in mind, we want to set another value to its  first_name  variable: There we go. We just set another value ( kaio ) to the  first_name  instance variable and it updated the value. Simple as that. Since it‚Äôs a  public  variable, we can do that. We don‚Äôt use the term ‚Äúprivate‚Äù here, since no attribute is really private in Python (without a generally unnecessary amount of work). ‚Äî  PEP 8 As the  public instance variable  , we can define the  non-public instance variable  both within the constructor method or within the class. The syntax difference is: for  non-public instance variables  , use an underscore ( _ ) before the  variable  name. ‚Äú‚ÄòPrivate‚Äô instance variables that cannot be accessed except from inside an object don‚Äôt exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g.  _spam ) should be treated as a non-public part of the API (whether it is a function, a method or a data member)‚Äù ‚Äî  Python Software Foundation Here‚Äôs an example: Did you see the  email  variable? This is how we define a  non-public variable  : We can access and update it.  Non-public variables  are just a convention and should be treated as a non-public part of the API. So we use a method that allows us to do it inside our class definition. Let‚Äôs implement two methods ( email  and  update_email ) to understand it: Now we can update and access  non-public variables  using those methods. Let‚Äôs see: With  public methods , we can also use them out of our class: Let‚Äôs test it: Great ‚Äî we can use it without any problem. But with  non-public methods  we aren‚Äôt able to do it. Let‚Äôs implement the same  Person  class, but now with a  show_age   non-public method  using an underscore ( _ ). And now, we‚Äôll try to call this  non-public method  with our object: We can access and update it.  Non-public methods  are just a convention and should be treated as a non-public part of the API. Here‚Äôs an example for how we can use it: Here we have a  _get_age   non-public method  and a  show_age   public method . The  show_age  can be used by our object (out of our class) and the  _get_age  only used inside our class definition (inside  show_age  method). But again: as a matter of convention. With encapsulation we can ensure that the internal representation of the object is hidden from the outside. Certain objects have some things in common: their behavior and characteristics. For example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors. In object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class. Let‚Äôs see another example and implement it in Python. Imagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car. We can say that an   ElectricCar  class inherits these same attributes from the regular  Car  class. Our  Car  class implemented: Once initiated, we can use all  instance variables  created. Nice. In Python, we apply a  parent class  to the  child class  as a parameter. An  ElectricCar  class can inherit from our  Car  class. Simple as that. We don‚Äôt need to implement any other method, because this class already has it (inherited from  Car  class). Let‚Äôs prove it: Beautiful. We learned a lot of things about Python basics: Congrats! You completed this dense piece of content about Python. If you want a complete Python course, learn more real-world coding skills and build projects, try  One Month Python Bootcamp . See you there ‚ò∫ For more stories and posts about my journey learning & mastering programming, follow my publication  The Renaissance Developer . Have fun, keep learning, and always keep coding. I hope you liked this content. Support my work on Ko-Fi My  Twitter  &  Github . ‚ò∫"
How to build your own Neural Network from scratch in Python,ow to build your own Neural Network from scratch in Pytho,"Update : When I wrote this article a year ago, I did not expect it to be  this  popular. Since then, this article has been viewed more than 450,000 times, with more than 30,000 claps. It has also made it to the front page of Google, and it is among the first few search results for ‚Äò Neural Network ‚Äô. Many of you have reached out to me, and I am deeply humbled by the impact of this article on your learning journey. This article also caught the eye of the editors at Packt Publishing. Shortly after this article was published, I was offered to be the sole author of the book  Neural Network Projects with Python .  Today, I am happy to share with you that my book has been published! The book is a continuation of this article, and it covers end-to-end implementation of neural network projects in areas such as face recognition, sentiment analysis, noise removal etc. Every chapter features a unique neural network architecture, including Convolutional Neural Networks, Long Short-Term Memory Nets and Siamese Neural Networks. If you‚Äôre looking to create a strong machine learning portfolio with deep learning projects, do consider getting the book! You can get the book from Amazon:  Neural Network Projects with Python Motivation:  As part of my personal journey to gain a better understanding of Deep Learning, I‚Äôve decided to build a Neural Network from scratch without a deep learning library like TensorFlow. I believe that understanding the inner workings of a Neural Network is important to any aspiring Data Scientist. This article contains what I‚Äôve learned, and hopefully it‚Äôll be useful for you as well! Most introductory texts to Neural Networks brings up brain analogies when describing them. Without delving into brain analogies, I find it easier to simply describe Neural Networks as a mathematical function that maps a given input to a desired output. Neural Networks consist of the following components The diagram below shows the architecture of a 2-layer Neural Network ( note that the input layer is typically excluded when counting the number of layers in a Neural Network ) Creating a Neural Network class in Python is easy. Training the Neural Network The output  ≈∑  of a simple 2-layer Neural Network is: You might notice that in the equation above, the weights  W  and the biases  b  are the only variables that affects the output  ≈∑. Naturally, the right values for the weights and biases determines the strength of the predictions. The process of fine-tuning the weights and biases from the input data is known as  training the Neural Network. Each iteration of the training process consists of the following steps: The sequential graph below illustrates the process. As we‚Äôve seen in the sequential graph above, feedforward is just simple calculus and for a basic 2-layer neural network, the output of the Neural Network is: Let‚Äôs add a feedforward function in our python code to do exactly that. Note that for simplicity, we have assumed the biases to be 0. However, we still need a way to evaluate the ‚Äúgoodness‚Äù of our predictions (i.e. how far off are our predictions)? The  Loss Function  allows us to do exactly that. There are many available loss functions, and the nature of our problem should dictate our choice of loss function. In this tutorial, we‚Äôll use a simple  sum-of-sqaures error  as our loss function. That is, the sum-of-squares error is simply the sum of the difference between each predicted value and the actual value. The difference is squared so that we measure the absolute value of the difference. Our goal in training is to find the best set of weights and biases that minimizes the loss function. Now that we‚Äôve measured the error of our prediction (loss), we need to find a way to  propagate  the error back, and to update our weights and biases. In order to know the appropriate amount to adjust the weights and biases by, we need to know the  derivative of the loss function with respect to the weights and biases . Recall from calculus that the derivative of a function is simply the slope of the function. If we have the derivative, we can simply update the weights and biases by increasing/reducing with it(refer to the diagram above). This is known as  gradient descent . However, we can‚Äôt directly calculate the derivative of the loss function with respect to the weights and biases because the equation of the loss function does not contain the weights and biases. Therefore, we need the  chain rule  to help us calculate it. Phew! That was ugly but it allows us to get what we needed ‚Äî the derivative (slope) of the loss function with respect to the weights, so that we can adjust the weights accordingly. Now that we have that, let‚Äôs add the backpropagation function into our python code. For a deeper understanding of the application of calculus and the chain rule in backpropagation, I strongly recommend this tutorial by 3Blue1Brown. Now that we have our complete python code for doing feedforward and backpropagation, let‚Äôs apply our Neural Network on an example and see how well it does. Our Neural Network should learn the ideal set of weights to represent this function. Note that it isn‚Äôt exactly trivial for us to work out the weights just by inspection alone. Let‚Äôs train the Neural Network for 1500 iterations and see what happens. Looking at the loss per iteration graph below, we can clearly see the loss  monotonically decreasing towards a minimum.  This is consistent with the gradient descent algorithm that we‚Äôve discussed earlier. Let‚Äôs look at the final prediction (output) from the Neural Network after 1500 iterations. We did it! Our feedforward and backpropagation algorithm trained the Neural Network successfully and the predictions converged on the true values. Note that there‚Äôs a slight difference between the predictions and the actual values. This is desirable, as it prevents  overfitting  and allows the Neural Network to  generalize  better to unseen data. Fortunately for us, our journey isn‚Äôt over. There‚Äôs still  much  to learn about Neural Networks and Deep Learning. For example: I‚Äôll be writing more on these topics soon, so do follow me on Medium and keep and eye out for them! I‚Äôve certainly learnt a lot writing my own Neural Network from scratch. Although Deep Learning libraries such as TensorFlow and Keras makes it easy to build deep nets without fully understanding the inner workings of a Neural Network, I find that it‚Äôs beneficial for aspiring data scientist to gain a deeper understanding of Neural Networks. This exercise has been a great investment of my time, and I hope that it‚Äôll be useful for you as well!"
Why Python is not the programming language of the future,hy Python is not the programming language of the futur,"It  took the programming community a couple of decades to appreciate Python. But since the early 2010‚Äôs, it has been booming ‚Äî and eventually surpassing C, C#, Java and JavaScript in popularity. But until when will that trend continue? When will Python eventually be replaced by other languages, and why? Putting an exact expiry date on Python would be so much speculation, it might as well pass as Science-Fiction. Instead, I will assess the virtues that are boosting Python‚Äôs popularity right now, and the weak points that will break it in the future. Python‚Äôs success is reflected in the  Stack Overflow trends , which measure the count of tags in posts on the platform. Given the size of StackOverflow, this is quite a good indicator for language popularity. While R has been plateauing over the last few years, and many other languages are on a steady decline, Python‚Äôs growth seems unstoppable. Almost 14% of all StackOverflow questions are tagged ‚Äúpython‚Äù, and the trend is going up. And there are several reasons for that. Python has been around since the nineties. That doesn‚Äôt only mean that it has had plenty of time to grow. It has also acquired a large and supportive community. So if you have any issue while you‚Äôre coding in Python, the odds are high that you‚Äôll be able to solve it with a single Google search. Simply because somebody will have already encountered your problem and written something helpful about it. It‚Äôs not only the fact that it has been around for decades, giving programmers the time to make brilliant tutorials. More than that, the syntax of Python is very human-readable. For a start, there‚Äôs no need to specify the data type. You just declare a variable; Python will understand from the context whether it‚Äôs an integer, a float value, a boolean or something else. This is a huge edge for beginners. If you‚Äôve ever had to program in C++, you know how frustrating it is your program won‚Äôt compile because you swapped a float for an integer. And if you‚Äôve ever had to read Python and C++ code side-by-side, you‚Äôll know how understandable Python is. Even though C++ was designed with English in mind, it‚Äôs a rather bumpy read compared to Python code. medium.com Since Python has been around for so long, developers have made a package for every purpose. These days, you can find a package for almost everything. Want to crunch numbers, vectors and matrices?  NumPy  is your guy.  Want to do calculations for tech and engineering? Use  SciPy .  Want to go big in data manipulation and analysis? Give  Pandas  a go. Want to start out with Artificial Intelligence? Why not use  Scikit-Learn . Whichever computational task you‚Äôre trying to manage, chances are that there is a Python package for it out there. This makes Python stay on top of recent developments, can be seen from the surge in Machine Learning over the past few years. Based on the previous elaborations, you could imagine that Python will stay on top of sh*t for ages to come. But like every technology, Python has its weaknesses. I will go through the most important flaws, one by one, and assess whether these are fatal or not. Python is slow. Like, really slow. On average, you‚Äôll need about 2‚Äì10 times longer to complete a task with Python than with any other language. There are  various reasons  for that. One of them is that it‚Äôs dynamically typed ‚Äî remember that you don‚Äôt need to specify data types like in other languages. This means that a lot of memory needs to be used, because the program needs to reserve enough space for each variable that it works in any case. And lots of memory usage translates to lots of computing time. Another reason is that Python can only execute one task at a time. This is a consequence of flexible datatypes ‚Äî Python needs to make sure each variable has only one datatype, and parallel processes could mess that up. In comparison, your average web browser can run a dozen different threads at once. And there are some other theories around, too. But at the end of the day, none of the speed issues matter. Computers and servers have gotten so cheap that we‚Äôre talking about fractions of seconds. And the end user doesn‚Äôt really care whether their app loads in 0.001 or 0.01 seconds. medium.com Originally, Python was  dynamically scoped . This basically means that, to evaluate an expression, a compiler first searches the current block and then successively all the calling functions. The problem with dynamic scoping is that every expression needs to be tested in every possible context ‚Äî which is tedious. That‚Äôs why most modern programming languages use static scoping. Python tried to transition to static scoping, but  messed it up . Usually, inner scopes ‚Äî for example functions within functions ‚Äî would be able to see  and  change outer scopes. In Python, inner scopes can only see outer scopes, but not change them. This leads to a lot of confusion. Despite all of the flexibility within Python, the usage of Lambdas is rather restrictive. Lambdas can only be expressions in Python, and not be statements. On the other hand, variable declarations and statements are always statements. This means that Lambdas cannot be used for them. This distinction between expressions and statements is rather arbitrary, and doesn‚Äôt occur in other languages. In Python, you use whitespaces and indentations to indicate different levels of code. This makes it optically appealing and intuitive to understand. Other languages, for example C++, rely more on braces and semicolons. While this might not be visually appealing and beginner-friendly, it makes the code a lot more maintainable. For bigger projects, this is a lot more useful. Newer languages like Haskell solve this problem: They rely on whitespaces, but offer an alternative syntax for those who wish to go without. As we‚Äôre witnessing the shift from desktop to smartphone, it‚Äôs clear that we need robust languages to build mobile software. But not many mobile apps are being developed with Python. That doesn‚Äôt mean that it can‚Äôt be done ‚Äî there is a Python package called Kivy for this purpose. But Python wasn‚Äôt made with mobile in mind. So even though it might produce passable results for basic tasks, your best bet is to use a language that was created for mobile app development. Some widely used programming frameworks for mobile include React Native, Flutter, Iconic, and Cordova. To be clear, laptops and desktop computers should be around for many years to come. But since mobile has long surpassed desktop traffic, it‚Äôs safe to say that learning Python is not enough to become a seasoned all-round developer. A Python script isn‚Äôt compiled first and then executed. Instead, it compiles every time you execute it, so any coding error manifests itself at runtime. This leads to poor performance, time consumption, and the need for a lot of tests. Like,  a lot  of tests. This is great for beginners since testing teaches them a lot. But for seasoned developers, having to debug a complex program in Python makes them go awry. This lack of performance is the biggest factor that sets a timestamp on Python. towardsdatascience.com There are a few new competitors on the market of programming languages: While there are other languages on the market, Rust, Go, and Julia are the ones that fix weak patches of Python. All of these languages excel in yet-to-come technologies, most notably in Artificial Intelligence. While their market share is still small, as reflected in the number of StackOverflow tags, the trend for all of them is clear: upwards. Given the ubiquitous popularity of Python at the moment, it will surely take half a decade, maybe even a whole, for any of these new languages to replace it. Which of the languages it will be ‚Äî Rust, Go, Julia, or a new language of the future ‚Äî is hard to say at this point. But given the performance issues that are fundamental in the architecture of Python, one will inevitably take its spot."
What exactly can you do with Python? Here are Python‚Äôs 3 main applications.,hat exactly can you do with Python? Here are Python‚Äôs 3 main applications,"If you‚Äôre thinking of learning Python ‚Äî or if you recently started learning it ‚Äî you may be asking yourself: ‚ÄúWhat exactly can I use Python for?‚Äù Well that‚Äôs a tricky question to answer, because there are so many applications for Python. But over time, I have observed that there are 3 main popular applications for Python: Let‚Äôs talk about each of them in turn. Web frameworks that are based on Python like  Django  and  Flask  have recently become very popular for web development. These web frameworks help you create server-side code (backend code) in Python. That‚Äôs the code that runs on your server, as opposed to on users‚Äô devices and browsers (front-end code). If you‚Äôre not familiar with the difference between backend code and front-end code, please see my footnote below. That‚Äôs because a web framework makes it easier to build common backend logic. This includes mapping different URLs to chunks of Python code, dealing with databases, and generating HTML files users see on their browsers. Django and Flask are two of the most popular Python web frameworks. I‚Äôd recommend using one of them if you‚Äôre just getting started. There‚Äôs an  excellent article  about this topic by Gareth Dwyer, so let me quote it here: <begin quote> Main contrasts: You should probably choose: </end quote> In other words, If you‚Äôre a beginner, Flask is probably a better choice because it has fewer components to deal with. Also, Flask is a better choice if you want more customization. On the other hand, if you‚Äôre looking to build something straight-forward, Django will probably let you get there faster. Now, if you‚Äôre looking to learn Django, I recommend the book called Django for Beginners. You can find it  here . You can also find the free sample chapters of that book  here . Okay, let‚Äôs go to the next topic! I think the best way to explain what machine learning is would be to give you a simple example. Let‚Äôs say you want to develop a program that automatically detects what‚Äôs in a picture. So, given this picture below (Picture 1), you want your program to recognize that it‚Äôs a dog. Given this other one below (Picture 2), you want your program to recognize that it‚Äôs a table. You might say, well, I can just write some code to do that. For example, maybe if there are a lot of light brown pixels in the picture, then we can say that it‚Äôs a dog. Or maybe, you can figure out how to detect edges in a picture. Then, you might say, if there are many straight edges, then it‚Äôs a table. However, this kind of approach gets tricky pretty quickly. What if there‚Äôs a white dog in the picture with no brown hair? What if the picture shows only the round parts of the table? This is where machine learning comes in. Machine learning typically implements an algorithm that automatically detects a pattern in the given input. You can give, say, 1,000 pictures of a dog and 1,000 pictures of a table to a machine learning algorithm. Then, it will learn the difference between a dog and a table. When you give it a new picture of either a dog or a table, it will be able to recognize which one it is. I think this is somewhat similar to how a baby learns new things. How does a baby learn that one thing looks like a dog and another a table? Probably from a bunch of examples. You probably don‚Äôt explicitly tell a baby, ‚ÄúIf something is furry and has light brown hair, then it‚Äôs probably a dog.‚Äù You would probably just say, ‚ÄúThat‚Äôs a dog. This is also a dog. And this one is a table. That one is also a table.‚Äù Machine learning algorithms work much the same way. You can apply the same idea to: among other applications. Popular machine learning algorithms you might have heard about include: You can use any of the above algorithms to solve the picture-labeling problem I explained earlier. There are popular machine learning libraries and frameworks for Python. Two of the most popular ones are  scikit-learn  and  TensorFlow . If you‚Äôre just getting started with a machine learning project, I would recommend that you first start with scikit-learn. If you start running into efficiency issues, then I would start looking into TensorFlow. To learn machine learning fundamentals, I would recommend either  Stanford‚Äôs  or  Caltech‚Äôs  machine learning course. Please note that you need basic knowledge of calculus and linear algebra to understand some of the materials in those courses. Then, I would practice what you‚Äôve learned from one of those courses with  Kaggle . It‚Äôs a website where people compete to build the best machine learning algorithm for a given problem. They have nice tutorials for beginners, too. To help you understand what these might look like, let me give you a simple example here. Let‚Äôs say you‚Äôre working for a company that sells some products online. Then, as a data analyst, you might draw a bar graph like this. From this graph, we can tell that men bought over 400 units of this product and women bought about 350 units of this product this particular Sunday. As a data analyst, you might come up with a few possible explanations for this difference. One obvious possible explanation is that this product is more popular with men than with women. Another possible explanation might be that the sample size is too small and this difference was caused just by chance. And yet another possible explanation might be that men tend to buy this product more only on Sunday for some reason. To understand which of these explanations is correct, you might draw another graph like this one. Instead of showing the data for Sunday only, we‚Äôre looking at the data for a full week. As you can see, from this graph, we can see that this difference is pretty consistent over different days. From this little analysis, you might conclude that the most convincing explanation for this difference is that this product is simply more popular with men than with women. On the other hand, what if you see a graph like this one instead? Then, what explains the difference on Sunday? You might say, perhaps men tend to buy more of this product only on Sunday for some reason. Or, perhaps it was just a coincidence that men bought more of it on Sunday. So, this is a simplified example of what data analysis might look like in the real world. The data analysis work I did when I was working at Google and Microsoft was very similar to this example ‚Äî only more complex. I actually used Python at Google for this kind of analysis, while I used JavaScript at Microsoft. I used SQL at both of those companies to pull data from our databases. Then, I would use either Python and Matplotlib (at Google) or JavaScript and D3.js (at Microsoft) to visualize and analyze this data. One of the most popular libraries for data visualization is  Matplotlib . It‚Äôs a good library to get started with because: How should I learn data analysis / visualization with Python? You should first learn the fundamentals of data analysis and visualization. When I looked for good resources for this online, I couldn‚Äôt find any. So, I ended up making a YouTube video on this topic: I also ended up making a  full course on this topic on Pluralsight , which you can take for free by signing up to their 10-day free trial. I‚Äôd recommend both of them. After learning the fundamentals of data analysis and visualization, learning fundamentals of statistics from websites like Coursera and Khan Academy will be helpful, as well. Scripting usually refers to writing small programs that are designed to automate simple tasks. So, let me give you an example from my personal experience here. I used to work at a small startup in Japan where we had an email support system. It was a system for us to respond to questions customers sent us via email. When I was working there, I had the task of counting the numbers of emails containing certain keywords so we could analyze the emails we received. We could have done it manually, but instead, I wrote a simple program / simple script to automate this task. Actually, we used Ruby for this back then, but Python is also a good language for this kind of task. Python is suited for this type of task mainly because it has relatively simple syntax and is easy to write. It‚Äôs also quick to write something small with it and test it. I‚Äôm not an expert on embedded applications, but I know that Python works with Rasberry Pi. It seems like a popular application among hardware hobbyists. You could use the library called PyGame to develop games, but it‚Äôs not the most popular gaming engine out there. You could use it to build a hobby project, but I personally wouldn‚Äôt choose it if you‚Äôre serious about game development. Rather, I would recommend getting started with Unity with C#, which is one of the most popular gaming engines. It allows you to build a game for many platforms, including Mac, Windows, iOS, and Android. You could make one with Python using Tkinter, but it doesn‚Äôt seem like the most popular choice either. Instead, it seems like languages like  Java, C#, and C++  are more popular for this. Recently, some companies have started using JavaScript to create Desktop applications, too. For example, Slack‚Äôs desktop app was built with something called Electron . It allows you to build desktop applications with JavaScript. Personally, if I was building a desktop application, I would go with a JavaScript option. It allows you to reuse some of the code from a web version if you have it. However, I‚Äôm not an expert on desktop applications either, so please let me know in a comment if you disagree or agree with me on this. I would recommend Python 3 since it‚Äôs more modern and it‚Äôs a more popular option at this point. Let‚Äôs say you want to make something like Instagram. Then, you‚Äôd need to create front-end code for each type of device you want to support. You might use, for example: Each set of code will run on each type of device / browser. This will be the set of code that determines what the layout of the app will be like, what the buttons should look like when you click them, etc. However, you will still need the ability to store users‚Äô info and photos. You will want to store them on your server and not just on your users‚Äô devices so each user‚Äôs followers can view his/her photos. This is where the backend code / server-side code comes in. You‚Äôll need to write some backend code to do things like: So, this is the difference between backend code and front-end code. By the way, Python is not the only good choice for writing backend / server-side code. There are many other popular choices, including Node.js, which is based on JavaScript. I have a programming education YouTube channel called  CS Dojo  with 440,000+ subscribers, where I produce more content like this article. For example, you might like these videos:"
Building a Simple Chatbot from Scratch in Python (using NLTK),uilding a Simple Chatbot from Scratch in Python (using NLTK,"I am sure you‚Äôve heard about  Duolingo : a popular language-learning app, which gamifies practicing a new language. It is pretty popular due to its innovative styles of teaching a foreign language. The concept is simple: five to ten minutes of interactive training a day is enough to learn a language."
Bye-bye Python. Hello Julia!,ye-bye Python. Hello Julia,"D on‚Äôt get me wrong. Python‚Äôs popularity is still backed by a rock-solid community of computer scientists, data scientists and AI specialists. But if you‚Äôve ever been at a dinner table with these people, you also know how much they rant about the weaknesses of Python. From being slow to requiring excessive testing, to producing runtime errors despite prior testing ‚Äî there‚Äôs enough to be pissed off about. Which is why more and more programmers are adopting other languages ‚Äî the top players being Julia, Go, and Rust. Julia is great for mathematical and technical tasks, while Go is awesome for modular programs, and Rust is the top choice for systems programming. Since data scientists and AI specialists deal with lots of mathematical problems, Julia is the winner for them. And even upon critical scrutiny, Julia has upsides that Python can‚Äôt beat. towardsdatascience.com When people create a new programming language, they do so because they want to keep the good features of old languages and fix the bad ones. In this sense, Guido van Rossum created Python in the late 1980s to improve ABC. The latter was  too perfect  for a programming language ‚Äî while its rigidity made it easy to teach, it was hard to use in real life. In contrast, Python is quite pragmatic. You can see this in the  Zen of Python , which reflects the intention that the creators have: Python still kept the good features of ABC: Readability, simplicity, and beginner-friendliness for example. But Python is far more robust and adapted to real life than ABC ever was. In the same sense, the creators of Julia want to keep the good parts of other languages and ditch the bad ones. But Julia is a lot more ambitious: instead of replacing one language, it wants to beat them all. This is how  Julia‚Äôs creators  say it: Julia wants to blend all upsides that currently exist, and not trade them off for the downsides in other languages. And even though Julia is a young language, it has already achieved a lot of the goals that the creators set. Julia can be used for everything from simple machine learning applications to enormous supercomputer simulations. To some extent, Python can do this, too ‚Äî but Python somehow grew into the job. In contrast,  Julia was built  precisely for this stuff. From the bottom up. Julia‚Äôs creators wanted to make a language that is as fast as C ‚Äî but what they created is  even faster . Even though Python has become easier to speed up in recent years, its performance is still a far cry from what Julia can do. In 2017, Julia even joined the  Petaflop Club  ‚Äî the small club of languages who can exceed speeds of one petaflop per second at peak performance. Apart from Julia, only C, C++ and Fortran are  in the club  right now. towardsdatascience.com With its more than 30 years of age, Python has an enormous and supportive community. There is hardly a Python-related question that you can‚Äôt get answered within one Google search. In contrast, the Julia community is pretty tiny. While this means that you might need to dig a bit further to find an answer, you might link up with the same people again and again. And this can turn into programmer-relationships that are beyond value. You don‚Äôt even need to know a single Julia-command to code in Julia. Not only can you use Python and C code within Julia. You can even use  Julia within Python ! Needless to say, this makes it extremely easy to patch up the weaknesses of your Python code. Or to stay productive while you‚Äôre still getting to know Julia. This is one of the strongest points of Python ‚Äî its zillion well-maintained libraries. Julia doesn‚Äôt have many libraries, and users have complained that they‚Äôre not amazingly maintained (yet). But when you consider that Julia is a very young language with a limited amount of resources, the number of libraries that they already have is pretty impressive. Apart from the fact that Julia‚Äôs amount of libraries is growing, it can also interface with libraries from C and Fortran to handle plots, for example. Python is 100% dynamically typed. This means that the program decides at runtime whether a variable is a float or an integer, for example. While this is extremely beginner-friendly, it also introduces a whole host of possible bugs. This means that you need to test Python code in all possible scenarios ‚Äî which is quite a dumb task that takes a lot of time. Since the Julia-creators also wanted it to be easy to learn, Julia fully supports dynamical typing. But in contrast to Python, you can introduce static types if you like ‚Äî in the way they are present in C or Fortran, for example. This can save you a ton of time: Instead of finding  excuses for not testing  your code, you can specify the type wherever it makes sense. towardsdatascience.com While all these things sound pretty great, it‚Äôs important to keep in mind that Julia is still tiny compared to Python. One pretty good metric is the number of questions on StackOverflow: At this point in time, Python is tagged about twenty more often than Julia! This doesn‚Äôt mean that Julia is unpopular ‚Äî rather, it‚Äôs naturally taking some time to get adopted by programmers. Think about it ‚Äî would you really want to write your whole code in a different language? No, you‚Äôd rather try a new language in some future project. This creates a time lag that every programming language faces between its release and its adoption. But if you adopt it now ‚Äî which is easy because Julia allows an enormous amount of language conversion ‚Äî you‚Äôre investing in the future. As more and more people adopt Julia, you‚Äôll already have gained enough experience to answer their questions. Also, your code will be more durable as more and more Python code is replaced by Julia. Forty years ago, artificial intelligence was nothing but a niche phenomenon. The industry and investors didn‚Äôt believe in it, and many technologies were clunky and hard to use. But those who learned it back then are the giants of today ‚Äî those that are so high in demand that  their salary  matches that of an NFL player. Similarly, Julia is still very niche now. But when it grows, the big winners will be those who adopted it early. I‚Äôm not saying that you‚Äôre guaranteed to make a shitload of money in ten years if you adopt Julia now. But you‚Äôre increasing your chances. Think about it: Most programmers out there have Python on their CV. And in the next few years, we‚Äôll see even more Python programmers on the job market. But if the demand of enterprises for Python slows, the perspectives for Python programmers are going to go down. Slowly at first, but inevitably. On the other hand, you have a real edge if you can put Julia on your CV. Because let‚Äôs be honest, what distinguishes you from any other Pythonista out there? Not much. But there won‚Äôt be that many Julia-programmers out there, even in three years‚Äô time. With Julia-skills, not only are you showing that you have interests beyond the job requirements. You‚Äôre also demonstrating that you‚Äôre eager to learn and that you have a broader sense of what it means to be a programmer. In other words, you‚Äôre fit for the job. You ‚Äî and the other Julia programmers ‚Äî are future rockstars, and you know it. Or, as  Julia‚Äôs creators  said it in 2012: Python is still insanely popular. But if you learn Julia now, that could be your golden ticket later on. In this sense: Bye-bye Python. Hello Julia! Edit: I‚Äôve given a talk on Julia vs. Python! It was hosted by  Hatchpad , and the video is  here ."
The Next Level of Data Visualization in Python,he Next Level of Data Visualization in Pytho,"The sunk-cost fallacy is one of many  harmful cognitive biases  to which humans fall prey. It  refers to our tendency  to continue to devote time and resources to a lost cause because we have already spent ‚Äî sunk ‚Äî so much time in the pursuit. The sunk-cost fallacy applies to staying in bad jobs longer than we should, slaving away at a project even when it‚Äôs clear it won‚Äôt work, and yes, continuing to use a tedious, outdated plotting library ‚Äî matplotlib ‚Äî when more efficient, interactive, and better-looking alternatives exist. Over the past few months, I‚Äôve realized the only reason I use  matplotlib  is the hundreds of hours I‚Äôve sunk into learning the  convoluted syntax . This complication leads to hours of frustration on StackOverflow figuring out how to  format dates  or  add a second y-axis . Fortunately, this is a great time for Python plotting, and after exploring  the options , a clear winner ‚Äî in terms of ease-of-use, documentation, and functionality ‚Äî is the  plotly Python library.  In this article, we‚Äôll dive right into  plotly , learning how to make better plots in less time ‚Äî often with one line of code. All of the code for this article is  available on GitHub . The charts are all interactive and can be viewed on  NBViewer here . The  plotly   Python package is an open-source library built on  plotly.js  which  in turn is built on  d3.js .  We‚Äôll be using a wrapper on plotly called  cufflinks  designed to work with Pandas dataframes. So, our entire stack is cufflinks > plotly > plotly.js > d3.js which means we get the efficiency of coding in Python with the incredible  interactive graphics capabilities of d3. ( Plotly itself  is a graphics company with several products and open-source tools. The Python library is free to use, and we can make unlimited charts in offline mode plus up to 25 charts in online mode to  share with the world .) All the work in this article was done in a Jupyter Notebook with plotly + cufflinks running in offline mode. After installing plotly and cufflinks with  pip install cufflinks plotly  import the following to run in Jupyter: Single variable ‚Äî univariate ‚Äî plots are a standard way to start an analysis and the histogram is a go-to plot ( although it has some issues ) for graphing a distribution. Here, using my Medium article statistics (you can see  how to get your own stats here  or use  mine here ) let‚Äôs make an interactive histogram of the number of claps for articles (  df  is a standard Pandas dataframe): For those used to  matplotlib , all we have to do is add one more letter (  iplot  instead of  plot ) and we get a much better-looking and interactive chart! We can click on the data to get more details, zoom into sections of the plot, and as we‚Äôll see later, select different categories to highlight. If we want to plot overlaid histograms, that‚Äôs just as simple: With a little bit of  pandas  manipulation, we can do a barplot: s we saw, we can combine the  power of pandas  with plotly + cufflinks. For a boxplot of the fans per story by publication, we use a  pivot  and then plot: The benefits of interactivity are that we can explore and subset the data as we like. There‚Äôs a lot of information in a boxplot, and without the ability to see the numbers, we‚Äôll miss most of it! The scatterplot is the heart of most analyses. It allows us to see the evolution of a variable over time or the relationship between two (or more) variables. A considerable portion of real-world data has a time element. Luckily, plotly + cufflinks was designed with time-series visualizations in mind. Let‚Äôs make a dataframe of my TDS articles and look at how the trends have changed. Here we are doing quite a few different things all in one line: For more information, we can also add in text annotations quite easily: For a two-variable scatter plot colored by a third categorical variable we use: Let‚Äôs get a little more sophisticated by using a log axis ‚Äî specified as a plotly layout ‚Äî (see the  Plotly documentation  for the layout specifics) and sizing the bubbles by a numeric variable: With a little more work ( see notebook for details ), we can even put four variables ( this is not advised ) on one graph! As before, we can combine pandas with plotly+cufflinks for useful plots See the notebook  or the documentation  for more examples of added functionality. We can add in text annotations, reference lines, and best-fit lines to our plots with a single line of code, and still with all the interaction. Now we‚Äôll get into a few plots that you probably won‚Äôt use all that often, but which can be quite impressive. We‚Äôll use the  plotly  figure_factory , to keep even these incredible plots to one line. When we want to explore relationships among many variables, a  scattermatrix  (also called a splom) is a great option: Even this plot is completely interactive allowing us to explore the data. To visualize the correlations between numeric variables, we calculate the correlations and then make an annotated heatmap: The list of plots goes on and on. Cufflinks also has several themes we can use to get completely different styling with no effort. For example, below we have a ratio plot in the ‚Äúspace‚Äù theme and a spread plot in ‚Äúggplot‚Äù: We also get 3D plots (surface and bubble): For those  who are so inclined , you can even make a pie chart: When you make these plots in the notebook, you‚Äôll notice a small link on the lower right-hand side on the graph that says ‚ÄúExport to plot.ly‚Äù. If you click that link, you are then taken to the  chart studio  where you can touch up your plot for a final presentation. You can add annotations, specify the colors, and generally clean everything up for a great figure. Then, you can publish your figure online so anyone can find it with the link. Below are two charts I touched up in Chart Studio: With everything mentioned here, we are still not exploring the full capabilities of the library! I‚Äôd encourage you to check out both the plotly and the cufflinks documentation for more incredible graphics. The worst part about the sunk cost fallacy is you only realize how much time you‚Äôve wasted after you‚Äôve quit the endeavor. Fortunately, now that I‚Äôve made the mistake of sticking with  matploblib  for too long, you don‚Äôt have to! When thinking about plotting libraries, there are a few things we want: As of right now, the best option for doing all of these in  Python is plotly . Plotly allows us to make visualizations quickly and helps us get better insight into our data through interactivity. Also, let‚Äôs admit it, plotting should be one of the most enjoyable parts of data science! With other libraries, plotting turned into a tedious task, but with plotly, there is again joy in making a great figure! Now that it‚Äôs 2019, it is time to upgrade your Python plotting library for better efficiency, functionality, and aesthetics in your data science visualizations. As always, I welcome feedback and constructive criticism. I can be reached on Twitter  @koehrsen_will."
A Complete Machine Learning Project Walk-Through in Python: Part One, Complete Machine Learning Project Walk-Through in Python: Part On,"Reading through a data science book or taking a course, it can feel like you have the individual pieces, but don‚Äôt quite know how to put them together. Taking the next step and solving a complete machine learning problem can be daunting, but preserving and completing a first project will give you the confidence to tackle any data science problem. This series of articles will walk through a complete machine learning solution with a real-world dataset to let you see how all the pieces come together. We‚Äôll follow the general machine learning workflow step-by-step: Along the way, we‚Äôll see how each step flows into the next and how to specifically implement each part in Python. The  complete project  is available on GitHub, with the  first notebook here.  This first article will cover steps 1‚Äì3 with the rest addressed in subsequent posts. (As a note, this problem was originally given to me as an ‚Äúassignment‚Äù for a job screen at a start-up. After completing the work, I was offered the job, but then the CTO of the company quit and they weren‚Äôt able to bring on any new employees. I guess that‚Äôs how things go on the start-up scene!) The first step before we get coding is to understand the problem we are trying to solve and the available data. In this project, we will work with  publicly available building energy data  from New York City. The objective is to use the energy data to build a model that can predict the Energy Star Score of a building and interpret the results to find the factors which influence the score. The data includes the Energy Star Score, which makes this a supervised regression machine learning task: We want to develop a model that is both  accurate  ‚Äî it can predict the Energy Star Score close to the true value ‚Äî and  interpretable  ‚Äî we can understand the model predictions. Once we know the goal, we can use it to guide our decisions as we dig into the data and build models. Contrary to what most data science courses would have you believe, not every dataset is a perfectly curated group of observations with no missing values or anomalies (looking at you  mtcars  and  iris  datasets). Real-world data is messy which means we need to  clean and wrangle  it into an acceptable format before we can even start the analysis. Data cleaning is an un-glamorous, but necessary part of most actual data science problems. First, we can load in the data as a Pandas  DataFrame  and take a look: This is a subset of the full data which contains 60 columns. Already, we can see a couple issues: first, we know that we want to predict the  ENERGY STAR Score  but we don‚Äôt know what any of the columns mean. While this isn‚Äôt necessarily an issue ‚Äî we can often make an accurate model without any knowledge of the variables ‚Äî we want to focus on interpretability, and it might be important to understand at least some of the columns. When I originally got the assignment from the start-up, I didn‚Äôt want to ask what all the column names meant, so I looked at the name of the file, and decided to search for ‚ÄúLocal Law 84‚Äù. That led me to  this page  which explains this is an NYC law requiring all buildings of a certain size to report their energy use. More searching brought me to  all the definitions of the columns.  Maybe looking at a file name is an obvious place to start, but for me this was a reminder to go slow so you don‚Äôt miss anything important! We don‚Äôt need to study all of the columns, but we should at least understand the Energy Star Score, which is described as: A 1-to-100 percentile ranking based on self-reported energy usage for the reporting year. The  Energy Star score  is a relative measure used for comparing the energy efficiency of buildings. That clears up the first problem, but the second issue is that missing values are encoded as ‚ÄúNot Available‚Äù. This is a string in Python which means that even the columns with numbers will be stored as  object  datatypes because Pandas converts a column with any strings into a column of all strings. We can see the datatypes of the columns using the  dataframe.info() method: Sure enough, some of the columns that clearly contain numbers (such as ft¬≤), are stored as objects. We can‚Äôt do numerical analysis on strings, so these will have to be converted to number (specifically  float ) data types! Here‚Äôs a little Python code that replaces all the ‚ÄúNot Available‚Äù entries with not a number (  np.nan ), which can be interpreted as numbers, and then converts the relevant columns to the  float  datatype: Once the correct columns are numbers, we can start to investigate the data. In addition to incorrect datatypes, another common problem when dealing with real-world data is missing values. These can arise for many reasons and have to be either filled in or removed before we train a machine learning model. First, let‚Äôs get a sense of how many missing values are in each column (see the  notebook for code ). (To create this table, I used a function from this  Stack Overflow Forum ). While we always want to be careful about removing information, if a column has a high percentage of missing values, then it probably will not be useful to our model. The threshold for removing columns should depend on the problem ( here is a discussion ), and for this project, we will remove any columns with more than 50% missing values. At this point, we may also want to remove outliers. These can be due to typos in data entry, mistakes in units, or they could be legitimate but extreme values. For this project, we will remove anomalies based on the  definition of extreme outliers : (For the code to remove the columns and the anomalies, see the notebook). At the end of the data cleaning and anomaly removal process, we are left with over 11,000 buildings and 49 features. Now that the tedious ‚Äî but necessary ‚Äî step of data cleaning is complete, we can move on to exploring our data!  Exploratory Data Analysis  (EDA) is an open-ended process where we calculate statistics and make figures to find trends, anomalies, patterns, or relationships within the data. In short, the goal of EDA is to learn what our data can tell us. It generally starts out with a high level overview, then narrows in to specific areas as we find interesting parts of the data. The findings may be interesting in their own right, or they can be used to inform our modeling choices, such as by helping us decide which features to use. The goal is to predict the Energy Star Score (renamed to  score  in our data) so a reasonable place to start is examining the distribution of this variable. A histogram is a simple yet effective way to visualize the distribution of a single variable and is easy to make using  matplotlib . This looks quite suspicious! The Energy Star score is a percentile rank, which means we would expect to see a uniform distribution, with each score assigned to the same number of buildings. However, a disproportionate number of buildings have either the highest, 100, or the lowest, 1, score (higher is better for the Energy Star score). If we go back to the definition of the score, we see that it is based on ‚Äúself-reported energy usage‚Äù which might explain the very high scores. Asking building owners to report their own energy usage is like asking students to report their own scores on a test! As a result, this probably is not the most objective measure of a building‚Äôs energy efficiency. If we had an unlimited amount of time, we might want to investigate why so many buildings have very high and very low scores which we could by selecting these buildings and seeing what they have in common. However, our objective is only to predict the score and not to devise a better method of scoring buildings! We can make a note in our report that the scores have a suspect distribution, but our main focus in on predicting the score. A major part of EDA is searching for relationships between the features and the target. Variables that are correlated with the target are useful to a model because they can be used to predict the target. One way to examine the effect of a categorical variable (which takes on only a limited set of values) on the target is through a density plot using the  seaborn  library. A  density plot can be thought of as a smoothed histogram  because it shows the distribution of a single variable. We can color a density plot by class to see how a categorical variable changes the distribution. The following code makes a density plot of the Energy Star Score colored by the the type of building (limited to building types with more than 100 data points): We can see that the building type has a significant impact on the Energy Star Score. Office buildings tend to have a higher score while Hotels have a lower score. This tells us that we should include the building type in our modeling because it does have an impact on the target. As a categorical variable, we will have to one-hot encode the building type. A similar plot can be used to show the Energy Star Score by borough: The borough does not seem to have as large of an impact on the score as the building type. Nonetheless, we might want to include it in our model because there are slight differences between the boroughs. To quantify relationships between variables, we can use the  Pearson Correlation Coefficient . This is a measure of the strength and direction of a linear relationship between two variables. A score of +1 is a perfectly linear positive relationship and a score of -1 is a perfectly negative linear relationship. Several values of the correlation coefficient are shown below: While the correlation coefficient cannot capture non-linear relationships, it is a good way to start figuring out how variables are related. In Pandas, we can easily calculate the correlations between any columns in a dataframe: The most negative (left) and positive (right) correlations with the target: There are several strong negative correlations between the features and the target with the most negative the different categories of EUI (these measures vary slightly in how they are calculated). The  EUI ‚Äî Energy Use Intensity  ‚Äî is the amount of energy used by a building divided by the square footage of the buildings. It is meant to be a measure of the efficiency of a building with a lower score being better. Intuitively, these correlations make sense: as the EUI increases, the Energy Star Score tends to decrease. To visualize relationships between two continuous variables, we use scatterplots. We can include additional information, such as a categorical variable, in the color of the points. For example, the following plot shows the Energy Star Score vs. Site EUI colored by the building type: This plot lets us visualize what a correlation coefficient of -0.7 looks like. As the Site EUI decreases, the Energy Star Score increases, a relationship that holds steady across the building types. The final exploratory plot we will make is known as the  Pairs Plot. This is a great exploration tool  because it lets us see relationships between multiple pairs of variables as well as distributions of single variables. Here we are using the seaborn visualization library and the  PairGrid  function to create a Pairs Plot with scatterplots on the upper triangle, histograms on the diagonal, and 2D kernel density plots and correlation coefficients on the lower triangle. To see interactions between variables, we look for where a row intersects with a column. For example, to see the correlation of  Weather Norm EUI  with  score , we look in the  Weather Norm EUI  row and the  score  column and see a correlation coefficient of -0.67. In addition to looking cool, plots such as these can help us decide which variables to include in modeling. Feature engineering and selection  often provide the greatest return on time invested in a machine learning problem. First of all, let‚Äôs define what these two tasks are: A machine learning model can only learn from the data we provide it, so ensuring that data includes all the relevant information for our task is crucial. If we don‚Äôt feed a model the correct data, then we are setting it up to fail and we should not expect it to learn! For this project, we will take the following feature engineering steps: One-hot encoding  is necessary to include categorical variables in a model. A machine learning algorithm cannot understand a building type of ‚Äúoffice‚Äù, so we have to record it as a 1 if the building is an office and a 0 otherwise. Adding transformed features can help our model learn non-linear relationships within the data.  Taking the square root, natural log, or various powers of features  is common practice in data science and can be based on domain knowledge or what works best in practice. Here we will include the natural log of all numerical features. The following code selects the numeric features, takes log transformations of these features, selects the two categorical features, one-hot encodes these features, and joins the two sets together. This seems like a lot of work, but it is relatively straightforward in Pandas! After this process we have over 11,000 observations (buildings) with 110 columns (features). Not all of these features are likely to be useful for predicting the Energy Star Score, so now we will turn to feature selection to remove some of the variables. Many of the 110 features we have in our data are redundant because they are highly correlated with one another. For example, here is a plot of Site EUI vs Weather Normalized Site EUI which have a correlation coefficient of 0.997. Features that are strongly correlated with each other are known as  collinear  and removing one of the variables in these pairs of features can often help a  machine learning model generalize and be more interpretable . (I should point out we are talking about correlations of features with other features, not correlations with the target, which help our model!) There are a number of methods to calculate collinearity between features, with one of the most common the  variance inflation factor . In this project, we will use thebcorrelation coefficient to identify and remove collinear features. We will drop one of a pair of features if the correlation coefficient between them is greater than 0.6. For the implementation, take a look at the notebook (and  this Stack Overflow answer ) While this value may seem arbitrary, I tried several different thresholds, and this choice yielded the best model. Machine learning is an  empirical field  and is often about experimenting and finding what performs best! After feature selection, we are left with 64 total features and 1 target. We have now completed data cleaning, exploratory data analysis, and feature engineering. The final step to take before getting started with modeling is establishing a naive baseline. This is essentially a guess against which we can compare our results. If the machine learning models do not beat this guess, then we might have to conclude that machine learning is not acceptable for the task or we might need to try a different approach. For regression problems, a reasonable naive baseline is to guess the median value of the target on the training set for all the examples in the test set. This sets a relatively low bar for any model to surpass. The metric we will use is  mean absolute error  (mae)  which measures the average absolute error on the predictions. There are many metrics for regression, but I like  Andrew Ng‚Äôs advice  to pick a single metric and then stick to it when evaluating models. The mean absolute error is easy to calculate and is interpretable. Before calculating the baseline, we need to split our data into a training and a testing set: We will use 70% of the data for training and 30% for testing: Now we can calculate the naive baseline performance: The naive estimate is off by about 25 points on the test set. The score ranges from 1‚Äì100, so this represents an error of 25%, quite a low bar to surpass! In this article we walked through the first three steps of a machine learning problem. After defining the question, we: Finally, we also completed the crucial step of establishing a baseline against which we can judge our machine learning algorithms. The second post ( available here ) will show how to evaluate machine learning models using  Scikit-Learn , select the best model, and perform hyperparameter tuning to optimize the model. The third post, dealing with model interpretation and reporting results,  is here . As always, I welcome feedback and constructive criticism and can be reached on Twitter  @koehrsen_will ."
Turn Python Scripts into Beautiful ML Tools,urn Python Scripts into Beautiful ML Tool,"In my experience, every nontrivial machine learning project is eventually stitched together with bug-ridden and unmaintainable internal tools. These tools ‚Äî often a patchwork of Jupyter Notebooks and Flask apps ‚Äî are difficult to deploy, require reasoning about client-server architecture, and don‚Äôt integrate well with machine learning constructs like Tensorflow GPU sessions. I saw this first at Carnegie Mellon, then at Berkeley, Google X, and finally while building autonomous robots at Zoox. These tools were often born as little Jupyter notebooks: the sensor calibration tool, the simulation comparison app, the LIDAR alignment app, the scenario replay tool, and so on. As a tool grew in importance, project managers stepped in. Processes sprouted. Requirements flowered. These solo projects gestated into scripts, and matured into gangly maintenance nightmares. When a tool became crucial, we  called in the tools team . They wrote fluent Vue and React. They blinged their laptops with stickers about declarative frameworks. They had a  design process : Which was awesome. But these tools all needed new features, like weekly. And the tools team was supporting ten other projects. They would say, ‚Äúwe‚Äôll update your tool again in two months.‚Äù So we were back to building our own tools, deploying Flask apps, writing HTML, CSS, and JavaScript, and trying to version control everything from notebooks to stylesheets. So my old Google X friend, Thiago Teixeira, and I began thinking about the following question:  What if we could make building tools as easy as writing Python scripts? We wanted machine learning engineers to be able to create beautiful apps without needing a tools team. These internal tools should arise as a natural byproduct of the ML workflow. Writing such tools should  feel  like training a neural net or performing an ad-hoc analysis in Jupyter! At the same time, we wanted to preserve all of the flexibility of a powerful app framework. We wanted to create beautiful, performant tools that engineers could show off. Basically, we wanted this: With an amazing beta community including engineers from Uber, Twitter, Stitch Fix, and Dropbox, we worked for a year to create  Streamlit , a  completely free and open source  app framework for ML engineers. With each prototype, the core principles of Streamlit became simpler and purer. They are: #1: Embrace Python scripting.  Streamlit apps are really just scripts that run from top to bottom. There‚Äôs no hidden state. You can factor your code with function calls. If you know how to write Python scripts, you can write Streamlit apps. For example, this is how you write to the screen: #2: Treat widgets as variables.  There are  no callbacks in Streamlit ! Every interaction simply reruns the script from top to bottom. This approach leads to really clean code: #3: Reuse data and computation.  What if you download lots of data or perform complex computation? The key is to  safely reuse  information across runs. Streamlit introduces a cache primitive that behaves like a persistent, immutable-by-default, data store that lets Streamlit apps safely and effortlessly reuse information. For example, this code  downloads data only once  from the  Udacity Self-driving car project , yielding a simple, fast app: In short, Streamlit works like this: Or in pictures: If this sounds intriguing, you can try it right now! Just run: This will automatically pop open a web browser pointing to your local Streamlit app. If not, just click the link. Ok. Are you back from playing with fractals? Those can be mesmerizing. The simplicity of these ideas does not prevent you from creating incredibly rich and useful apps with Streamlit. During my time at Zoox and Google X, I watched as self-driving car projects ballooned into gigabytes of visual data, which needed to be searched and understood, including running models on images to compare performance. Every self-driving car project I‚Äôve seen eventually has had entire teams working on this tooling. Building such a tool in Streamlit is easy.  This Streamlit demo  lets you perform semantic search across the entire  Udacity self-driving car photo dataset , visualize human-annotated ground truth labels, and  run a complete neural net ( YOLO ) in real time  from within the app [1]. The whole app is a completely self-contained, 300-line Python script, most of which is machine learning code. In fact, there are  only 23 Streamlit calls in the whole app . You can run it yourself right now! As we worked with machine learning teams on their own projects, we came to realize that these simple ideas yield a number of important benefits: Streamlit apps are pure Python files.  So you can use your favorite editor and debugger with Streamlit. Pure Python scripts work seamlessly with Git  and other source control software, including commits, pull requests, issues, and comments. Because Streamlit‚Äôs underlying language is pure Python, you get all the benefits of these amazing collaboration tools for free üéâ. Streamlit provides an immediate-mode live coding environment.  Just click  Always rerun  when Streamlit detects a source file change. Caching simplifies setting up computation pipelines.  Amazingly, chaining cached functions automatically creates efficient computation pipelines! Consider  this code  adapted from our  Udacity demo : Basically, the pipeline is load_metadata ‚Üí create_summary. Every time the script is run  Streamlit only recomputes whatever subset of the pipeline is required to get the right answer . Cool! Streamlit is built for GPUs.  Streamlit allows direct access to machine-level primitives like TensorFlow and PyTorch and complements these libraries. For example in this demo, Streamlit‚Äôs cache stores the entire  NVIDIA celebrity face GAN  [2]. This approach enables nearly instantaneous inference as the user updates sliders. Streamlit is a free and open-source library rather than a proprietary web app . You can serve Streamlit apps on-prem without contacting us. You can even run Streamlit locally on a laptop without an Internet connection! Furthermore, existing projects can adopt Streamlit incrementally. This just scratches the surface of what you can do with Streamlit. One of the most exciting aspects of Streamlit is how these primitives can be easily composed into complex apps that look like scripts. There‚Äôs a lot more we could say about how our architecture works and the features we have planned, but we‚Äôll save that for future posts. We‚Äôre excited to finally share Streamlit with the community today and see what you all build with it. We hope that you‚Äôll find it easy and delightful to turn your Python scripts into beautiful ML apps. Thanks to Amanda Kelly, Thiago Teixeira, TC Ricks, Seth Weidman, Regan Carey, Beverly Treuille, Genevi√®ve Wachtell, and Barney Pell for their helpful input on this article. References: [1] J. Redmon and A. Farhadi,  YOLOv3: An Incremental Improvement  (2018), arXiv. [2] T. Karras, T. Aila, S. Laine, and J. Lehtinen,  Progressive Growing of GANs for Improved Quality, Stability, and Variation  (2018), ICLR. [3] S. Guan,  Controlled image synthesis and editing using a novel TL-GAN model  (2018), Insight Data Science Blog."
SMOTE AND NEAR MISS IN PYTHON: MACHINE LEARNING IN IMBALANCED DATASETS,MOTE AND NEAR MISS IN PYTHON: MACHINE LEARNING IN IMBALANCED DATASET,"Imagine, you have two categories in your dataset to predict ‚Äî Category-A and Category-B. When Category-A is higher than Category-B or vice versa, you have a problem of imbalanced dataset. So how is this a problem? Imagine in a dataset of 100 rows, Category-A is containing 90 records and Category-B is containing 10 records. You run a machine learning model and end up with 90% accuracy. You were excited until you checked the confusion matrix. Here, Category-B is completely classified as Category-A and the model got away with an accuracy of 90%. How do we fix this problem? We will be discussing 2 of the common and simple ways to deal with this problem. SMOTE is an over-sampling method. What it does is, it creates synthetic (not duplicate) samples of the minority class. Hence making the minority class equal to the majority class. SMOTE does this by selecting similar records and altering that record one column at a time by a random amount within the difference to the neighbouring records. We will be diving into python to see how this works. If you want to read more on SMOTE, here is an original research paper titled: ‚Äú SMOTE: Synthetic Minority Over-sampling Technique ‚Äù written in 2002. NearMiss is an under-sampling technique. Instead of resampling the Minority class, using a distance, this will make the majority class equal to minority class. Let‚Äôs see these practically: I‚Äôll be using  Bank Marketing  dataset from UCI. Here the column for prediction is ‚Äúy‚Äù which says either yes or no for client subscription to term deposit. The full code is available on  GitHub . I have put the data in a variable called ‚Äúbank‚Äù. And for the sake of simplicity, I‚Äôve removed ‚Äúpoutcome‚Äù and ‚Äúcontact‚Äù column and dropped the NAs. So, from 45,211 records, we are left with 43,193 records. For the next step, I‚Äôve mapped yes and no to ‚Äú1‚Äù and ‚Äú0‚Äù respectively. Now to the main part: If we check: We get: The dataset contains 38172 records of clients without term deposit subscription and only 5021 records of clients with term deposit subscription. Clearly an imbalanced dataset. If we split the dataset and fit a Logistic Regression and check the accuracy score: Great 89%! Now let us check the confusion matrix: We can clearly see, this is a  bad  model. This model is not able to classify clients who have subscription for term deposits. Let‚Äôs check the recall score: Clearly bad. This is expected, since the one category has more records than the other. You might need to install  imblearn  package from your prompt / Terminal. Now: Before fitting SMOTE, let us check the y_train values: Let us fit SMOTE: (You can check out all the parameters from  here ) Now let us check the amount of records in each category: Both categories have equal amount of records. More specifically, the minority class has been increased to the total number of majority class. Now fitting the classifier again and testing we get an accuracy score of: Whoa! We have reduced the accuracy. But let us check the confusion matrix anyway: This is a good model compared to the previous one. Recall is great. I would go ahead with this model than using the previous model. Now let us check what happens if we use NearMiss. Import NearMiss: Fit NearMiss: (You can check all the parameters from  here ) Now let us check the amount of records in each category: Here, the majority class has been reduced to the total number of minority class, so that both classes will have equal number of records. Now let us fit the classifier again and test the model: This model is better than the first model because it classifies better. But since in this case, SMOTE is giving me a great accuracy and recall, I‚Äôll go ahead and use that model! :)"
Flask‚Ää‚Äî‚ÄäHost Your Python Machine Learning Model On Web,lask‚Ää‚Äî‚ÄäHost Your Python Machine Learning Model On We,"Once your machine learning model is predicting accurate results, you can expose it to the outside world. This article presents the easy-to-follow steps which we can follow to host a machine learning model to the outside world. Public can then access your work via their web browsers. It is an important step for anyone who wants to make a business out of their machine learning models."
Scikit-Learn Cheat Sheet: Python Machine Learning,cikit-Learn Cheat Sheet: Python Machine Learnin,"Originally published at:  https://www.datacamp.com/community/blog/scikit-learn-cheat-sheet Most of you who are learning data science with  Python  will have definitely heard already about  scikit-learn , the open source Python library that implements a wide variety of  machine learning , preprocessing, cross-validation and visualization algorithms with the help of a unified interface. If you‚Äôre still quite new to the field, you should be aware that machine learning, and thus also this Python library, belong to the must-knows for every aspiring data scientist. With this scikit-learn  cheat sheet, you‚Äôll go through the basic steps to implement machine learning algorithms successfully: you'll see how to load in your data, how to preprocess it, how to create your own model to which you can fit your data and predict target labels, how to validate your model and how to tune it further to improve its performance. Go  here  to see the cheat sheet. In short, this cheat sheet will kickstart your data science projects: with the help of code examples, you‚Äôll have created, validated and tuned your machine learning models in no time. So what are you waiting for? Time to get started! Begin with  our scikit-learn tutorial for beginners , which will introduce you to the steps that you will need to undertake to do machine learning: data exploration, data preprocessing, the construction of your machine learning model, model validation and tuning the model. In this all, you‚Äôll make use of Python‚Äôs data visualization library  matplotlib  to visualize your results. PS. Don‚Äôt miss our  Bokeh cheat sheet , the  Pandas cheat sheet  or the  Python cheat sheet for data science . Originally published at  www.datacamp.com . Hacker Noon  is how hackers start their afternoons. We‚Äôre a part of the  @AMI  family. We are now  accepting submissions  and happy to  discuss advertising & sponsorship  opportunities. If you enjoyed this story, we recommend reading our  latest tech stories  and  trending tech stories . Until next time, don‚Äôt take the realities of the world for granted!"
Stock Price Prediction Using Python & Machine Learning,tock Price Prediction Using Python & Machine Learnin,"Using Python & Long Short-Term Memory (LSTM) Disclaimer:  The material in this article is purely educational and should not be taken as professional investment advice. Invest at your own discretion. If you aren‚Äôt a  member of Medium  already, then consider becoming a member if not for my articles then for all of the other amazing articles & authors‚Ä¶"
An Introduction to Scikit Learn: The Gold Standard of Python Machine Learning,n Introduction to Scikit Learn: The Gold Standard of Python Machine Learnin,"Want to be inspired? Come join my  Super Quotes newsletter . üòé If you‚Äôre going to do Machine Learning in Python,  Scikit Learn  is the gold standard. Scikit-learn provides a wide selection of supervised and unsupervised learning algorithms. Best of all, it‚Äôs by far the easiest and cleanest ML library. Scikit learn was created with a software engineering mindset. It‚Äôs core API design revolves around being easy to use, yet powerful, and still maintaining flexibility for research endeavours. This robustness makes it perfect for use in any end-to-end ML project, from the research phase right down to production deployments. Scikit Learn is built on top of several common data and math Python libraries. Such a design makes it super easy to integrate between them all. You can pass numpy arrays and pandas data frames directly to the ML algoirthms of Scikit! It uses the following libraries: Scikit Learn is focused on Machine Learning, e.g  data modelling . It  is not  concerned with the loading, handling, manipulating, and visualising of data. Thus, it is natural and common practice to use the above libraries, especially NumPy, for those extra steps; they are made for each other! Scikit‚Äôs robust set of algorithm offerings includes: Even beyond that, it has some very convenient and advanced functions not commonly offered by other libraries: To give you a taste of just how easy it is to train and test an ML model using Scikit Learn, here‚Äôs an example of how to do just that for a Decision Tree Classifier! Decision trees for both classification and regression are super easy to use in Scikit Learn with a built in class. We‚Äôll first load in our dataset which actually comes built into the library. Then we‚Äôll initialise our decision tree for classification, also a built in class. Running training is then a simple one-liner! The  .fit(X, Y)  function trains the model where  X  is the numpy array of inputs and  Y  is the corresponding numpy array of outputs Scikit Learn also allows us to visualise our tree using the graphviz library. It comes with a few options that will help in visualising the decision nodes and splits that the model learned which is super useful for understanding how it all works. Below we will colour the nodes based on the feature names and display the class and feature information of each node. Beyond that, Scikit Learn‚Äôs documentation is exquisite! Each of the  algorithm parameters  are explained clearly and are intuitively named. Moreover, they also offer  tutorials with example code  on how to train and apply the model, its pros and cons, and practical application tips! Follow me on  twitter  where I post all about the latest and greatest AI, Technology, and Science! Connect with me on  LinkedIn  too!"
Python Machine Learning: A Comprehensive Handbook for Machine Learning,ython Machine Learning: A Comprehensive Handbook for Machine Learnin,Congratulation! You decided to break into data science and machine learning. You may have taken some courses in machine learning online or even taken several hands-on machine learning projects.
Python Machine Learning: Scikit-Learn Tutorial,ython Machine Learning: Scikit-Learn Tutoria,"Originally published at  https://www.datacamp.com/community/tutorials/machine-learning-python Machine learning studies the design of algorithms that can learn. The hope that this discipline brings with itself is that the inclusion of experience into its tasks will eventually improve the learning. However, this improvement needs to happen in such a way that the learning itself becomes automatic so that humans don‚Äôt need to interfere anymore is the ultimate goal. You‚Äôll probably have already heard that machine learning has close ties between this discipline and Knowledge Discovery, Data Mining, Artificial Intelligence (AI) and Statistics. Typical use cases of machine learning rnage from scientific knowledge discovery and more commercial ones: from the ‚ÄúRobot Scientist‚Äù to anti-spam filtering and recommender systems. Or maybe, if you haven‚Äôt heard about this discipline, you‚Äôll find it vaguely familiar as  one of the 8 topics  that you need to master if you want to excel in data science. This scikit-learn tutorial will introduce you to the basics of Python machine learning: step-by-step, it will show you how to use Python and its libraries to explore your data with the help of  matplotlib , work with the well-known algorithms KMeans and Support Vector Machines (SVM) to construct models, to fit the data to these models, to predict values and to validate the models that you have build. Note that the code chunks have been left out for convenience. If you want to follow and practice with code, go  here . If you‚Äôre more interested in an R tutorial, check out our  Machine Learning with R for Beginners tutorial The first step to about anything in data science is loading in your data. This is also the starting point of this tutorial. If you‚Äôre new to this and you want to start problems on your own, finding data sets might prove to be a challenge. However, you can typically find good data sets at the  UCI Machine Learning Repository  or on the  Kaggle  website. Also, check out  this KD Nuggets list with resources . For now, you just load in the  digits  dataset that comes with a Python library, called  scikit-learn . No need to go and look for datasets yourself. Fun fact:  did you know the name originates from the fact that this library is a scientific toolbox built around SciPy? By the way, there is  more than just one scikit  out there. This scikit contains modules specifically for machine learning and data mining, which explains the second component of the library name. :) To load in the data, you import the module  datasets  from  sklearn . Then, you can use the  load_digits()  method from  datasets  to load in the data. Note that the  datasets  module contains other methods to load and fetch popular reference datasets, and you can also count on this module in case you need artificial data generators. In addition, this data set is also available through the UCI Repository that was mentioned above: you can find the data  here . You‚Äôll load in this data with the help of the pandas library. When you first start working with a dataset, it‚Äôs always a good idea to go through the data description and see what you can already learn. When it comes to  scikit-learn , you don‚Äôt immediately have this information readily available, but in the case where you import data from another source, there's usually a data description present, which will already be a sufficient amount of information to gather some insights into your data. However, these insights are not merely deep enough for the analysis that you are going to perform. You really need to have a good working knowledge about the data set. Performing an exploratory data analysis (EDA) on a data set like the one that this tutorial now has might seem difficult. You should start with gathering the basic information: you already have knowledge of things such as the target values and the description of your data. You can access the  digits  data through the attribute  data . Similarly, you can also access the target values or labels through the  target  attribute and the description through the  DESCR  attribute. To see which keys you have available to already get to know your data, you can just run  digits.keys() . The next thing that you can (double)check is the type of your data. If you used  read_csv()  to import the data, you would have had a data frame that contains just the data. There wouldn‚Äôt be any description component, but you would be able to resort to, for example,  head()  or  tail()  to inspect your data. In these cases, it‚Äôs always wise to read up on the data description folder! However, this tutorial assumes that you make use of the library‚Äôs data and the type of the  digits  variable is not that straightforward if you‚Äôre not familiar with the library. Look at the print out in the first code chunk. You‚Äôll see that  digits  actually contains  numpy  arrays! This is already quite some important information. But how do you access these arays? It‚Äôs very easy, actually: you use attributes to access the relevant arrays. Remember that you have already seen which attributes are available when you printed  digits.keys() . For instance, you have the  data  attribute to isolate the data,  target  to see the target values and the  DESCR  for the description, ‚Ä¶ But what then? The first thing that you should know of an array is its shape. That is, the number of dimensions and items that is contained within an array. The array‚Äôs shape is a tuple of integers that specify the sizes of each dimension. Now let‚Äôs try to see what the shape is of these three arrays that you have distinguished (the  data ,  target  and  DESCR  arrays). Use first the  data  attribute to isolate the numpy array from the  digits  data and then use the  shape  attribute to find out more. You can do the same for the  target  and  DESCR . There‚Äôs also the  images  attribute, which is basically the data in images. To recap: by inspecting  digits.data , you see that there are 1797 samples and that there are 64 features. Because you have 1797 samples, you also have 1797 target values. But all those target values contain 10 unique values, namely, from 0 to 9. In other words, all 1797 target values are made up of numbers that lie between 0 and 9. This means that the digits that your model will need to recognize are numbers from 0 to 9. Lastly, you see that the  images  data contains three dimensions: there are 1797 instances that are 8 by 8 pixels big. Then, you can take your exploration up a notch by visualizing the images that you‚Äôll be working with. You can use one of Python‚Äôs data visualization libraries, such as  matplotlib : On a more simple note, you can also visualize the target labels with an image: Now you know a very good idea of the data that you‚Äôll be working with! But is there no other way to visualize the data? As the  digits  data set contains 64 features, this might prove to be a challenging task. You can imagine that it‚Äôs very hard to understand the structure and keep the overview of the  digits  data. In such cases, it is said that you‚Äôre working with a high dimensional data set. High dimensionality of data is a direct result of trying to describe the objects via a collection of features. Other examples of high dimensional data are, for example, financial data, climate data, neuroimaging, ‚Ä¶ But, as you might have gathered already, this is not always easy. In some cases, high dimensionality can be problematic, as your algorithms will need to take into account too many features. In such cases, you speak of the curse of dimensionality. Because having a lot of dimensions can also mean that your data points are far away from virtually every other point, which makes the distances between the data points uninformative. Dont‚Äô worry, though, because the curse of dimensionality is not simply a matter of counting the number of features. There are also cases in which the effective dimensionality might be much smaller than the number of the features, such as in data sets where some features are irrelevant. In addition, you can also understand that data with only two or three dimensions is easier to grasp and can also be visualized easily. That all explains why you‚Äôre going to visualize the data with the help of one of the Dimensionality Reduction techniques, namely Principal Component Analysis (PCA). The idea in PCA is to find a linear combination of the two variables that contains most of the information. This new variable or ‚Äúprincipal component‚Äù can replace the two original variables. In short, it‚Äôs a linear transformation method that yields the directions (principal components) that maximize the variance of the data. Remember that the variance indicates how far a set of data points lie apart. If you want to know more, go to  this page . You can easily apply PCA do your data with the help of  scikit-learn. Tip : you have used the  RandomizedPCA()  here because it performs better when there‚Äôs a high number of dimensions. Try replacing the randomized PCA model or estimator object with a regular PCA model and see what the difference is. Note how you explicitly tell the model to only keep two components. This is to make sure that you have two-dimensional data to plot. Also, note that you don‚Äôt pass the target class with the labels to the PCA transformation because you want to investigate if the PCA reveals the distribution of the different labels and if you can clearly separate the instances from each other. You can now build a scatterplot to visualize the data: Again you use  matplotlib  to visualize the data. It‚Äôs good for a quick visualization of what you‚Äôre working with, but you might have to consider something a little bit more fancy if you‚Äôre working on making this part of your data science portfolio. Also note that the last call to show the plot ( plt.show() ) is not necessary if you‚Äôre working in Jupyter Notebook, as you‚Äôll want to put the images inline. When in doubt, you can always check out our  Definitive Guide to Jupyter Notebook . Now that you have even more information about your data and you have a visualization ready, it does seem a bit like the data points sort of group together, but you also see there is quite some overlap. This might be interesting to investigate further. Do you think that, in a case where you knew that there are 10 possible digits labels to assign to the data points, but you have no access to the labels, the observations would group or ‚Äúcluster‚Äù together by some criterion in such a way that you could infer the lables? Now this is a research question! In general, when you have acquired a good understanding of your data, you have to decide on the use cases that would be relevant to your data set. In other words, you think about what your data set might teach you or what you think you can learn from your data. From there on, you can think about what kind of algorithms you would be able to apply to your data set in order to get the results that you think you can obtain. Tip:  the more familiar you are with your data, the easier it will be to assess the use cases for your specific data set. The same also holds for finding the appropriate machine algorithm. However, when you‚Äôre first getting started with  scikit-learn , you‚Äôll see that the amount of algorithms that the library contains is pretty vast and that you might still want additional help when you‚Äôre doing the assessment for your data set. That‚Äôs why  this  scikit-learn  machine learning map  will come in handy. Note that this map does require you to have some knowledge about the algorithms that are included in the  scikit-learn  library. This, by the way, also holds some truth for taking this next step in your project: if you have no idea what is possible, it will be very hard to decide on what your use case will be for the data. As your use case was one for clustering, you can follow the path on the map towards ‚ÄúKMeans‚Äù. You‚Äôll see the use case that you have just thought about requires you to have more than 50 samples (‚Äúcheck!‚Äù), to have labeled data (‚Äúcheck!‚Äù), to know the number of categories that you want to predict (‚Äúcheck!‚Äù) and to have less than 10K samples (‚Äúcheck!‚Äù). But what exactly is the K-Means algorithm? It is one of the simplest and widely used unsupervised learning algorithms to solve clustering problems. The procedure follows a simple and easy way to classify a given data set through a certain number of clusters that you have set before you run the algorithm. This number of clusters is called  k  and you select this number at random. Then, the k-means algorithm will find the nearest cluster center for each data point and assign the data point closest to that cluster. Once all data points have been assigned to clusters, the cluster centers will be recomputed. In other words, new cluster centers will emerge from the average of the values of the cluster data points. This process is repeated until most data points stick to the same cluster. The cluster membership should stabilize. You can already see that, because the k-means algorithm works the way it does, the initial set of cluster centers that you give up can have a big effect on the clusters that are eventually found. You can, of course, deal with this effect, as you will see further on. However, before you can go into making a model for your data, you should definitely take a look into preparing your data for this purpose. As you have read in the previous section, before modeling your data, you‚Äôll do well by preparing it first. This preparation step is called ‚Äúpreprocessing‚Äù. The first thing that we‚Äôre going to do is preprocessing the data. You can standardize the  digits  data by, for example, making use of the  scale()  method. By scaling the data, you shift the distribution of each attribute to have a mean of zero and a standard deviation of one (unit variance). In order to assess your model‚Äôs performance later, you will also need to divide the data set into two parts: a training set and a test set. The first is used to train the system, while the second is used to evaluate the learned or trained system. In practice, the division of your data set into a test and a training sets is disjoint: the most common splitting choice is to take 2/3 of your original data set as the training set, while the 1/3 that remains will compose the test set. You will try to do this also here. You see in the code chunk below that this ‚Äòtraditional‚Äô splitting choice is respected: in the arguments of the  train_test_split()  method, you clearly see that the  test_size  is set to  0.25 . You‚Äôll also note that the argument  random_state  has the value  42  assigned to it. With this argument, you can guarantee that your split will always be the same. That is particularly handy if you want reproducible results. After you have split up your data set into train and test sets, you can quickly inspect the numbers before you go and model the data: You‚Äôll see that the training set  X_train  now contains 1347 samples, which is exactly 2/3d of the samples that the original data set contained, and 64 features, which hasn‚Äôt changed. The  y_train  training set also contains 2/3d of the labels of the original data set. This means that the test sets  X_train  and  y_train  contain 450 samples. After all these preparation steps, you have made sure that all your known (training) data is stored. No actual model or learning was performed up until this moment. Now, it‚Äôs finally time to find those clusters of your training set. Use  KMeans()  from the  cluster  module to set up your model. You‚Äôll see that there are three arguments that are passed to this method:  init ,  n_clusters  and the  random_state . You might still remember this last argument from before when you split the data into training and test sets. This argument basically guaranteed that you got reproducible results. The  init  indicates the method for initialization and even though it defaults to  ‚Äòk-means++‚Äô , you see it explicitly coming back in the code. That means that you can leave it out if you want. Try it out in the DataCamp Light chunk above! Next, you also see that the  n_clusters  argument is set to  10 . This number not only indicates the number of clusters or groups you want your data to form, but also the number of centroids to generate. Remember that a cluster centroid is the middle of a cluster. Do you also still remember how the previous section described this as one of the possible disadvantages of the K-Means algorithm? That is, that the initial set of cluster centers that you give up can have a big effect on the clusters that are eventually found? Usually, you try to deal with this effect by trying several initial sets in multiple runs and by selecting the set of clusters with the minimum sum of the squared errors (SSE). In other words, you want to minimize the distance of each point in the cluster to the mean or centroid of that cluster. By adding the  n-init  argument to  KMeans() , you can determine how many different centroid configurations the algorithm will try. Note  again that you don‚Äôt want to insert the test labels when you fit the model to your data: these will be used to see if your model is good at predicting the actual classes of your instances! You can also visualize the images that make up the cluster centers: If you want to see another example that visualizes the data clusters and their centers, go  here . The next step is to predict the labels of the test set. You predict the values for the test set, which contains 450 samples. You store the result in  y_pred . You also print out the first 100 instances of  y_pred  and  y_test  and you immediately see some results. In addition, you can study the shape of the cluster centers: you immediately see that there are 10 clusters with each 64 features. But this doesn‚Äôt tell you much because we set the number of clusters to 10 and you already knew that there were 64 features. Maybe a visualization would be more helpful: Tip : run the code from above again, but use the PCA reduction method: At first sight, the visualization doesn‚Äôt seem to indicate that the model works well. This needs some further investigation. And this need for further investigation brings you to the next essential step, which is the evaluation of your model‚Äôs performance. In other words, you want to analyze the degree of correctness of the model‚Äôs predictions. You should look at the confusion matrix. Then, you should try to figure out something more about the quality of the clusters by applying different cluster quality metrics. That way, you can judge the goodness of fit of the cluster labels to the correct labels. There are quite some metrics to consider: But also these scores aren‚Äôt fantastic. Clearly, you should consider another estimator to predict the labels for the  digits  data. When you recapped all of the information that you gathered out of the data exploration, you saw that you could build a model to predict which group a digit belongs to without you knowing the labels. And indeed, you just used the training data and not the target values to build your KMeans model. Let‚Äôs assume that you depart from the case where you use both the  digits  training data and the corresponding target values to build your model. If you follow the algorithm map, you‚Äôll see that the first model that you meet is the linear SVC. Let‚Äôs apply this to our data. You see here that you make use of  X_train  and  y_train  to fit the data to the SVC model. This is clearly different from clustering. Note also that in this example, you set the value of  gamma  manually. It is possible to automatically find good values for the parameters by using tools such as grid search and cross validation. Even though this is not the focus of this tutorial, you will see how you could have gone about this if you would have made use of grid search to adjust your parameters. For a walkthrough on how you should apply grid search, I refer you to the  original tutorial . You see that in the SVM classifier has a  kernel argument that specifies the kernel type that you‚Äôre going to use in the algorithm. By default, this is  rbf . In other cases, you can specify others such as  linear ,  poly , ‚Ä¶ But what is a kernel exactly? A kernel is a similarity function, which is used to compute similarity between the training data points. When you provide a kernel to an algorithm, together with the training data and the labels, you will get a classifier, as is the case here. You will have trained a model that assigns new unseen objects into a particular category. For the SVM, you will typicall try to linearly divide your data points. You can now visualize the images and their predicted labels. This plot is very similar to the plot that you made when you were exploring the data: But now the biggest question: how does this model perform? You clearly see that this model performs a whole lot better than the clustering model that you used earlier. You can also see it when you visualize the predicted and the actual labels: You‚Äôll see that this visualization confirms your classification report, which is very good news. :) Congratulations, you have reached the end of this scikit-learn tutorial, which was meant to introduce you to Python machine learning! Now it‚Äôs your turn. Start your own digit recognition project with different data. One dataset that you can already use is the MNIST data, which you can download  here . The steps that you will need to take are very similar to the ones that you have gone through with this tutorial, but if you still feel that you can use some help, you should check out  this page , which works with the MNIST data and applies the KMeans algorithm. Working with the digits dataset was the first step in classifying characters with  scikit-learn . If you‚Äôre done with this, you might consider trying out an even more challenging problem, namely, classifying alphanumeric characters in natural images. A well-known dataset that you can use for this problem is the Chars74K dataset, which contains more than 74,000 images of digits from 0 to 9 and the both lowercase and higher case letters of the English alphabet. You can download the dataset  here . Whether you‚Äôre going to start with the projects that have been mentioned above or not, this is definitely not the end of your journey of data science with Python. If you choose not to widen your view just yet, consider deepening your data visualization and data manipulation knowledge: don‚Äôt miss out on DataCamp‚Äôs  Interactive Data Visualization with Bokeh course  to make sure you can impress your peers with a stunning data science portfolio or DataCamp‚Äôs  pandas Foundation course , to learn more about working with data frames in Python. Originally published at  www.datacamp.com ."
Predicting Future Stock Market Trends with Python & Machine Learning,redicting Future Stock Market Trends with Python & Machine Learnin,"Note from Towards Data Science‚Äôs editors:  While we allow independent authors to publish articles in accordance with our  rules and guidelines , we do not endorse each author‚Äôs contribution. You should not rely on an author‚Äôs works without seeking professional advice. See our  Reader Terms  for details. With the recent volatility of the stock market due to the COVID-19 pandemic, I thought it was a good idea to try and utilize machine learning to predict the near-future trends of the stock market. I‚Äôm fairly new to machine learning, and this is my first Medium article so I thought this would be a good project to start off with and showcase. This article tackles different topics concerning data science, namely; data collection and cleaning, feature engineering, as well as the creation of machine learning models to make predictions. Note: I previously had the look-ahead bias in my code for this article, which produced some extremely good results (suspiciously good). However they were misleading, and I now aim to try and fix that with cross-validation. Author‚Äôs disclaimer: This project is not financial or investment advice. It is not a guarantee that it will provide the correct results most of the time. Therefore you should be very careful and not use this as a primary source of trading insight. You can find all the code on a jupyter notebook on my github: github.com To begin, we include all of the libraries used for this project. I used the yfinance API to gather all of the historical stock market data. It‚Äôs taken directly from the yahoo finance website, so it‚Äôs very reliable data. We then define some constants that used in data retrieval and data processing. The list with the indicator symbols is useful to help use produce more features for our model. Here‚Äôs a link where you can find the actual names of some of these features. github.com Now we pull our historical data from yfinance. We don‚Äôt have many features to work with ‚Äî not particularly useful unless we find a way to normalize them at least or derive more features from them. We see that our data above is rough and contains lots of spikes for a time series. It isn‚Äôt very smooth and can be difficult for the model to extract trends from. To reduce the appearance of this we want to exponentially smooth our data before we compute the technical indicators. We can see that the data is much more smoothed. Having many peaks and troughs can make it hard to approximate, or be difficult to extract tends when computing the technical indicators. It can throw the model off. Now it‚Äôs time to compute our technical indicators. As stated above, I use the finta library in combination with python‚Äôs built in eval function to quickly compute all the indicators in the INDICATORS list. I also compute some ema‚Äôs at different average lengths in addition to a normalized volume value. I remove the columns like ‚ÄòOpen‚Äô, ‚ÄòHigh‚Äô, ‚ÄòLow‚Äô, and ‚ÄòAdj Close‚Äô because we can get a good enough approximation with our ema‚Äôs in addition to the indicators. Volume has been proven to have a correlation with price fluctuations, which is why I normalized it. Right before we gather our predictions, I decided to keep a small bit of data to predict future values with. This line captures 5 rows corresponding to the 5 days of the week on July 27th. Now comes one of the most important part of this project ‚Äî computing the truth values. Without these, we wouldn‚Äôt even be able to train a machine learning model to make predictions. How do we obtain truth value? Well it‚Äôs quite intuitive. If we want to know when a stock will increase or decrease (to make a million dollars hopefully!) we would just need to look into the future and observe the price to determine if we should buy or sell right now. Well, with all this historical data, that‚Äôs exactly what we can do. Going back to the table where we initially pulled our data, if we want to know the buy (1) or sell (0) decision on the day of 1993‚Äì03‚Äì29 (where the closing price was 11.4375), we just need to look X days ahead to see if the price is higher or lower than that on 1993‚Äì03‚Äì29. So if we look 1 day ahead, we see that the price increased to 11.5. So the truth value on 1993‚Äì03‚Äì29 would be a buy (1). Since this is also the last step of data processing, we remove all of the NaN value that our indicators and prediction generated, as well as removing the ‚Äòclose‚Äô column. Because we used Pandas‚Äô shift() function, we lose about 15 rows from the end of the dataset (which is why I captured the week of July 27th before this step). Right before we train our model we must split up the data into a train set and test set. However, due to the nature of time-series‚Äô, we need to handle this part carefully. If we randomize our train-test set, we could encounter a  look-ahead bias  which is not good for predicting the stock market. It‚Äôs caused when you train your model on data it would‚Äôve already seen. To prevent this we are going to be training the model using a different technique called cross-validation. The image below illustrates how we are going to partition our data and test the accuracy of the model. First, we‚Äôre going to use multiple classifiers to create an ensemble model. The goal here is to combine the predictions of several models to try and improve on predictability. For each sub-model, we‚Äôre also going to use a feature from Sklearn, GridSearchCV, to optimize each model for the best possible results. First we create the random forest model. Then the KNN model. And now finally we create the voting classifier Once we set up our models, we can put it together with the cross-validation. We start by writing some code that will allow us to iterate over our data with many evenly sized chunks. Printing out the indices of our dataframe, we have successfully partitioned our data like in the sliding window image. Now we add in the code that will split the partitions into train and test sets. It‚Äôs very important to set  shuffle=False  in the  train_test_split  function ‚Äîit‚Äôs how you avoid the look-ahead bias. Finally we incorporate our models. A sample run of this looks like‚Ä¶ the results are exaggerated. And then the final results gives us We can see that we gain slightly more accuracy by using ensemble modelling. Compared to not using cross-validation, the resulting accuracy is much less. However this is a more correct way of going about this problem‚Ä¶ and about a 70% accuracy isn‚Äôt bad either! For the next step we‚Äôre going to predict how the S&P500 will behave with our predictive model. I‚Äôm writing this article on the weekend of August 17th. So to see if this model can produce accurate results, I‚Äôm going to use the closing data from this week as the ‚Äòtruth‚Äô values for the prediction. Since this model is tuned to have a 15 day window, we need to feed in the input data with the days in the week of July 27th. July 27th -> August 17th July 28th -> August 18th July 29th -> August 19th July 30th -> August 20th July 31st -> August 21st We saved the week we‚Äôre going to use in live_pred_data. Here are the five main days we are going to generate a prediction for. Looks like the models predicts that the price will increase for each day. Lets validate our prediction with the actual results. Results July 27th : $ 322.78 ‚Äî August 17th : $ 337.91 July 28th : $ 321.74 ‚Äî August 18th : $ 338.64 July 29th : $ 323.93 ‚Äî August 19th : $ 337.23 July 30th : $ 323.95 ‚Äî August 20th : $ 338.28 July 31st : $ 325.62 ‚Äî August 21st : $ 339.48 As we can see from the actual results, we can confirm that the model was correct in all of its predictions. However there are many factors that go into determining the stock price, so to say that the model will produce similar results every time is naive. However, during relatively normal periods of time (without major panic that causes volatility in the stock market), the model should be able to produce good results. To summarize what we‚Äôve done in this project, I‚Äôve learned a lot about data science and machine learning through this project, and I hope you did too. Being my first article, I‚Äôd love any form of feedback to help improve my skills as a programmer and data scientist. Thanks for reading :)"
Creating and Deploying a Python Machine Learning Service,reating and Deploying a Python Machine Learning Servic,"Imagine you‚Äôre the moderator of a message board or comment section. You don‚Äôt want to read everything your users write online, yet you want to be alerted in case a discussion turns sour or people start spewing racial slurs all over the place. So, you decide to build yourself an automated system for hate speech detection. Text classification via machine learning is an obvious choice of technology. However, turning model prototypes into working services has proven to be a widespread challenge. To help bridge this gap, this four-step tutorial illustrates an exemplary deployment workflow for a hate speech detection app: The code for this project is available  here . The approach is based on the paper  Automated Hate Speech Detection and the Problem of Offensive Language  by Davidson, Warmsley, Macy and Weber. Their results are based on more than 20 000 labelled tweets, which are available on the  corresponding Github page . The .csv file is loaded as a dataframe: The last line cleans the tweet column by converting all text to lowercase and removing non-alphabetic characters. Result: The class attribute can assume three category values:  0  for hate speech,  1  for offensive language and  2  for neither. We have to convert our predictors, i.e. the tweet text, into a numeric representation before we can train a machine learning classifier. We can use scikit-learn‚Äôs  TfidfVectorizer  for this task, which transforms texts into a matrix of term-frequency times inverse document-frequency (tf-idf) values, suitable for machine learning. Additionally, we can remove  stop words  (common words such as  the ,  is , ‚Ä¶) from the processing. For text classification, support vector machines ( SVMs ) are a reliable choice. As they are binary classifiers, we will use a  One-Vs-Rest  strategy, where for each category an SVM is trained to separate this category from all others. Both text vectorization and SVM training can be performed in one command by using scikit-learn‚Äôs  Pipeline  feature and defining the respective steps: Now, the performance of the model should be evaluated, e.g. using a cross-validation approach to calculate classification metrics. However, as this tutorial focusses on model deployment, we will skip this step ( never do this in an actual project ). The same goes for parameter tuning or additional techniques of natural language processing which are described in the  original paper . We can now try a test text and have the model predict the probabilities: The numbers in the array correspond to the probabilities for the three categories (hate speech, offensive language, neither). Using the joblib module, we can save the model as a binary object to disk. This will allow us to load and use the model in an application. The python file  app.py  loads the model and defines a simple module-level function which wraps the call to the model‚Äôs predict_proba function: Now, we use  firefly , a lightweight python module for  function as a service . For advanced configuration or use in a production environment, Flask or Falcon might be a better choice as they‚Äôre well established with a large community. For rapid prototyping, we‚Äôre fine with firefly. We‚Äôll use firefly on the command line to bind the predict function to port 5000 on localhost: Via  curl , we can make a POST request to the created endpoint and obtain a prediction: Of course, in a full-fledged real application there would be much more additional features (logging, input and output validation, exception handling, ‚Ä¶) and work steps (documentation, versioning, testing, monitoring, ‚Ä¶), but here we‚Äôre merely deploying a simple prototype. Why Docker? A Docker container runs an application in an isolated environment, with all dependencies included, and can be shipped as an image, thus simplifying service setup and scaling. We have to configure the contents and start-actions of our container in a file named  Dockerfile : The first three lines are about taking  python:3.6  as base image, additionally installing scikit-learn and firefly (the same versions as in the development environment) and copying the app and model files inside. The latter two lines tell Docker the command which is executed when a container is started and that port 5000 should be exposed. The build process that creates the image  hatespeechdetect  is started via: The  run  command starts a container, derived from an image. Additionally, we‚Äôre binding the containers‚Äôs port 5000 to the host‚Äôs port 3000 via the  -p  option: Now, we can send a request and obtain a prediction: In this example, the container runs locally. Of course the actual purpose is to keep it running at a permanent location, and possibly scale the service by starting multiple containers in an enterprise cluster. A way to make the app publicly available to others is using a platform as a service such as  Heroku , which supports Docker and offers a free basic membership. To use it, we have to register an account and install the  Heroku CLI . Heroku‚Äôs application containers expose a dynamic port, which requires an edit in our  Dockerfile : We have to change port 5000 to the environment variable  PORT : After this change, we are ready for deployment. On the command line, we log in to heroku (which will prompt us for credentials in the browser) and create an app named  hate-speech-detector : Then we log in to the container registry.  heroku container:push  will build an image based on the Dockerfile in the current directory and send it to the Heroku Container registry. After that, we can release the image to the app: As before, the API can be addressed via curl. However, this time, the service is not running locally, but is available to the world! Now, scaling the app would be just a few clicks or commands away. Also, the service needs to be connected to the message board, the trigger threshold needs to be set and an alerting implemented. Hopefully this tutorial will help you deploy your own machine learning models and apps. Got any additional ideas? Share your opinion in the comments!"
The Python Machine Learning Ecosystem,he Python Machine Learning Ecosyste,"Python continues to grow as the number one programming language used by data scientists. In Anaconda‚Äôs recent  State of Data Science in 2021  report, 63% of the data scientists surveyed said that they always or frequently use Python. The popularity of Python within the data science community is in part due to the well supported open-source tools available for machine learning and deep learning. There is currently no one size fits all tool for Artificial Intelligence (AI), or its machine and deep learning subsets. As a result, across the open-source Python ecosystem, there are several core libraries that each serve a particular set of use cases or problems within this space. It can often be confusing to understand which tools to use and when to use them. In the following article, I will give a brief introduction to six of the most widely used packages available for machine learning. Covering what each of the library's core purposes is and when they should be used. The packages covered in this post are: Scikit-learn  is one of the most widely used Python packages for the implementation of machine learning algorithms. It provides a clean, uniform API that enables you to interact with a wide range of models in a standardised way. Scikit-learn vastly simplifies the development of machine learning models and additionally provides a range of utilities for data preprocessing, model selection, tuning and evaluation all via a common interface of transform, fit and predict commands. This interface makes Scikit-learn highly accessible to get started with and also aids code reproducibility in data science. Scikit-learn is widely used in industry and is currently the go-to library for machine learning on tabular data. Pycaret  is a low-code machine learning library that aims to make machine learning accessible to a wider range of users. Similarly to Sckit-learn, it provides a consistent and easy to use interface for interacting with machine learning algorithms. However, Pycaret simplifies the process further by including AutoML aspects such as automated data preprocessing and model selection. Pycaret also aims to be a complete end to end solution incorporating machine learning deployment tools and MLOps capabilities by integrating with cloud providers such as  AWS  and MLOps packages such as  mlflow . Whereas Scikit-learn is a great library for machine learning problems based on tabular data, it is not so well suited to handling the massive scale of data required for natural language or vision-based use cases. For these applications, deep learning is required. PyTorch  provides functionality largely centred around building and training neural networks ‚Äî the backbone of deep learning. PyTorch offers scalable distributed training of models across single or multiple CPUs and GPUs. It also has an ecosystem of its own which provides integrations with Scikit-learn (skorch), model serving (TorchServe) and scheduling (AdaptDL). It is comparatively newer than TensorFlow, the first release was in September 2016, but it has quickly been widely adopted by industry with both Tesla Autopilot and Uber‚Äôs Pyro built on top of PyTorch. TensorFlow  was originally developed by the Google Brain team and was first open-sourced in 2015. This, for a deep learning library, makes it relatively mature. Since its release, TensorFlow has generally been regarded as the go-to tool for developing neural networks. It can be used in a variety of programming languages, outside Python, including Javascript, C++ and Java. It also has a flexible architecture meaning that it can be deployed across a wide variety of platforms from CPUs and GPUs to servers on mobile devices. It is this flexibility that lends itself to a wide variety of industries and use cases and why it remains one of the most popular tools for deep learning. TensorFlow, although a highly scalable and powerful deep learning library, is not known for having a particularly user-friendly interface.  Keras  markets itself as ‚Äúan API designed for human beings, not machines‚Äù and is a high-level wrapper for interacting with TensorFlow. The Keras API has a common interface that has similarities with Scikit-learn. Having consistent compile, fit and predict commands. It is designed to allow for fast experimentation with the TensorFlow library whilst also making deep learning accessible to a wider range of users. FastAI  is another library that aims to make deep learning more accessible to practitioners whilst also providing solutions for researchers. It has a high-level API interface that abstracts away much of the complexity and allows practitioners to quickly gain state of the art results from deep learning. Whilst also providing lower-level components that can be used by researchers to discover new approaches. Under the hood FastAI uses PyTorch. It offers, essentially a simpler abstraction layer whilst also introducing a lot of new functionality such as data visualisations and new ways to split and load data. In this article, I have covered an introduction to six of the most popular Python packages for machine learning and deep learning. There are many other tools available across the Python ecosystem including  Theano ,  Chainer  and  Spark ML . As stated earlier in the article, there is really no one size fits all library for machine learning and it is more a case of selecting the right tool for the right job. Each of the tools described in this article provides solutions for a specific set of problems or use cases. I have summarised, in one line the key purpose for each library below. Scikit-learn ‚Äî the go-to library for machine learning offering a user friendly, consistent interface. Pycaret ‚Äî lowering the entry point for machine learning with low code, automated and end to end solutions. PyTorch ‚Äî build and deploy powerful, scalable neural networks with its highly flexible architecture. TensorFlow ‚Äî one of the most mature deep learning libraries, highly flexible and suited to a wide range of applications. Keras ‚Äî TensorFlow made simple. FastAI ‚Äî makes deep learning more accessible with a high-level API built on top of PyTorch. Thanks for reading!"
Weekly coding & goals progress [Week 30],eekly coding & goals progress [Week 30,Another week full of opportunities to grow and get better. Sometimes I feel there is not enough progress but journaling and keeping track of all the things I have done the previous week really helps me to prevent this kind of thoughts. I expanded the topics I am journaling about to give you a more comprehensive overview. Let‚Äôs have a look at the certain days ‚¨áÔ∏è
Weekly coding progress [Week 27],eekly coding progress [Week 27,Another week passed by and I am super hyped about the future! I just quit my master‚Äôs program to dedicate all my time to my vision and dreams! The master‚Äôs program didn‚Äôt give me the return I expected but that‚Äôs totally okay. I am glad to have spent some time trying it out and meet all the awesome people. Not a single second was wasted but now it‚Äôs time to work on my dreams! Let‚Äôs have a look what I have‚Ä¶
Weekly coding & goals progress [Week 29],eekly coding & goals progress [Week 29,"The last week have been some turbulent one‚Äôs and I have not been as consistent as usual. I coded daily, but not as much as I normally do. However, I am fully back on track and ready to hustle! üöÄ Let‚Äôs see what I have covered this week. ‚¨áÔ∏è"
Weekly coding & goals progress [Week 32],eekly coding & goals progress [Week 32,"HELLO AND WELCOME back to my channel and to another update of my progress towards my goals üöÄ This week I wasn‚Äôt able to code as much as usual since I had to go on a business trip to Italy, thus replacing some coding sessions with content creation (what I usually do on weekends). However, let‚Äôs have a look at what I have covered this week ‚¨áÔ∏è"
Weekly coding progress [Week 22],eekly coding progress [Week 22,"Hello and welcome back to my weekly coding progress. I am happy that you are back to read my article. Every read is appreciated and helps me to improve in what I am doing! This week I had a lot time to continue working on all my projects that had to pause while the final weeks in university. Without further ado, let‚Äôs have a look at the different days üöÄ. SQL ‚Äî   I learned about the differences of TRUNCATE, DELETE and DROP. Statistics ‚Äî   I learned about convenience sampling Blockchain ‚Äî   Smart Contract Lottery: Bugfixing, created a function for starting the lottery in my deploy.py script, created a function for funding the contract with LINK tokens in my helpful_scripts.py. Additionally I published another article about solidity which was about: gas and gas limit, manipulating state variables and units used in solidity with example codes for each subtopic. Machine Learning ‚Äî   Predicting the prices of used cars: Loaded the required libraries, applied descriptive statistics to get a first impression of the data, dropped some observation with null values as well as a column which was not of interest for the analysis. Python Automation ‚Äî   I finalized the first report by adding some lines of code to store the report in a excel file xlsx file since I want to have all monthly reports in one excel map. Thereafter, I started with the payment calendar. First step was brainstorming for all the functionalities and data I need for the outcome report. Solidity ‚Äî   I had a look at If/else, loops and mappings usage in Solidity. Python Automation ‚Äî   Created dictionaries for order volumes per sku as well as the corresponding payment terms. Further brainstormed about some issues that need to be solved. Python Automation ‚Äî   Created dictionaries for order volumes per sku as well as the corresponding payment terms. Further brainstormed about some issues that need to be solved. Additionally, I wrote the code to calculate the cost of one production in terms of order volume and prices(both differ for each sku). Moreover, I have created a function which splits the total costs of a production in payment 1 and payment to accordingly to the payment terms. SQL ‚Äî   Count, Count Distinct, SUM, MIN and MAX Solidity ‚Äî   Unit testing vs. Integration testing, created the irst function for testing the entrance fee function Machine Learning ‚Äî   Dealing with missing values, Dealing with outliers, Probability Distribution Function (PDF) Statistics ‚Äî   Multi-stage Sampling, Sampling Conclusion, Introduction to experimental Design, Python Automation ‚Äî   Added a column with the lead time for each product to the paymentCalendar dataframe and then created a function to get the exact payment dates for the next 3 orders depending on the payment terms. SQL ‚Äî   IFNULL(), COALESCE() Solidity ‚Äî   Smart Contract Lottery: Unit testing ‚Äî created functions for testing -> def test_get_entrance_fee(), def test_cant_enter_unless_started(), def test_can_start_and_enter_lottery(), def test_can_start_and_enter_lottery(), def test_can_end_lottery() Machine Learning ‚Äî   Had a look at the Probability Distribution Functions of the other variables too and cleaned the dataset accordingly. Statistics ‚Äî   Steps of a experimental design with examples Python Automation ‚Äî   Generated the labels in which the payments need to be placed. Next step is to insert the payments in the correct columns. I have watched tutorials on how to record coding tutorials for YouTube, ran some test recordings and made the set up for it. Content creation, review of weekly learnings, scheduling for coming week That‚Äôs it for this week. Don‚Äôt forget ‚Äî CONSISTENCY is key. You can do it too! Happy coding/studying! Thanks for reading this article! If you want to support me you can do it as follows: 1. Give me a follow here on Medium or on Twitter, Instagram, TikTok or YouTube. 2. Clapp for the article 3. Leave a short comment I really appreciate every kind of support! Every interaction you are doing with the content will help me grow and deliver better content with time. üöÄ Thank you, VEGXCODES"
Weekly coding progress [Week 28],eekly coding progress [Week 28,This week I decided to go full-stack because I want to develop software from front to end. In my opinion this is a real superpower. Of course this will take me some time to learn all the concepts but I am quite sure that this is the best way to continue with my coding journey. I like to code in Python but I have recognized that I also like web development. On Saturday I coded‚Ä¶
Weekly coding & goals progress [Week 35] üöÄ,eekly coding & goals progress [Week 35] ,"Hello and welcome everybody to my channel. This is already week 35 and I have learned a lot along the journey. To become a PRO in Python & JavaScript in let‚Äôs say 30 days or even 100 days ‚Äî I am sorry but this is not the reality. To become a good developer you need to invest way more time in practice to get good fundamentals. Furthermore, it really depends if you‚Ä¶"
Weekly coding progress [Week 25],eekly coding progress [Week 25,"Welcome back to my weekly coding progress! Currently I am very busy managing my stuff (university assignments, uni-projects, private projects, full-time job, sports..). However, I remind myself that this state of busyness with stuff that holds my entrepreneur spirit back (e.g. courses in university that pretty suck!) will end in January 2022. At this time I will start with my master‚Äôs thesis and mark the start of getting really‚Ä¶"
Weekly coding & goals progress [Week 33] üöÄ,eekly coding & goals progress [Week 33] ,"Hello and welcome back to my weekly coding & goals progress article. What‚Äôs different this week? ‚Äî Well, I am happy to announce that all the hard work I put in the last 3 years has finally paid off and I got promoted to the COO (Chief Operating Officer) position in the company I am working in (Smaller E-Commerce Company). I will post a separate article on this very‚Ä¶"
Weekly coding progress [Week 26],eekly coding progress [Week 26,"Another week another coding progress article! Sometimes I am pretty overwhelmed by the amount of stuff I still have to learn but then I have a look back and see how far I have come already. Try to appreciate the small steps too! Even the smallest steps will add up to something bigger by time! Now, let‚Äôs have a look at my tiny steps that I made this week."
