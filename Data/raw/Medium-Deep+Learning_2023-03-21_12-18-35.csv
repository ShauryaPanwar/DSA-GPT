blogTitle,blogSubheading,blogContent
An A-Z of useful Python tricks,n A-Z of useful Python trick,"Python is one of the world‚Äôs most popular, in-demand programming languages. This is for many reasons: I use Python daily as an integral part of my job as a data scientist. Along the way, I‚Äôve picked up a few useful tricks and tips. Here, I‚Äôve made an attempt at sharing some of them in an A-Z format. Most of these ‚Äòtricks‚Äô are things I‚Äôve used or stumbled upon during my day-to-day work. Some I found while browsing the  Python Standard Library docs . A few others I found searching through  PyPi . However, credit where it is due ‚Äî I discovered four or five of them over at  awesome-python.com . This is a curated list of hundreds of interesting Python tools and modules. It is worth browsing for inspiration! One of the many reasons why Python is such a popular language is because it is readable and expressive. It is often joked that Python is ‚Äò executable pseudocode ‚Äô. But when you can write code like this, it‚Äôs difficult to argue otherwise: You want to plot graphs in the console? You can have graphs in the console. Python has some great default datatypes, but sometimes they just won‚Äôt behave exactly how you‚Äôd like them to. Luckily, the Python Standard Library offers  the collections module . This handy add-on provides you with further datatypes. Ever wondered how you can look inside a Python object and see what attributes it has? Of course you have. From the command line: This can be a really useful feature when running Python interactively, and for dynamically exploring objects and modules you are working with. Read more  here . Yes,  really . Don‚Äôt pretend you‚Äôre not gonna try it out‚Ä¶ üëç One consequence of Python‚Äôs popularity is that there are always new versions under development. New versions mean new features‚Ää‚Äî‚Ääunless your version is out-of-date. Fear not, however. The  __future__ module  lets you import functionality from future versions of Python. It‚Äôs literally like time travel, or magic, or something. Why not have a go  importing curly braces ? Geography can be a challenging terrain for programmers to navigate (ha, a pun!). But  the geopy module  makes it unnervingly easy. It works by abstracting the APIs of a range of different geocoding services. It enables you to obtain a place‚Äôs full street address, latitude, longitude, and even altitude. There‚Äôs also a useful distance class. It calculates the distance between two locations in your favorite unit of measurement. Stuck on a coding problem and can‚Äôt remember that solution you saw before? Need to check StackOverflow, but don‚Äôt want to leave the terminal? Then you need  this useful command line tool . Ask it whatever question you have, and it‚Äôll do its best to return an answer. Be aware though ‚Äî it scrapes code from top answers from StackOverflow. It might not always give the most helpful information‚Ä¶ Python‚Äôs  inspect module  is great for understanding what is happening behind the scenes. You can even call its methods on itself! The code sample below uses  inspect.getsource()  to print its own source code. It also uses  inspect.getmodule()  to print the module in which it was defined. The last line of code prints out its own line number. Of course, beyond these trivial uses, the inspect module can prove useful for understanding what your code is doing. You could also use it for writing self-documenting code. The Jedi library is an autocompletion and code analysis library. It makes writing code quicker and more productive. Unless you‚Äôre developing your own IDE, you‚Äôll probably be most interested in  using Jedi as an editor plugin . Luckily, there are already loads available! You may already be using Jedi, however. The IPython project makes use of Jedi for its code autocompletion functionality. When learning any language, there are many milestones along the way. With Python, understanding the mysterious  **kwargs  syntax probably counts as one. The double-asterisk in front of a dictionary object lets you pass the contents of that dictionary as  named arguments to a function . The dictionary‚Äôs keys are the argument names, and the values are the values passed to the function. You don‚Äôt even need to call it  kwargs ! This is useful when you want to write functions that can handle named arguments not defined in advance. One of my favourite things about programming in Python are its  list comprehensions . These expressions make it easy to write very clean code that reads almost like natural language. You can read more about how to use them  here . Python supports functional programming through a number of inbuilt features. One of the most useful is the  map()  function ‚Äî especially in combination with  lambda functions . In the example above,  map()  applies a simple lambda function to each element in  x . It returns a map object, which can be converted to some iterable object such as a list or tuple. If you haven‚Äôt seen it already, then be prepared to have your mind blown by  Python‚Äôs newspaper module . It lets you retrieve news articles and associated meta-data from a range of leading international publications. You can retrieve images, text and author names. It even has some  inbuilt NLP functionality . So if you were thinking of using BeautifulSoup or some other DIY webscraping library for your next project, save yourself the time and effort and  $ pip install newspaper3k  instead. Python provides support for  operator overloading , which is one of those terms that make you sound like a legit computer scientist. It‚Äôs actually a simple concept. Ever wondered why Python lets you use the  +  operator to add numbers and also to concatenate strings? That‚Äôs operator overloading in action. You can define objects which use Python‚Äôs standard operator symbols in their own specific way. This lets you use them in contexts relevant to the objects you‚Äôre working with. Python‚Äôs default  print  function does its job. But try printing out any large, nested object, and the result is rather ugly. Here‚Äôs where the  Standard Library‚Äôs pretty-print module  steps in. This prints out complex structured objects in an easy-to-read format. A must-have for any Python developer who works with non-trivial data structures. Python supports multithreading, and this is facilitated by the Standard Library‚Äôs Queue module. This module lets you implement queue data structures. These are data structures that let you add and retrieve entries according to a specific rule. ‚ÄòFirst in, first out‚Äô (or FIFO) queues let you retrieve objects in the order they were added. ‚ÄòLast in, first out‚Äô (LIFO) queues let you access the most recently added objects first. Finally, priority queues let you retrieve objects according to the order in which they are sorted. Here‚Äôs an example of how to use queues  for multithreaded programming in Python. When defining a class or an object in Python, it is useful to provide an ‚Äòofficial‚Äô way of representing that object as a string. For example: This makes debugging code a lot easier. Add it to your class definitions as below: Python makes a great scripting language. Sometimes using the standard os and subprocess libraries can be a bit of a headache. The  sh library  provides a neat alternative. It lets you call any program as if it were an ordinary function ‚Äî useful for automating workflows and tasks, all from within Python. Python is a dynamically-typed language. You don‚Äôt need to specify datatypes when you define variables, functions, classes etc. This allows for rapid development times. However, there are few things more annoying than a runtime error caused by a simple typing issue. Since Python 3.5 , you have the option to provide type hints when defining functions. You can also define type aliases: Although not compulsory, type annotations can make your code easier to understand. They also allow you to use type checking tools to catch those stray TypeErrors before runtime. Probably worthwhile if you are working on large, complex projects! A quick and easy way to generate Universally Unique IDs (or ‚ÄòUUIDs‚Äô) is through the  Python Standard Library‚Äôs uuid module . This creates a randomized 128-bit number that will almost certainly be unique. In fact, there are over 2¬π¬≤¬≤ possible UUIDs that can be generated. That‚Äôs over five undecillion (or 5,000,000,000,000,000,000,000,000,000,000,000,000). The probability of finding duplicates in a given set is extremely low. Even with a trillion UUIDs, the probability of a duplicate existing is much, much less than one-in-a-billion. Pretty good for two lines of code. This is probably my favorite Python thing of all. Chances are you are working on multiple Python projects at any one time. Unfortunately, sometimes two projects will rely on different versions of the same dependency. Which do you install on your system? Luckily, Python‚Äôs  support for virtual environments  lets you have the best of both worlds. From the command line: Now you can have standalone versions and installations of Python running on the same machine. Sorted! Wikipedia has a great API that allows users programmatic access to an unrivalled body of completely free knowledge and information. The  wikipedia module  makes accessing this API almost embarrassingly convenient. Like the real site, the module provides support for multiple languages, page disambiguation, random page retrieval, and even has a  donate()  method. Humour is a key feature of the Python language ‚Äî after all, it is named after the British comedy sketch show  Monty Python‚Äôs Flying Circus . Much of Python‚Äôs official documentation references the show‚Äôs most famous sketches. The sense of humour isn‚Äôt restricted to the docs, though. Have a go running the line below: Never change, Python. Never change. YAML stands for ‚Äò YAML Ain‚Äôt Markup Language ‚Äô. It is a data formatting language, and is a superset of JSON. Unlike JSON, it can store more complex objects and refer to its own elements. You can also write comments, making it particularly suited to writing configuration files. The  PyYAML module  lets you use YAML with Python. Install with: And then import into your projects: PyYAML lets you store Python objects of any datatype, and instances of any user-defined classes also. One last trick for ya, and it really is a cool one. Ever needed to form a dictionary out of two lists? The  zip()  inbuilt function takes a number of iterable objects and returns a list of tuples. Each tuple groups the elements of the input objects by their positional index. You can also ‚Äòunzip‚Äô objects by calling  *zip()  on them. So there you have it, an A-Z of Python tricks ‚Äî hopefully you‚Äôve found something useful for your next project. Python‚Äôs a very diverse and well-developed language, so there‚Äôs bound to be many features I haven‚Äôt got round to including. Please share any of your own favorite Python tricks by leaving a response below!"
Learning Python: From Zero to Hero,earning Python: From Zero to Her,"This post was originally published at  TK's Blog . First of all, what is Python? According to its creator, Guido van Rossum, Python is a: ‚Äúhigh-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.‚Äù For me, the first reason to learn Python was that it is, in fact, a beautiful   programming language. It was really natural to code in it and express my thoughts. Another reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let‚Äôs learn a bit about it. You can think about variables as words that store a value. Simple as that. In Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called ‚Äúone.‚Äù Let‚Äôs do it: How simple was that? You just assigned the value 1 to the variable ‚Äúone.‚Äù And you can assign any other  value  to whatever other  variables  you want. As you see in the table above, the variable ‚Äú two ‚Äù stores the integer  2 , and ‚Äú some_number ‚Äù stores  10,000 . Besides integers, we can also use booleans (True / False), strings, float, and so many other data types. ‚Äú If ‚Äù uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the ‚Äúif‚Äù statement. For example: 2  is greater than  1 , so the ‚Äú print ‚Äù code is executed. The ‚Äú else ‚Äù statement will be executed if the ‚Äú if ‚Äù expression is  false . 1  is not greater than  2 , so the code inside the ‚Äú else ‚Äù statement will be executed. You can also use an ‚Äú elif ‚Äù statement: In Python, we can iterate in different forms. I‚Äôll talk about two:  while   and  for . While  Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from  1  to  10 . The  while  loop needs a ‚Äú loop condition. ‚Äù If it stays True, it continues iterating. In this example, when  num  is  11  the  loop condition  equals  False . Another basic bit of code to better understand it: The  loop condition  is  True  so it keeps iterating ‚Äî until we set it to  False . For Looping : you apply the variable ‚Äú num ‚Äù to the block, and the ‚Äú for ‚Äù statement will iterate it for you. This code will print the same as  while  code: from  1  to  10 . See? It is so simple. The range starts with  1  and goes until the  11 th element ( 10  is the  10 th element). Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 ‚Ä¶ Do I have another way to store all the integers that I want, but not in  millions of variables ? You guessed it ‚Äî there is indeed another way to store them. List  is a collection that can be used to store a list of values (like these integers that you want). So let‚Äôs use it: It is really simple. We created an array and stored it on  my_integer . But maybe you are asking: ‚ÄúHow can I get a value from this array?‚Äù Great question.  List  has a concept called  index . The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea. To make it clearer, we can represent the array and each element with its index. I can draw it: Using the Python syntax, it‚Äôs also simple to understand: Imagine that you don‚Äôt want to store integers. You just want to store strings, like a list of your relatives‚Äô names. Mine would look something like this: It works the same way as integers. Nice. We just learned how  Lists  indices work. But I still need to show you how we can add an element to the  List  data structure (an item to a list). The most common method to add a new value to a  List  is  append . Let‚Äôs see how it works: append  is super simple. You just need to apply the element (eg. ‚Äú The Effective Engineer ‚Äù) as the  append  parameter. Well, enough about  Lists .  Let‚Äôs talk about another data structure. Now we know that  Lists  are indexed with integer numbers. But what if we don‚Äôt want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices. Let‚Äôs learn about the  Dictionary  data structure.  Dictionary  is a collection of key-value pairs. Here‚Äôs what it looks like: The  key  is the index pointing to the   value . How do we access the  Dictionary   value ? You guessed it ‚Äî using the  key . Let‚Äôs try it: I created a  Dictionary  about me. My name, nickname, and nationality. Those attributes are the  Dictionary   keys . As we learned how to access the  List  using index, we also use indices ( keys  in the  Dictionary  context) to access the  value  stored in the  Dictionary . In the example, I printed a phrase about me using all the values stored in the  Dictionary . Pretty simple, right? Another cool thing about  Dictionary  is that we can use anything as the value. In the  Dictionary   I created, I want to add the  key  ‚Äúage‚Äù and my real integer age in it: Here we have a  key  (age)  value  (24) pair using string as the  key  and integer as the  value . As we did with  Lists , let‚Äôs learn how to add elements to a  Dictionary . The  key   pointing to a   value  is a big part of what  Dictionary  is. This is also true when we are talking about adding elements to it: We just need to assign a  value  to a  Dictionary   key . Nothing complicated here, right? As we learned in the  Python Basics , the  List  iteration is very simple. We  Python   developers commonly use  For  looping. Let‚Äôs do it: So for each book in the bookshelf, we ( can do everything with it ) print it. Pretty simple and intuitive. That‚Äôs Python. For a hash data structure, we can also use the  for  loop, but we apply the  key  : This is an example how to use it. For each  key  in the  dictionary  , we  print  the  key  and its corresponding  value . Another way to do it is to use the  iteritems  method. We did name the two parameters as  key  and  value , but it is not necessary. We can name them anything. Let‚Äôs see it: We can see we used attribute as a parameter for the  Dictionary   key , and it works properly. Great! Objects  are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics:  data  and  behavior . Cars have  data,  like number of wheels, number of doors, and seating capacity They also exhibit  behavior : they can accelerate, stop, show how much fuel is left, and so many other things. We identify  data  as  attributes  and  behavior  as  methods  in object-oriented programming. Again: Data ‚Üí Attributes and Behavior ‚Üí Methods And a  Class  is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components. Python, as an Object-Oriented programming language, has these concepts:  class  and  object . A class is a blueprint, a model for its objects. So again, a class it is just a model, or a way to define  attributes  and  behavior  (as we talked about in the theory section). As an example, a vehicle  class  has its own  attributes  that define what  objects  are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle. With this in mind, let‚Äôs look at Python syntax for  classes : We define classes with a  class statement ‚Äî  and that‚Äôs it. Easy, isn‚Äôt it? Objects  are instances of a  class . We create an instance by naming the class. Here  car  is an  object  (or instance) of the  class   Vehicle . Remember that our vehicle  class  has four  attributes : number of wheels, type of tank, seating capacity, and maximum velocity. We set all these  attributes  when creating a vehicle  object . So here, we define our  class  to receive data when it initiates it: We use the  init   method . We call it a constructor method. So when we create the vehicle  object , we can define these  attributes . Imagine that we love the  Tesla Model S,  and we want to create this kind of  object . It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let‚Äôs create this  object: Four wheels + electric ‚Äútank type‚Äù + five seats + 250km/hour maximum speed. All attributes are set. But how can we access these attributes‚Äô values? We  send a message to the object asking about them . We call it a  method . It‚Äôs the  object‚Äôs behavior . Let‚Äôs implement it: This is an implementation of two methods:  number_of_wheels  and  set_number_of_wheels . We call it  getter  &  setter . Because the first gets the attribute value, and the second sets a new value for the attribute. In Python, we can do that using  @property  ( decorators ) to define  getters  and  setters . Let‚Äôs see it with code: And we can use these methods as attributes: This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don‚Äôt apply two as a parameter, but set the value 2 to  number_of_wheels . This is one way to write  pythonic   getter  and  setter  code. But we can also use methods for other things, like the ‚Äú make_noise ‚Äù method. Let‚Äôs see it: When we call this method, it just returns a string  ‚Äú VRRRRUUUUM. ‚Äù Encapsulation is a mechanism that restricts direct access to objects‚Äô data and methods. But at the same time, it facilitates operation on that data (objects‚Äô methods). ‚ÄúEncapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an  object  is generally hidden from view outside of the object‚Äôs definition.‚Äù ‚Äî Wikipedia All internal representation of an object is hidden from the outside. Only the object can interact with its internal data. First, we need to understand how  public  and  non-public  instance variables and methods work. For a Python class, we can initialize a  public instance variable  within our constructor method. Let‚Äôs see this: Within the constructor method: Here we apply the  first_name  value as an argument to the  public instance variable . Within the class: Here, we do not need to apply the  first_name  as an argument, and all instance objects will have a  class attribute  initialized with  TK . Cool. We have now learned that we can use  public instance variables  and  class attributes . Another interesting thing about the  public  part is that we can manage the variable value. What do I mean by that? Our  object  can manage its variable value:  Get  and  Set  variable values. Keeping the  Person  class in mind, we want to set another value to its  first_name  variable: There we go. We just set another value ( kaio ) to the  first_name  instance variable and it updated the value. Simple as that. Since it‚Äôs a  public  variable, we can do that. We don‚Äôt use the term ‚Äúprivate‚Äù here, since no attribute is really private in Python (without a generally unnecessary amount of work). ‚Äî  PEP 8 As the  public instance variable  , we can define the  non-public instance variable  both within the constructor method or within the class. The syntax difference is: for  non-public instance variables  , use an underscore ( _ ) before the  variable  name. ‚Äú‚ÄòPrivate‚Äô instance variables that cannot be accessed except from inside an object don‚Äôt exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g.  _spam ) should be treated as a non-public part of the API (whether it is a function, a method or a data member)‚Äù ‚Äî  Python Software Foundation Here‚Äôs an example: Did you see the  email  variable? This is how we define a  non-public variable  : We can access and update it.  Non-public variables  are just a convention and should be treated as a non-public part of the API. So we use a method that allows us to do it inside our class definition. Let‚Äôs implement two methods ( email  and  update_email ) to understand it: Now we can update and access  non-public variables  using those methods. Let‚Äôs see: With  public methods , we can also use them out of our class: Let‚Äôs test it: Great ‚Äî we can use it without any problem. But with  non-public methods  we aren‚Äôt able to do it. Let‚Äôs implement the same  Person  class, but now with a  show_age   non-public method  using an underscore ( _ ). And now, we‚Äôll try to call this  non-public method  with our object: We can access and update it.  Non-public methods  are just a convention and should be treated as a non-public part of the API. Here‚Äôs an example for how we can use it: Here we have a  _get_age   non-public method  and a  show_age   public method . The  show_age  can be used by our object (out of our class) and the  _get_age  only used inside our class definition (inside  show_age  method). But again: as a matter of convention. With encapsulation we can ensure that the internal representation of the object is hidden from the outside. Certain objects have some things in common: their behavior and characteristics. For example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors. In object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class. Let‚Äôs see another example and implement it in Python. Imagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car. We can say that an   ElectricCar  class inherits these same attributes from the regular  Car  class. Our  Car  class implemented: Once initiated, we can use all  instance variables  created. Nice. In Python, we apply a  parent class  to the  child class  as a parameter. An  ElectricCar  class can inherit from our  Car  class. Simple as that. We don‚Äôt need to implement any other method, because this class already has it (inherited from  Car  class). Let‚Äôs prove it: Beautiful. We learned a lot of things about Python basics: Congrats! You completed this dense piece of content about Python. If you want a complete Python course, learn more real-world coding skills and build projects, try  One Month Python Bootcamp . See you there ‚ò∫ For more stories and posts about my journey learning & mastering programming, follow my publication  The Renaissance Developer . Have fun, keep learning, and always keep coding. I hope you liked this content. Support my work on Ko-Fi My  Twitter  &  Github . ‚ò∫"
Why Python is not the programming language of the future,hy Python is not the programming language of the futur,"It  took the programming community a couple of decades to appreciate Python. But since the early 2010‚Äôs, it has been booming ‚Äî and eventually surpassing C, C#, Java and JavaScript in popularity. But until when will that trend continue? When will Python eventually be replaced by other languages, and why? Putting an exact expiry date on Python would be so much speculation, it might as well pass as Science-Fiction. Instead, I will assess the virtues that are boosting Python‚Äôs popularity right now, and the weak points that will break it in the future. Python‚Äôs success is reflected in the  Stack Overflow trends , which measure the count of tags in posts on the platform. Given the size of StackOverflow, this is quite a good indicator for language popularity. While R has been plateauing over the last few years, and many other languages are on a steady decline, Python‚Äôs growth seems unstoppable. Almost 14% of all StackOverflow questions are tagged ‚Äúpython‚Äù, and the trend is going up. And there are several reasons for that. Python has been around since the nineties. That doesn‚Äôt only mean that it has had plenty of time to grow. It has also acquired a large and supportive community. So if you have any issue while you‚Äôre coding in Python, the odds are high that you‚Äôll be able to solve it with a single Google search. Simply because somebody will have already encountered your problem and written something helpful about it. It‚Äôs not only the fact that it has been around for decades, giving programmers the time to make brilliant tutorials. More than that, the syntax of Python is very human-readable. For a start, there‚Äôs no need to specify the data type. You just declare a variable; Python will understand from the context whether it‚Äôs an integer, a float value, a boolean or something else. This is a huge edge for beginners. If you‚Äôve ever had to program in C++, you know how frustrating it is your program won‚Äôt compile because you swapped a float for an integer. And if you‚Äôve ever had to read Python and C++ code side-by-side, you‚Äôll know how understandable Python is. Even though C++ was designed with English in mind, it‚Äôs a rather bumpy read compared to Python code. medium.com Since Python has been around for so long, developers have made a package for every purpose. These days, you can find a package for almost everything. Want to crunch numbers, vectors and matrices?  NumPy  is your guy.  Want to do calculations for tech and engineering? Use  SciPy .  Want to go big in data manipulation and analysis? Give  Pandas  a go. Want to start out with Artificial Intelligence? Why not use  Scikit-Learn . Whichever computational task you‚Äôre trying to manage, chances are that there is a Python package for it out there. This makes Python stay on top of recent developments, can be seen from the surge in Machine Learning over the past few years. Based on the previous elaborations, you could imagine that Python will stay on top of sh*t for ages to come. But like every technology, Python has its weaknesses. I will go through the most important flaws, one by one, and assess whether these are fatal or not. Python is slow. Like, really slow. On average, you‚Äôll need about 2‚Äì10 times longer to complete a task with Python than with any other language. There are  various reasons  for that. One of them is that it‚Äôs dynamically typed ‚Äî remember that you don‚Äôt need to specify data types like in other languages. This means that a lot of memory needs to be used, because the program needs to reserve enough space for each variable that it works in any case. And lots of memory usage translates to lots of computing time. Another reason is that Python can only execute one task at a time. This is a consequence of flexible datatypes ‚Äî Python needs to make sure each variable has only one datatype, and parallel processes could mess that up. In comparison, your average web browser can run a dozen different threads at once. And there are some other theories around, too. But at the end of the day, none of the speed issues matter. Computers and servers have gotten so cheap that we‚Äôre talking about fractions of seconds. And the end user doesn‚Äôt really care whether their app loads in 0.001 or 0.01 seconds. medium.com Originally, Python was  dynamically scoped . This basically means that, to evaluate an expression, a compiler first searches the current block and then successively all the calling functions. The problem with dynamic scoping is that every expression needs to be tested in every possible context ‚Äî which is tedious. That‚Äôs why most modern programming languages use static scoping. Python tried to transition to static scoping, but  messed it up . Usually, inner scopes ‚Äî for example functions within functions ‚Äî would be able to see  and  change outer scopes. In Python, inner scopes can only see outer scopes, but not change them. This leads to a lot of confusion. Despite all of the flexibility within Python, the usage of Lambdas is rather restrictive. Lambdas can only be expressions in Python, and not be statements. On the other hand, variable declarations and statements are always statements. This means that Lambdas cannot be used for them. This distinction between expressions and statements is rather arbitrary, and doesn‚Äôt occur in other languages. In Python, you use whitespaces and indentations to indicate different levels of code. This makes it optically appealing and intuitive to understand. Other languages, for example C++, rely more on braces and semicolons. While this might not be visually appealing and beginner-friendly, it makes the code a lot more maintainable. For bigger projects, this is a lot more useful. Newer languages like Haskell solve this problem: They rely on whitespaces, but offer an alternative syntax for those who wish to go without. As we‚Äôre witnessing the shift from desktop to smartphone, it‚Äôs clear that we need robust languages to build mobile software. But not many mobile apps are being developed with Python. That doesn‚Äôt mean that it can‚Äôt be done ‚Äî there is a Python package called Kivy for this purpose. But Python wasn‚Äôt made with mobile in mind. So even though it might produce passable results for basic tasks, your best bet is to use a language that was created for mobile app development. Some widely used programming frameworks for mobile include React Native, Flutter, Iconic, and Cordova. To be clear, laptops and desktop computers should be around for many years to come. But since mobile has long surpassed desktop traffic, it‚Äôs safe to say that learning Python is not enough to become a seasoned all-round developer. A Python script isn‚Äôt compiled first and then executed. Instead, it compiles every time you execute it, so any coding error manifests itself at runtime. This leads to poor performance, time consumption, and the need for a lot of tests. Like,  a lot  of tests. This is great for beginners since testing teaches them a lot. But for seasoned developers, having to debug a complex program in Python makes them go awry. This lack of performance is the biggest factor that sets a timestamp on Python. towardsdatascience.com There are a few new competitors on the market of programming languages: While there are other languages on the market, Rust, Go, and Julia are the ones that fix weak patches of Python. All of these languages excel in yet-to-come technologies, most notably in Artificial Intelligence. While their market share is still small, as reflected in the number of StackOverflow tags, the trend for all of them is clear: upwards. Given the ubiquitous popularity of Python at the moment, it will surely take half a decade, maybe even a whole, for any of these new languages to replace it. Which of the languages it will be ‚Äî Rust, Go, Julia, or a new language of the future ‚Äî is hard to say at this point. But given the performance issues that are fundamental in the architecture of Python, one will inevitably take its spot."
What exactly can you do with Python? Here are Python‚Äôs 3 main applications.,hat exactly can you do with Python? Here are Python‚Äôs 3 main applications,"If you‚Äôre thinking of learning Python ‚Äî or if you recently started learning it ‚Äî you may be asking yourself: ‚ÄúWhat exactly can I use Python for?‚Äù Well that‚Äôs a tricky question to answer, because there are so many applications for Python. But over time, I have observed that there are 3 main popular applications for Python: Let‚Äôs talk about each of them in turn. Web frameworks that are based on Python like  Django  and  Flask  have recently become very popular for web development. These web frameworks help you create server-side code (backend code) in Python. That‚Äôs the code that runs on your server, as opposed to on users‚Äô devices and browsers (front-end code). If you‚Äôre not familiar with the difference between backend code and front-end code, please see my footnote below. That‚Äôs because a web framework makes it easier to build common backend logic. This includes mapping different URLs to chunks of Python code, dealing with databases, and generating HTML files users see on their browsers. Django and Flask are two of the most popular Python web frameworks. I‚Äôd recommend using one of them if you‚Äôre just getting started. There‚Äôs an  excellent article  about this topic by Gareth Dwyer, so let me quote it here: <begin quote> Main contrasts: You should probably choose: </end quote> In other words, If you‚Äôre a beginner, Flask is probably a better choice because it has fewer components to deal with. Also, Flask is a better choice if you want more customization. On the other hand, if you‚Äôre looking to build something straight-forward, Django will probably let you get there faster. Now, if you‚Äôre looking to learn Django, I recommend the book called Django for Beginners. You can find it  here . You can also find the free sample chapters of that book  here . Okay, let‚Äôs go to the next topic! I think the best way to explain what machine learning is would be to give you a simple example. Let‚Äôs say you want to develop a program that automatically detects what‚Äôs in a picture. So, given this picture below (Picture 1), you want your program to recognize that it‚Äôs a dog. Given this other one below (Picture 2), you want your program to recognize that it‚Äôs a table. You might say, well, I can just write some code to do that. For example, maybe if there are a lot of light brown pixels in the picture, then we can say that it‚Äôs a dog. Or maybe, you can figure out how to detect edges in a picture. Then, you might say, if there are many straight edges, then it‚Äôs a table. However, this kind of approach gets tricky pretty quickly. What if there‚Äôs a white dog in the picture with no brown hair? What if the picture shows only the round parts of the table? This is where machine learning comes in. Machine learning typically implements an algorithm that automatically detects a pattern in the given input. You can give, say, 1,000 pictures of a dog and 1,000 pictures of a table to a machine learning algorithm. Then, it will learn the difference between a dog and a table. When you give it a new picture of either a dog or a table, it will be able to recognize which one it is. I think this is somewhat similar to how a baby learns new things. How does a baby learn that one thing looks like a dog and another a table? Probably from a bunch of examples. You probably don‚Äôt explicitly tell a baby, ‚ÄúIf something is furry and has light brown hair, then it‚Äôs probably a dog.‚Äù You would probably just say, ‚ÄúThat‚Äôs a dog. This is also a dog. And this one is a table. That one is also a table.‚Äù Machine learning algorithms work much the same way. You can apply the same idea to: among other applications. Popular machine learning algorithms you might have heard about include: You can use any of the above algorithms to solve the picture-labeling problem I explained earlier. There are popular machine learning libraries and frameworks for Python. Two of the most popular ones are  scikit-learn  and  TensorFlow . If you‚Äôre just getting started with a machine learning project, I would recommend that you first start with scikit-learn. If you start running into efficiency issues, then I would start looking into TensorFlow. To learn machine learning fundamentals, I would recommend either  Stanford‚Äôs  or  Caltech‚Äôs  machine learning course. Please note that you need basic knowledge of calculus and linear algebra to understand some of the materials in those courses. Then, I would practice what you‚Äôve learned from one of those courses with  Kaggle . It‚Äôs a website where people compete to build the best machine learning algorithm for a given problem. They have nice tutorials for beginners, too. To help you understand what these might look like, let me give you a simple example here. Let‚Äôs say you‚Äôre working for a company that sells some products online. Then, as a data analyst, you might draw a bar graph like this. From this graph, we can tell that men bought over 400 units of this product and women bought about 350 units of this product this particular Sunday. As a data analyst, you might come up with a few possible explanations for this difference. One obvious possible explanation is that this product is more popular with men than with women. Another possible explanation might be that the sample size is too small and this difference was caused just by chance. And yet another possible explanation might be that men tend to buy this product more only on Sunday for some reason. To understand which of these explanations is correct, you might draw another graph like this one. Instead of showing the data for Sunday only, we‚Äôre looking at the data for a full week. As you can see, from this graph, we can see that this difference is pretty consistent over different days. From this little analysis, you might conclude that the most convincing explanation for this difference is that this product is simply more popular with men than with women. On the other hand, what if you see a graph like this one instead? Then, what explains the difference on Sunday? You might say, perhaps men tend to buy more of this product only on Sunday for some reason. Or, perhaps it was just a coincidence that men bought more of it on Sunday. So, this is a simplified example of what data analysis might look like in the real world. The data analysis work I did when I was working at Google and Microsoft was very similar to this example ‚Äî only more complex. I actually used Python at Google for this kind of analysis, while I used JavaScript at Microsoft. I used SQL at both of those companies to pull data from our databases. Then, I would use either Python and Matplotlib (at Google) or JavaScript and D3.js (at Microsoft) to visualize and analyze this data. One of the most popular libraries for data visualization is  Matplotlib . It‚Äôs a good library to get started with because: How should I learn data analysis / visualization with Python? You should first learn the fundamentals of data analysis and visualization. When I looked for good resources for this online, I couldn‚Äôt find any. So, I ended up making a YouTube video on this topic: I also ended up making a  full course on this topic on Pluralsight , which you can take for free by signing up to their 10-day free trial. I‚Äôd recommend both of them. After learning the fundamentals of data analysis and visualization, learning fundamentals of statistics from websites like Coursera and Khan Academy will be helpful, as well. Scripting usually refers to writing small programs that are designed to automate simple tasks. So, let me give you an example from my personal experience here. I used to work at a small startup in Japan where we had an email support system. It was a system for us to respond to questions customers sent us via email. When I was working there, I had the task of counting the numbers of emails containing certain keywords so we could analyze the emails we received. We could have done it manually, but instead, I wrote a simple program / simple script to automate this task. Actually, we used Ruby for this back then, but Python is also a good language for this kind of task. Python is suited for this type of task mainly because it has relatively simple syntax and is easy to write. It‚Äôs also quick to write something small with it and test it. I‚Äôm not an expert on embedded applications, but I know that Python works with Rasberry Pi. It seems like a popular application among hardware hobbyists. You could use the library called PyGame to develop games, but it‚Äôs not the most popular gaming engine out there. You could use it to build a hobby project, but I personally wouldn‚Äôt choose it if you‚Äôre serious about game development. Rather, I would recommend getting started with Unity with C#, which is one of the most popular gaming engines. It allows you to build a game for many platforms, including Mac, Windows, iOS, and Android. You could make one with Python using Tkinter, but it doesn‚Äôt seem like the most popular choice either. Instead, it seems like languages like  Java, C#, and C++  are more popular for this. Recently, some companies have started using JavaScript to create Desktop applications, too. For example, Slack‚Äôs desktop app was built with something called Electron . It allows you to build desktop applications with JavaScript. Personally, if I was building a desktop application, I would go with a JavaScript option. It allows you to reuse some of the code from a web version if you have it. However, I‚Äôm not an expert on desktop applications either, so please let me know in a comment if you disagree or agree with me on this. I would recommend Python 3 since it‚Äôs more modern and it‚Äôs a more popular option at this point. Let‚Äôs say you want to make something like Instagram. Then, you‚Äôd need to create front-end code for each type of device you want to support. You might use, for example: Each set of code will run on each type of device / browser. This will be the set of code that determines what the layout of the app will be like, what the buttons should look like when you click them, etc. However, you will still need the ability to store users‚Äô info and photos. You will want to store them on your server and not just on your users‚Äô devices so each user‚Äôs followers can view his/her photos. This is where the backend code / server-side code comes in. You‚Äôll need to write some backend code to do things like: So, this is the difference between backend code and front-end code. By the way, Python is not the only good choice for writing backend / server-side code. There are many other popular choices, including Node.js, which is based on JavaScript. I have a programming education YouTube channel called  CS Dojo  with 440,000+ subscribers, where I produce more content like this article. For example, you might like these videos:"
How to build your own Neural Network from scratch in Python,ow to build your own Neural Network from scratch in Pytho,"Update : When I wrote this article a year ago, I did not expect it to be  this  popular. Since then, this article has been viewed more than 450,000 times, with more than 30,000 claps. It has also made it to the front page of Google, and it is among the first few search results for ‚Äò Neural Network ‚Äô. Many of you have reached out to me, and I am deeply humbled by the impact of this article on your learning journey. This article also caught the eye of the editors at Packt Publishing. Shortly after this article was published, I was offered to be the sole author of the book  Neural Network Projects with Python .  Today, I am happy to share with you that my book has been published! The book is a continuation of this article, and it covers end-to-end implementation of neural network projects in areas such as face recognition, sentiment analysis, noise removal etc. Every chapter features a unique neural network architecture, including Convolutional Neural Networks, Long Short-Term Memory Nets and Siamese Neural Networks. If you‚Äôre looking to create a strong machine learning portfolio with deep learning projects, do consider getting the book! You can get the book from Amazon:  Neural Network Projects with Python Motivation:  As part of my personal journey to gain a better understanding of Deep Learning, I‚Äôve decided to build a Neural Network from scratch without a deep learning library like TensorFlow. I believe that understanding the inner workings of a Neural Network is important to any aspiring Data Scientist. This article contains what I‚Äôve learned, and hopefully it‚Äôll be useful for you as well! Most introductory texts to Neural Networks brings up brain analogies when describing them. Without delving into brain analogies, I find it easier to simply describe Neural Networks as a mathematical function that maps a given input to a desired output. Neural Networks consist of the following components The diagram below shows the architecture of a 2-layer Neural Network ( note that the input layer is typically excluded when counting the number of layers in a Neural Network ) Creating a Neural Network class in Python is easy. Training the Neural Network The output  ≈∑  of a simple 2-layer Neural Network is: You might notice that in the equation above, the weights  W  and the biases  b  are the only variables that affects the output  ≈∑. Naturally, the right values for the weights and biases determines the strength of the predictions. The process of fine-tuning the weights and biases from the input data is known as  training the Neural Network. Each iteration of the training process consists of the following steps: The sequential graph below illustrates the process. As we‚Äôve seen in the sequential graph above, feedforward is just simple calculus and for a basic 2-layer neural network, the output of the Neural Network is: Let‚Äôs add a feedforward function in our python code to do exactly that. Note that for simplicity, we have assumed the biases to be 0. However, we still need a way to evaluate the ‚Äúgoodness‚Äù of our predictions (i.e. how far off are our predictions)? The  Loss Function  allows us to do exactly that. There are many available loss functions, and the nature of our problem should dictate our choice of loss function. In this tutorial, we‚Äôll use a simple  sum-of-sqaures error  as our loss function. That is, the sum-of-squares error is simply the sum of the difference between each predicted value and the actual value. The difference is squared so that we measure the absolute value of the difference. Our goal in training is to find the best set of weights and biases that minimizes the loss function. Now that we‚Äôve measured the error of our prediction (loss), we need to find a way to  propagate  the error back, and to update our weights and biases. In order to know the appropriate amount to adjust the weights and biases by, we need to know the  derivative of the loss function with respect to the weights and biases . Recall from calculus that the derivative of a function is simply the slope of the function. If we have the derivative, we can simply update the weights and biases by increasing/reducing with it(refer to the diagram above). This is known as  gradient descent . However, we can‚Äôt directly calculate the derivative of the loss function with respect to the weights and biases because the equation of the loss function does not contain the weights and biases. Therefore, we need the  chain rule  to help us calculate it. Phew! That was ugly but it allows us to get what we needed ‚Äî the derivative (slope) of the loss function with respect to the weights, so that we can adjust the weights accordingly. Now that we have that, let‚Äôs add the backpropagation function into our python code. For a deeper understanding of the application of calculus and the chain rule in backpropagation, I strongly recommend this tutorial by 3Blue1Brown. Now that we have our complete python code for doing feedforward and backpropagation, let‚Äôs apply our Neural Network on an example and see how well it does. Our Neural Network should learn the ideal set of weights to represent this function. Note that it isn‚Äôt exactly trivial for us to work out the weights just by inspection alone. Let‚Äôs train the Neural Network for 1500 iterations and see what happens. Looking at the loss per iteration graph below, we can clearly see the loss  monotonically decreasing towards a minimum.  This is consistent with the gradient descent algorithm that we‚Äôve discussed earlier. Let‚Äôs look at the final prediction (output) from the Neural Network after 1500 iterations. We did it! Our feedforward and backpropagation algorithm trained the Neural Network successfully and the predictions converged on the true values. Note that there‚Äôs a slight difference between the predictions and the actual values. This is desirable, as it prevents  overfitting  and allows the Neural Network to  generalize  better to unseen data. Fortunately for us, our journey isn‚Äôt over. There‚Äôs still  much  to learn about Neural Networks and Deep Learning. For example: I‚Äôll be writing more on these topics soon, so do follow me on Medium and keep and eye out for them! I‚Äôve certainly learnt a lot writing my own Neural Network from scratch. Although Deep Learning libraries such as TensorFlow and Keras makes it easy to build deep nets without fully understanding the inner workings of a Neural Network, I find that it‚Äôs beneficial for aspiring data scientist to gain a deeper understanding of Neural Networks. This exercise has been a great investment of my time, and I hope that it‚Äôll be useful for you as well!"
Building a Simple Chatbot from Scratch in Python (using NLTK),uilding a Simple Chatbot from Scratch in Python (using NLTK,"I am sure you‚Äôve heard about  Duolingo : a popular language-learning app, which gamifies practicing a new language. It is pretty popular due to its innovative styles of teaching a foreign language. The concept is simple: five to ten minutes of interactive training a day is enough to learn a language."
The Next Level of Data Visualization in Python,he Next Level of Data Visualization in Pytho,"The sunk-cost fallacy is one of many  harmful cognitive biases  to which humans fall prey. It  refers to our tendency  to continue to devote time and resources to a lost cause because we have already spent ‚Äî sunk ‚Äî so much time in the pursuit. The sunk-cost fallacy applies to staying in bad jobs longer than we should, slaving away at a project even when it‚Äôs clear it won‚Äôt work, and yes, continuing to use a tedious, outdated plotting library ‚Äî matplotlib ‚Äî when more efficient, interactive, and better-looking alternatives exist. Over the past few months, I‚Äôve realized the only reason I use  matplotlib  is the hundreds of hours I‚Äôve sunk into learning the  convoluted syntax . This complication leads to hours of frustration on StackOverflow figuring out how to  format dates  or  add a second y-axis . Fortunately, this is a great time for Python plotting, and after exploring  the options , a clear winner ‚Äî in terms of ease-of-use, documentation, and functionality ‚Äî is the  plotly Python library.  In this article, we‚Äôll dive right into  plotly , learning how to make better plots in less time ‚Äî often with one line of code. All of the code for this article is  available on GitHub . The charts are all interactive and can be viewed on  NBViewer here . The  plotly   Python package is an open-source library built on  plotly.js  which  in turn is built on  d3.js .  We‚Äôll be using a wrapper on plotly called  cufflinks  designed to work with Pandas dataframes. So, our entire stack is cufflinks > plotly > plotly.js > d3.js which means we get the efficiency of coding in Python with the incredible  interactive graphics capabilities of d3. ( Plotly itself  is a graphics company with several products and open-source tools. The Python library is free to use, and we can make unlimited charts in offline mode plus up to 25 charts in online mode to  share with the world .) All the work in this article was done in a Jupyter Notebook with plotly + cufflinks running in offline mode. After installing plotly and cufflinks with  pip install cufflinks plotly  import the following to run in Jupyter: Single variable ‚Äî univariate ‚Äî plots are a standard way to start an analysis and the histogram is a go-to plot ( although it has some issues ) for graphing a distribution. Here, using my Medium article statistics (you can see  how to get your own stats here  or use  mine here ) let‚Äôs make an interactive histogram of the number of claps for articles (  df  is a standard Pandas dataframe): For those used to  matplotlib , all we have to do is add one more letter (  iplot  instead of  plot ) and we get a much better-looking and interactive chart! We can click on the data to get more details, zoom into sections of the plot, and as we‚Äôll see later, select different categories to highlight. If we want to plot overlaid histograms, that‚Äôs just as simple: With a little bit of  pandas  manipulation, we can do a barplot: s we saw, we can combine the  power of pandas  with plotly + cufflinks. For a boxplot of the fans per story by publication, we use a  pivot  and then plot: The benefits of interactivity are that we can explore and subset the data as we like. There‚Äôs a lot of information in a boxplot, and without the ability to see the numbers, we‚Äôll miss most of it! The scatterplot is the heart of most analyses. It allows us to see the evolution of a variable over time or the relationship between two (or more) variables. A considerable portion of real-world data has a time element. Luckily, plotly + cufflinks was designed with time-series visualizations in mind. Let‚Äôs make a dataframe of my TDS articles and look at how the trends have changed. Here we are doing quite a few different things all in one line: For more information, we can also add in text annotations quite easily: For a two-variable scatter plot colored by a third categorical variable we use: Let‚Äôs get a little more sophisticated by using a log axis ‚Äî specified as a plotly layout ‚Äî (see the  Plotly documentation  for the layout specifics) and sizing the bubbles by a numeric variable: With a little more work ( see notebook for details ), we can even put four variables ( this is not advised ) on one graph! As before, we can combine pandas with plotly+cufflinks for useful plots See the notebook  or the documentation  for more examples of added functionality. We can add in text annotations, reference lines, and best-fit lines to our plots with a single line of code, and still with all the interaction. Now we‚Äôll get into a few plots that you probably won‚Äôt use all that often, but which can be quite impressive. We‚Äôll use the  plotly  figure_factory , to keep even these incredible plots to one line. When we want to explore relationships among many variables, a  scattermatrix  (also called a splom) is a great option: Even this plot is completely interactive allowing us to explore the data. To visualize the correlations between numeric variables, we calculate the correlations and then make an annotated heatmap: The list of plots goes on and on. Cufflinks also has several themes we can use to get completely different styling with no effort. For example, below we have a ratio plot in the ‚Äúspace‚Äù theme and a spread plot in ‚Äúggplot‚Äù: We also get 3D plots (surface and bubble): For those  who are so inclined , you can even make a pie chart: When you make these plots in the notebook, you‚Äôll notice a small link on the lower right-hand side on the graph that says ‚ÄúExport to plot.ly‚Äù. If you click that link, you are then taken to the  chart studio  where you can touch up your plot for a final presentation. You can add annotations, specify the colors, and generally clean everything up for a great figure. Then, you can publish your figure online so anyone can find it with the link. Below are two charts I touched up in Chart Studio: With everything mentioned here, we are still not exploring the full capabilities of the library! I‚Äôd encourage you to check out both the plotly and the cufflinks documentation for more incredible graphics. The worst part about the sunk cost fallacy is you only realize how much time you‚Äôve wasted after you‚Äôve quit the endeavor. Fortunately, now that I‚Äôve made the mistake of sticking with  matploblib  for too long, you don‚Äôt have to! When thinking about plotting libraries, there are a few things we want: As of right now, the best option for doing all of these in  Python is plotly . Plotly allows us to make visualizations quickly and helps us get better insight into our data through interactivity. Also, let‚Äôs admit it, plotting should be one of the most enjoyable parts of data science! With other libraries, plotting turned into a tedious task, but with plotly, there is again joy in making a great figure! Now that it‚Äôs 2019, it is time to upgrade your Python plotting library for better efficiency, functionality, and aesthetics in your data science visualizations. As always, I welcome feedback and constructive criticism. I can be reached on Twitter  @koehrsen_will."
Bye-bye Python. Hello Julia!,ye-bye Python. Hello Julia,"D on‚Äôt get me wrong. Python‚Äôs popularity is still backed by a rock-solid community of computer scientists, data scientists and AI specialists. But if you‚Äôve ever been at a dinner table with these people, you also know how much they rant about the weaknesses of Python. From being slow to requiring excessive testing, to producing runtime errors despite prior testing ‚Äî there‚Äôs enough to be pissed off about. Which is why more and more programmers are adopting other languages ‚Äî the top players being Julia, Go, and Rust. Julia is great for mathematical and technical tasks, while Go is awesome for modular programs, and Rust is the top choice for systems programming. Since data scientists and AI specialists deal with lots of mathematical problems, Julia is the winner for them. And even upon critical scrutiny, Julia has upsides that Python can‚Äôt beat. towardsdatascience.com When people create a new programming language, they do so because they want to keep the good features of old languages and fix the bad ones. In this sense, Guido van Rossum created Python in the late 1980s to improve ABC. The latter was  too perfect  for a programming language ‚Äî while its rigidity made it easy to teach, it was hard to use in real life. In contrast, Python is quite pragmatic. You can see this in the  Zen of Python , which reflects the intention that the creators have: Python still kept the good features of ABC: Readability, simplicity, and beginner-friendliness for example. But Python is far more robust and adapted to real life than ABC ever was. In the same sense, the creators of Julia want to keep the good parts of other languages and ditch the bad ones. But Julia is a lot more ambitious: instead of replacing one language, it wants to beat them all. This is how  Julia‚Äôs creators  say it: Julia wants to blend all upsides that currently exist, and not trade them off for the downsides in other languages. And even though Julia is a young language, it has already achieved a lot of the goals that the creators set. Julia can be used for everything from simple machine learning applications to enormous supercomputer simulations. To some extent, Python can do this, too ‚Äî but Python somehow grew into the job. In contrast,  Julia was built  precisely for this stuff. From the bottom up. Julia‚Äôs creators wanted to make a language that is as fast as C ‚Äî but what they created is  even faster . Even though Python has become easier to speed up in recent years, its performance is still a far cry from what Julia can do. In 2017, Julia even joined the  Petaflop Club  ‚Äî the small club of languages who can exceed speeds of one petaflop per second at peak performance. Apart from Julia, only C, C++ and Fortran are  in the club  right now. towardsdatascience.com With its more than 30 years of age, Python has an enormous and supportive community. There is hardly a Python-related question that you can‚Äôt get answered within one Google search. In contrast, the Julia community is pretty tiny. While this means that you might need to dig a bit further to find an answer, you might link up with the same people again and again. And this can turn into programmer-relationships that are beyond value. You don‚Äôt even need to know a single Julia-command to code in Julia. Not only can you use Python and C code within Julia. You can even use  Julia within Python ! Needless to say, this makes it extremely easy to patch up the weaknesses of your Python code. Or to stay productive while you‚Äôre still getting to know Julia. This is one of the strongest points of Python ‚Äî its zillion well-maintained libraries. Julia doesn‚Äôt have many libraries, and users have complained that they‚Äôre not amazingly maintained (yet). But when you consider that Julia is a very young language with a limited amount of resources, the number of libraries that they already have is pretty impressive. Apart from the fact that Julia‚Äôs amount of libraries is growing, it can also interface with libraries from C and Fortran to handle plots, for example. Python is 100% dynamically typed. This means that the program decides at runtime whether a variable is a float or an integer, for example. While this is extremely beginner-friendly, it also introduces a whole host of possible bugs. This means that you need to test Python code in all possible scenarios ‚Äî which is quite a dumb task that takes a lot of time. Since the Julia-creators also wanted it to be easy to learn, Julia fully supports dynamical typing. But in contrast to Python, you can introduce static types if you like ‚Äî in the way they are present in C or Fortran, for example. This can save you a ton of time: Instead of finding  excuses for not testing  your code, you can specify the type wherever it makes sense. towardsdatascience.com While all these things sound pretty great, it‚Äôs important to keep in mind that Julia is still tiny compared to Python. One pretty good metric is the number of questions on StackOverflow: At this point in time, Python is tagged about twenty more often than Julia! This doesn‚Äôt mean that Julia is unpopular ‚Äî rather, it‚Äôs naturally taking some time to get adopted by programmers. Think about it ‚Äî would you really want to write your whole code in a different language? No, you‚Äôd rather try a new language in some future project. This creates a time lag that every programming language faces between its release and its adoption. But if you adopt it now ‚Äî which is easy because Julia allows an enormous amount of language conversion ‚Äî you‚Äôre investing in the future. As more and more people adopt Julia, you‚Äôll already have gained enough experience to answer their questions. Also, your code will be more durable as more and more Python code is replaced by Julia. Forty years ago, artificial intelligence was nothing but a niche phenomenon. The industry and investors didn‚Äôt believe in it, and many technologies were clunky and hard to use. But those who learned it back then are the giants of today ‚Äî those that are so high in demand that  their salary  matches that of an NFL player. Similarly, Julia is still very niche now. But when it grows, the big winners will be those who adopted it early. I‚Äôm not saying that you‚Äôre guaranteed to make a shitload of money in ten years if you adopt Julia now. But you‚Äôre increasing your chances. Think about it: Most programmers out there have Python on their CV. And in the next few years, we‚Äôll see even more Python programmers on the job market. But if the demand of enterprises for Python slows, the perspectives for Python programmers are going to go down. Slowly at first, but inevitably. On the other hand, you have a real edge if you can put Julia on your CV. Because let‚Äôs be honest, what distinguishes you from any other Pythonista out there? Not much. But there won‚Äôt be that many Julia-programmers out there, even in three years‚Äô time. With Julia-skills, not only are you showing that you have interests beyond the job requirements. You‚Äôre also demonstrating that you‚Äôre eager to learn and that you have a broader sense of what it means to be a programmer. In other words, you‚Äôre fit for the job. You ‚Äî and the other Julia programmers ‚Äî are future rockstars, and you know it. Or, as  Julia‚Äôs creators  said it in 2012: Python is still insanely popular. But if you learn Julia now, that could be your golden ticket later on. In this sense: Bye-bye Python. Hello Julia! Edit: I‚Äôve given a talk on Julia vs. Python! It was hosted by  Hatchpad , and the video is  here ."
Turn Python Scripts into Beautiful ML Tools,urn Python Scripts into Beautiful ML Tool,"In my experience, every nontrivial machine learning project is eventually stitched together with bug-ridden and unmaintainable internal tools. These tools ‚Äî often a patchwork of Jupyter Notebooks and Flask apps ‚Äî are difficult to deploy, require reasoning about client-server architecture, and don‚Äôt integrate well with machine learning constructs like Tensorflow GPU sessions. I saw this first at Carnegie Mellon, then at Berkeley, Google X, and finally while building autonomous robots at Zoox. These tools were often born as little Jupyter notebooks: the sensor calibration tool, the simulation comparison app, the LIDAR alignment app, the scenario replay tool, and so on. As a tool grew in importance, project managers stepped in. Processes sprouted. Requirements flowered. These solo projects gestated into scripts, and matured into gangly maintenance nightmares. When a tool became crucial, we  called in the tools team . They wrote fluent Vue and React. They blinged their laptops with stickers about declarative frameworks. They had a  design process : Which was awesome. But these tools all needed new features, like weekly. And the tools team was supporting ten other projects. They would say, ‚Äúwe‚Äôll update your tool again in two months.‚Äù So we were back to building our own tools, deploying Flask apps, writing HTML, CSS, and JavaScript, and trying to version control everything from notebooks to stylesheets. So my old Google X friend, Thiago Teixeira, and I began thinking about the following question:  What if we could make building tools as easy as writing Python scripts? We wanted machine learning engineers to be able to create beautiful apps without needing a tools team. These internal tools should arise as a natural byproduct of the ML workflow. Writing such tools should  feel  like training a neural net or performing an ad-hoc analysis in Jupyter! At the same time, we wanted to preserve all of the flexibility of a powerful app framework. We wanted to create beautiful, performant tools that engineers could show off. Basically, we wanted this: With an amazing beta community including engineers from Uber, Twitter, Stitch Fix, and Dropbox, we worked for a year to create  Streamlit , a  completely free and open source  app framework for ML engineers. With each prototype, the core principles of Streamlit became simpler and purer. They are: #1: Embrace Python scripting.  Streamlit apps are really just scripts that run from top to bottom. There‚Äôs no hidden state. You can factor your code with function calls. If you know how to write Python scripts, you can write Streamlit apps. For example, this is how you write to the screen: #2: Treat widgets as variables.  There are  no callbacks in Streamlit ! Every interaction simply reruns the script from top to bottom. This approach leads to really clean code: #3: Reuse data and computation.  What if you download lots of data or perform complex computation? The key is to  safely reuse  information across runs. Streamlit introduces a cache primitive that behaves like a persistent, immutable-by-default, data store that lets Streamlit apps safely and effortlessly reuse information. For example, this code  downloads data only once  from the  Udacity Self-driving car project , yielding a simple, fast app: In short, Streamlit works like this: Or in pictures: If this sounds intriguing, you can try it right now! Just run: This will automatically pop open a web browser pointing to your local Streamlit app. If not, just click the link. Ok. Are you back from playing with fractals? Those can be mesmerizing. The simplicity of these ideas does not prevent you from creating incredibly rich and useful apps with Streamlit. During my time at Zoox and Google X, I watched as self-driving car projects ballooned into gigabytes of visual data, which needed to be searched and understood, including running models on images to compare performance. Every self-driving car project I‚Äôve seen eventually has had entire teams working on this tooling. Building such a tool in Streamlit is easy.  This Streamlit demo  lets you perform semantic search across the entire  Udacity self-driving car photo dataset , visualize human-annotated ground truth labels, and  run a complete neural net ( YOLO ) in real time  from within the app [1]. The whole app is a completely self-contained, 300-line Python script, most of which is machine learning code. In fact, there are  only 23 Streamlit calls in the whole app . You can run it yourself right now! As we worked with machine learning teams on their own projects, we came to realize that these simple ideas yield a number of important benefits: Streamlit apps are pure Python files.  So you can use your favorite editor and debugger with Streamlit. Pure Python scripts work seamlessly with Git  and other source control software, including commits, pull requests, issues, and comments. Because Streamlit‚Äôs underlying language is pure Python, you get all the benefits of these amazing collaboration tools for free üéâ. Streamlit provides an immediate-mode live coding environment.  Just click  Always rerun  when Streamlit detects a source file change. Caching simplifies setting up computation pipelines.  Amazingly, chaining cached functions automatically creates efficient computation pipelines! Consider  this code  adapted from our  Udacity demo : Basically, the pipeline is load_metadata ‚Üí create_summary. Every time the script is run  Streamlit only recomputes whatever subset of the pipeline is required to get the right answer . Cool! Streamlit is built for GPUs.  Streamlit allows direct access to machine-level primitives like TensorFlow and PyTorch and complements these libraries. For example in this demo, Streamlit‚Äôs cache stores the entire  NVIDIA celebrity face GAN  [2]. This approach enables nearly instantaneous inference as the user updates sliders. Streamlit is a free and open-source library rather than a proprietary web app . You can serve Streamlit apps on-prem without contacting us. You can even run Streamlit locally on a laptop without an Internet connection! Furthermore, existing projects can adopt Streamlit incrementally. This just scratches the surface of what you can do with Streamlit. One of the most exciting aspects of Streamlit is how these primitives can be easily composed into complex apps that look like scripts. There‚Äôs a lot more we could say about how our architecture works and the features we have planned, but we‚Äôll save that for future posts. We‚Äôre excited to finally share Streamlit with the community today and see what you all build with it. We hope that you‚Äôll find it easy and delightful to turn your Python scripts into beautiful ML apps. Thanks to Amanda Kelly, Thiago Teixeira, TC Ricks, Seth Weidman, Regan Carey, Beverly Treuille, Genevi√®ve Wachtell, and Barney Pell for their helpful input on this article. References: [1] J. Redmon and A. Farhadi,  YOLOv3: An Incremental Improvement  (2018), arXiv. [2] T. Karras, T. Aila, S. Laine, and J. Lehtinen,  Progressive Growing of GANs for Improved Quality, Stability, and Variation  (2018), ICLR. [3] S. Guan,  Controlled image synthesis and editing using a novel TL-GAN model  (2018), Insight Data Science Blog."
A Complete Machine Learning Project Walk-Through in Python: Part One, Complete Machine Learning Project Walk-Through in Python: Part On,"Reading through a data science book or taking a course, it can feel like you have the individual pieces, but don‚Äôt quite know how to put them together. Taking the next step and solving a complete machine learning problem can be daunting, but preserving and completing a first project will give you the confidence to tackle any data science problem. This series of articles will walk through a complete machine learning solution with a real-world dataset to let you see how all the pieces come together. We‚Äôll follow the general machine learning workflow step-by-step: Along the way, we‚Äôll see how each step flows into the next and how to specifically implement each part in Python. The  complete project  is available on GitHub, with the  first notebook here.  This first article will cover steps 1‚Äì3 with the rest addressed in subsequent posts. (As a note, this problem was originally given to me as an ‚Äúassignment‚Äù for a job screen at a start-up. After completing the work, I was offered the job, but then the CTO of the company quit and they weren‚Äôt able to bring on any new employees. I guess that‚Äôs how things go on the start-up scene!) The first step before we get coding is to understand the problem we are trying to solve and the available data. In this project, we will work with  publicly available building energy data  from New York City. The objective is to use the energy data to build a model that can predict the Energy Star Score of a building and interpret the results to find the factors which influence the score. The data includes the Energy Star Score, which makes this a supervised regression machine learning task: We want to develop a model that is both  accurate  ‚Äî it can predict the Energy Star Score close to the true value ‚Äî and  interpretable  ‚Äî we can understand the model predictions. Once we know the goal, we can use it to guide our decisions as we dig into the data and build models. Contrary to what most data science courses would have you believe, not every dataset is a perfectly curated group of observations with no missing values or anomalies (looking at you  mtcars  and  iris  datasets). Real-world data is messy which means we need to  clean and wrangle  it into an acceptable format before we can even start the analysis. Data cleaning is an un-glamorous, but necessary part of most actual data science problems. First, we can load in the data as a Pandas  DataFrame  and take a look: This is a subset of the full data which contains 60 columns. Already, we can see a couple issues: first, we know that we want to predict the  ENERGY STAR Score  but we don‚Äôt know what any of the columns mean. While this isn‚Äôt necessarily an issue ‚Äî we can often make an accurate model without any knowledge of the variables ‚Äî we want to focus on interpretability, and it might be important to understand at least some of the columns. When I originally got the assignment from the start-up, I didn‚Äôt want to ask what all the column names meant, so I looked at the name of the file, and decided to search for ‚ÄúLocal Law 84‚Äù. That led me to  this page  which explains this is an NYC law requiring all buildings of a certain size to report their energy use. More searching brought me to  all the definitions of the columns.  Maybe looking at a file name is an obvious place to start, but for me this was a reminder to go slow so you don‚Äôt miss anything important! We don‚Äôt need to study all of the columns, but we should at least understand the Energy Star Score, which is described as: A 1-to-100 percentile ranking based on self-reported energy usage for the reporting year. The  Energy Star score  is a relative measure used for comparing the energy efficiency of buildings. That clears up the first problem, but the second issue is that missing values are encoded as ‚ÄúNot Available‚Äù. This is a string in Python which means that even the columns with numbers will be stored as  object  datatypes because Pandas converts a column with any strings into a column of all strings. We can see the datatypes of the columns using the  dataframe.info() method: Sure enough, some of the columns that clearly contain numbers (such as ft¬≤), are stored as objects. We can‚Äôt do numerical analysis on strings, so these will have to be converted to number (specifically  float ) data types! Here‚Äôs a little Python code that replaces all the ‚ÄúNot Available‚Äù entries with not a number (  np.nan ), which can be interpreted as numbers, and then converts the relevant columns to the  float  datatype: Once the correct columns are numbers, we can start to investigate the data. In addition to incorrect datatypes, another common problem when dealing with real-world data is missing values. These can arise for many reasons and have to be either filled in or removed before we train a machine learning model. First, let‚Äôs get a sense of how many missing values are in each column (see the  notebook for code ). (To create this table, I used a function from this  Stack Overflow Forum ). While we always want to be careful about removing information, if a column has a high percentage of missing values, then it probably will not be useful to our model. The threshold for removing columns should depend on the problem ( here is a discussion ), and for this project, we will remove any columns with more than 50% missing values. At this point, we may also want to remove outliers. These can be due to typos in data entry, mistakes in units, or they could be legitimate but extreme values. For this project, we will remove anomalies based on the  definition of extreme outliers : (For the code to remove the columns and the anomalies, see the notebook). At the end of the data cleaning and anomaly removal process, we are left with over 11,000 buildings and 49 features. Now that the tedious ‚Äî but necessary ‚Äî step of data cleaning is complete, we can move on to exploring our data!  Exploratory Data Analysis  (EDA) is an open-ended process where we calculate statistics and make figures to find trends, anomalies, patterns, or relationships within the data. In short, the goal of EDA is to learn what our data can tell us. It generally starts out with a high level overview, then narrows in to specific areas as we find interesting parts of the data. The findings may be interesting in their own right, or they can be used to inform our modeling choices, such as by helping us decide which features to use. The goal is to predict the Energy Star Score (renamed to  score  in our data) so a reasonable place to start is examining the distribution of this variable. A histogram is a simple yet effective way to visualize the distribution of a single variable and is easy to make using  matplotlib . This looks quite suspicious! The Energy Star score is a percentile rank, which means we would expect to see a uniform distribution, with each score assigned to the same number of buildings. However, a disproportionate number of buildings have either the highest, 100, or the lowest, 1, score (higher is better for the Energy Star score). If we go back to the definition of the score, we see that it is based on ‚Äúself-reported energy usage‚Äù which might explain the very high scores. Asking building owners to report their own energy usage is like asking students to report their own scores on a test! As a result, this probably is not the most objective measure of a building‚Äôs energy efficiency. If we had an unlimited amount of time, we might want to investigate why so many buildings have very high and very low scores which we could by selecting these buildings and seeing what they have in common. However, our objective is only to predict the score and not to devise a better method of scoring buildings! We can make a note in our report that the scores have a suspect distribution, but our main focus in on predicting the score. A major part of EDA is searching for relationships between the features and the target. Variables that are correlated with the target are useful to a model because they can be used to predict the target. One way to examine the effect of a categorical variable (which takes on only a limited set of values) on the target is through a density plot using the  seaborn  library. A  density plot can be thought of as a smoothed histogram  because it shows the distribution of a single variable. We can color a density plot by class to see how a categorical variable changes the distribution. The following code makes a density plot of the Energy Star Score colored by the the type of building (limited to building types with more than 100 data points): We can see that the building type has a significant impact on the Energy Star Score. Office buildings tend to have a higher score while Hotels have a lower score. This tells us that we should include the building type in our modeling because it does have an impact on the target. As a categorical variable, we will have to one-hot encode the building type. A similar plot can be used to show the Energy Star Score by borough: The borough does not seem to have as large of an impact on the score as the building type. Nonetheless, we might want to include it in our model because there are slight differences between the boroughs. To quantify relationships between variables, we can use the  Pearson Correlation Coefficient . This is a measure of the strength and direction of a linear relationship between two variables. A score of +1 is a perfectly linear positive relationship and a score of -1 is a perfectly negative linear relationship. Several values of the correlation coefficient are shown below: While the correlation coefficient cannot capture non-linear relationships, it is a good way to start figuring out how variables are related. In Pandas, we can easily calculate the correlations between any columns in a dataframe: The most negative (left) and positive (right) correlations with the target: There are several strong negative correlations between the features and the target with the most negative the different categories of EUI (these measures vary slightly in how they are calculated). The  EUI ‚Äî Energy Use Intensity  ‚Äî is the amount of energy used by a building divided by the square footage of the buildings. It is meant to be a measure of the efficiency of a building with a lower score being better. Intuitively, these correlations make sense: as the EUI increases, the Energy Star Score tends to decrease. To visualize relationships between two continuous variables, we use scatterplots. We can include additional information, such as a categorical variable, in the color of the points. For example, the following plot shows the Energy Star Score vs. Site EUI colored by the building type: This plot lets us visualize what a correlation coefficient of -0.7 looks like. As the Site EUI decreases, the Energy Star Score increases, a relationship that holds steady across the building types. The final exploratory plot we will make is known as the  Pairs Plot. This is a great exploration tool  because it lets us see relationships between multiple pairs of variables as well as distributions of single variables. Here we are using the seaborn visualization library and the  PairGrid  function to create a Pairs Plot with scatterplots on the upper triangle, histograms on the diagonal, and 2D kernel density plots and correlation coefficients on the lower triangle. To see interactions between variables, we look for where a row intersects with a column. For example, to see the correlation of  Weather Norm EUI  with  score , we look in the  Weather Norm EUI  row and the  score  column and see a correlation coefficient of -0.67. In addition to looking cool, plots such as these can help us decide which variables to include in modeling. Feature engineering and selection  often provide the greatest return on time invested in a machine learning problem. First of all, let‚Äôs define what these two tasks are: A machine learning model can only learn from the data we provide it, so ensuring that data includes all the relevant information for our task is crucial. If we don‚Äôt feed a model the correct data, then we are setting it up to fail and we should not expect it to learn! For this project, we will take the following feature engineering steps: One-hot encoding  is necessary to include categorical variables in a model. A machine learning algorithm cannot understand a building type of ‚Äúoffice‚Äù, so we have to record it as a 1 if the building is an office and a 0 otherwise. Adding transformed features can help our model learn non-linear relationships within the data.  Taking the square root, natural log, or various powers of features  is common practice in data science and can be based on domain knowledge or what works best in practice. Here we will include the natural log of all numerical features. The following code selects the numeric features, takes log transformations of these features, selects the two categorical features, one-hot encodes these features, and joins the two sets together. This seems like a lot of work, but it is relatively straightforward in Pandas! After this process we have over 11,000 observations (buildings) with 110 columns (features). Not all of these features are likely to be useful for predicting the Energy Star Score, so now we will turn to feature selection to remove some of the variables. Many of the 110 features we have in our data are redundant because they are highly correlated with one another. For example, here is a plot of Site EUI vs Weather Normalized Site EUI which have a correlation coefficient of 0.997. Features that are strongly correlated with each other are known as  collinear  and removing one of the variables in these pairs of features can often help a  machine learning model generalize and be more interpretable . (I should point out we are talking about correlations of features with other features, not correlations with the target, which help our model!) There are a number of methods to calculate collinearity between features, with one of the most common the  variance inflation factor . In this project, we will use thebcorrelation coefficient to identify and remove collinear features. We will drop one of a pair of features if the correlation coefficient between them is greater than 0.6. For the implementation, take a look at the notebook (and  this Stack Overflow answer ) While this value may seem arbitrary, I tried several different thresholds, and this choice yielded the best model. Machine learning is an  empirical field  and is often about experimenting and finding what performs best! After feature selection, we are left with 64 total features and 1 target. We have now completed data cleaning, exploratory data analysis, and feature engineering. The final step to take before getting started with modeling is establishing a naive baseline. This is essentially a guess against which we can compare our results. If the machine learning models do not beat this guess, then we might have to conclude that machine learning is not acceptable for the task or we might need to try a different approach. For regression problems, a reasonable naive baseline is to guess the median value of the target on the training set for all the examples in the test set. This sets a relatively low bar for any model to surpass. The metric we will use is  mean absolute error  (mae)  which measures the average absolute error on the predictions. There are many metrics for regression, but I like  Andrew Ng‚Äôs advice  to pick a single metric and then stick to it when evaluating models. The mean absolute error is easy to calculate and is interpretable. Before calculating the baseline, we need to split our data into a training and a testing set: We will use 70% of the data for training and 30% for testing: Now we can calculate the naive baseline performance: The naive estimate is off by about 25 points on the test set. The score ranges from 1‚Äì100, so this represents an error of 25%, quite a low bar to surpass! In this article we walked through the first three steps of a machine learning problem. After defining the question, we: Finally, we also completed the crucial step of establishing a baseline against which we can judge our machine learning algorithms. The second post ( available here ) will show how to evaluate machine learning models using  Scikit-Learn , select the best model, and perform hyperparameter tuning to optimize the model. The third post, dealing with model interpretation and reporting results,  is here . As always, I welcome feedback and constructive criticism and can be reached on Twitter  @koehrsen_will ."
Machine Learning is Fun! Part 4: Modern Face Recognition with Deep Learning,achine Learning is Fun! Part 4: Modern Face Recognition with Deep Learnin,"Update:  This article is part of a series. Check out the full series:  Part 1 ,  Part 2 ,  Part 3 ,  Part 4 ,  Part 5 ,  Part 6 ,  Part 7  and  Part 8 ! You can also read this article in  ÊôÆÈÄöËØù ,  –†—É—Å—Å–∫–∏–π ,  ÌïúÍµ≠Ïñ¥ ,  Portugu√™s ,  Ti·∫øng Vi·ªát ,  ŸÅÿßÿ±ÿ≥€å  or  Italiano . Giant update:   I‚Äôve written a new book based on these articles ! It not only expands and updates all my articles, but it has tons of brand new content and lots of hands-on coding projects.  Check it out now ! Have you noticed that Facebook has developed an uncanny ability to recognize your friends in your photographs? In the old days, Facebook used to make you to tag your friends in photos by clicking on them and typing in their name. Now as soon as you upload a photo, Facebook tags everyone for you  like magic : This technology is called face recognition. Facebook‚Äôs algorithms are able to recognize your friends‚Äô faces after they have been tagged only a few times. It‚Äôs pretty amazing technology ‚Äî Facebook can recognize faces with  98% accuracy  which is pretty much as good as humans can do! Let‚Äôs learn how modern face recognition works! But just recognizing your friends would be too easy. We can push this tech to the limit to solve a more challenging problem ‚Äî telling  Will Ferrell  (famous actor) apart from  Chad Smith  (famous rock musician)! So far in  Part 1 ,  2  and  3 , we‚Äôve used machine learning to solve isolated problems that have only one step ‚Äî  estimating the price of a house ,  generating new data based on existing data  and  telling if an image contains a certain object . All of those problems can be solved by choosing one machine learning algorithm, feeding in data, and getting the result. But face recognition is really a series of several related problems: As a human, your brain is wired to do all of this automatically and instantly. In fact, humans are  too good  at recognizing faces and end up seeing faces in everyday objects: Computers are not capable of this kind of high-level generalization ( at least not yet‚Ä¶ ), so we have to teach them how to do each step in this process separately. We need to build a  pipeline  where we solve each step of face recognition separately and pass the result of the current step to the next step. In other words, we will chain together several machine learning algorithms: Let‚Äôs tackle this problem one step at a time. For each step, we‚Äôll learn about a different machine learning algorithm. I‚Äôm not going to explain every single algorithm completely to keep this from turning into a book, but you‚Äôll learn the main ideas behind each one and you‚Äôll learn how you can build your own facial recognition system in Python using  OpenFace  and  dlib . The first step in our pipeline is  face detection . Obviously we need to locate the faces in a photograph before we can try to tell them apart! If you‚Äôve used any camera in the last 10 years, you‚Äôve probably seen face detection in action: Face detection is a great feature for cameras. When the camera can automatically pick out faces, it can make sure that all the faces are in focus before it takes the picture. But we‚Äôll use it for a different purpose ‚Äî finding the areas of the image we want to pass on to the next step in our pipeline. Face detection went mainstream in the early 2000's when Paul Viola and Michael Jones invented a  way to detect faces  that was fast enough to run on cheap cameras. However, much more reliable solutions exist now. We‚Äôre going to use  a method invented in 2005  called Histogram of Oriented Gradients ‚Äî or just  HOG  for short. To find faces in an image, we‚Äôll start by making our image black and white because we don‚Äôt need color data to find faces: Then we‚Äôll look at every single pixel in our image one at a time. For every single pixel, we want to look at the pixels that directly surrounding it: Our goal is to figure out how dark the current pixel is compared to the pixels directly surrounding it. Then we want to draw an arrow showing in which direction the image is getting darker: If you repeat that process for  every single pixel  in the image, you end up with every pixel being replaced by an arrow. These arrows are called  gradients  and they show the flow from light to dark across the entire image: This might seem like a random thing to do, but there‚Äôs a really good reason for replacing the pixels with gradients. If we analyze pixels directly, really dark images and really light images of the same person will have totally different pixel values. But by only considering the  direction  that brightness changes, both really dark images and really bright images will end up with the same exact representation. That makes the problem a lot easier to solve! But saving the gradient for every single pixel gives us way too much detail. We end up  missing the forest for the trees . It would be better if we could just see the basic flow of lightness/darkness at a higher level so we could see the basic pattern of the image. To do this, we‚Äôll break up the image into small squares of 16x16 pixels each. In each square, we‚Äôll count up how many gradients point in each major direction (how many point up, point up-right, point right, etc‚Ä¶). Then we‚Äôll replace that square in the image with the arrow directions that were the strongest. The end result is we turn the original image into a very simple representation that captures the basic structure of a face in a simple way: To find faces in this HOG image, all we have to do is find the part of our image that looks the most similar to a known HOG pattern that was extracted from a bunch of other training faces: Using this technique, we can now easily find faces in any image: If you want to try this step out yourself using Python and dlib,  here‚Äôs code  showing how to generate and view HOG representations of images. Whew, we isolated the faces in our image. But now we have to deal with the problem that faces turned different directions look totally different to a computer: To account for this, we will try to warp each picture so that the eyes and lips are always in the sample place in the image. This will make it a lot easier for us to compare faces in the next steps. To do this, we are going to use an algorithm called  face landmark estimation . There are lots of ways to do this, but we are going to use the approach  invented in 2014 by Vahid Kazemi and Josephine Sullivan. The basic idea is we will come up with 68 specific points (called  landmarks ) that exist on every face ‚Äî the top of the chin, the outside edge of each eye, the inner edge of each eyebrow, etc. Then we will train a machine learning algorithm to be able to find these 68 specific points on any face: Here‚Äôs the result of locating the 68 face landmarks on our test image: Now that we know were the eyes and mouth are, we‚Äôll simply rotate, scale and  shear  the image so that the eyes and mouth are centered as best as possible. We won‚Äôt do any fancy 3d warps because that would introduce distortions into the image. We are only going to use basic image transformations like rotation and scale that preserve parallel lines (called  affine transformations ): Now no matter how the face is turned, we are able to center the eyes and mouth are in roughly the same position in the image. This will make our next step a lot more accurate. If you want to try this step out yourself using Python and dlib, here‚Äôs the  code for finding face landmarks  and here‚Äôs the  code for transforming the image  using those landmarks. Now we are to the meat of the problem ‚Äî actually telling faces apart. This is where things get really interesting! The simplest approach to face recognition is to directly compare the unknown face we found in Step 2 with all the pictures we have of people that have already been tagged. When we find a previously tagged face that looks very similar to our unknown face, it must be the same person. Seems like a pretty good idea, right? There‚Äôs actually a huge problem with that approach. A site like Facebook with billions of users and a trillion photos can‚Äôt possibly loop through every previous-tagged face to compare it to every newly uploaded picture. That would take way too long. They need to be able to recognize faces in milliseconds, not hours. What we need is a way to extract a few basic measurements from each face. Then we could measure our unknown face the same way and find the known face with the closest measurements. For example, we might measure the size of each ear, the spacing between the eyes, the length of the nose, etc. If you‚Äôve ever watched a bad crime show like  CSI , you know what I am talking about: Ok, so which measurements should we collect from each face to build our known face database? Ear size? Nose length? Eye color? Something else? It turns out that the measurements that seem obvious to us humans (like eye color) don‚Äôt really make sense to a computer looking at individual pixels in an image. Researchers have discovered that the most accurate approach is to let the computer figure out the measurements to collect itself. Deep learning does a better job than humans at figuring out which parts of a face are important to measure. The solution is to train a Deep Convolutional Neural Network ( just like we did in Part 3 ). But instead of training the network to recognize pictures objects like we did last time, we are going to train it to generate 128 measurements for each face. The training process works by looking at 3 face images at a time: Then the algorithm looks at the measurements it is currently generating for each of those three images. It then tweaks the neural network slightly so that it makes sure the measurements it generates for #1 and #2 are slightly closer while making sure the measurements for #2 and #3 are slightly further apart: After repeating this step millions of times for millions of images of thousands of different people, the neural network learns to reliably generate 128 measurements for each person. Any ten different pictures of the same person should give roughly the same measurements. Machine learning people call the 128 measurements of each face an  embedding . The idea of reducing complicated raw data like a picture into a list of computer-generated numbers comes up a lot in machine learning (especially in language translation). The exact approach for faces we are using  was invented in 2015 by researchers at Google  but many similar approaches exist. This process of training a convolutional neural network to output face embeddings requires a lot of data and computer power. Even with an expensive  NVidia Telsa video card , it takes  about 24 hours  of continuous training to get good accuracy. But once the network has been trained, it can generate measurements for any face, even ones it has never seen before! So this step only needs to be done once. Lucky for us, the fine folks at  OpenFace  already did this and they  published several trained networks  which we can directly use. Thanks  Brandon Amos  and team! So all we need to do ourselves is run our face images through their pre-trained network to get the 128 measurements for each face. Here‚Äôs the measurements for our test image: So what parts of the face are these 128 numbers measuring exactly? It turns out that we have no idea. It doesn‚Äôt really matter to us. All that we care is that the network generates nearly the same numbers when looking at two different pictures of the same person. If you want to try this step yourself, OpenFace  provides a lua script  that will generate embeddings all images in a folder and write them to a csv file. You  run it like this . This last step is actually the easiest step in the whole process. All we have to do is find the person in our database of known people who has the closest measurements to our test image. You can do that by using any basic machine learning classification algorithm. No fancy deep learning tricks are needed. We‚Äôll use a simple linear  SVM classifier , but lots of classification algorithms could work. All we need to do is train a classifier that can take in the measurements from a new test image and tells which known person is the closest match. Running this classifier takes milliseconds. The result of the classifier is the name of the person! So let‚Äôs try out our system. First, I trained a classifier with the embeddings of about 20 pictures each of Will Ferrell, Chad Smith and Jimmy Falon: Then I ran the classifier on every frame of the famous youtube video of  Will Ferrell and Chad Smith pretending to be each other  on the Jimmy Fallon show: It works! And look how well it works for faces in different poses ‚Äî even sideways faces! Let‚Äôs review the steps we followed: Now that you know how this all works, here‚Äôs instructions from start-to-finish of how run this entire face recognition pipeline on your own computer: UPDATE 4/9/2017:   You can still follow the steps below to use OpenFace. However, I‚Äôve released a new Python-based face recognition library called  face_recognition  that is much easier to install and use. So I‚Äôd recommend trying out  face_recognition  first instead of continuing below! I even put together  a pre-configured virtual machine with face_recognition, OpenCV, TensorFlow and lots of other deep learning tools pre-installed . You can download and run it on your computer very easily. Give the virtual machine a shot if you don‚Äôt want to install all these libraries yourself! Original OpenFace instructions: If you liked this article, please consider signing up for my Machine Learning is Fun! newsletter: You can also follow me on Twitter at  @ageitgey ,  email me directly  or  find me on linkedin . I‚Äôd love to hear from you if I can help you or your team with machine learning. Now continue on to  Machine Learning is Fun Part 5 !"
Machine Learning is Fun!,achine Learning is Fun,"Update:  This article is part of a series. Check out the full series:  Part 1 ,  Part 2 ,  Part 3 ,  Part 4 ,  Part 5 ,  Part 6 ,  Part 7  and  Part 8 ! You can also read this article in  Êó•Êú¨Ë™û ,  Portugu√™s ,  Portugu√™s (alternate) ,  T√ºrk√ße ,  Fran√ßais ,  ÌïúÍµ≠Ïñ¥  ,  ÿßŸÑÿπŸéÿ±Ÿéÿ®ŸêŸäŸéŸëÿ©‚Äé‚Äé ,  Espa√±ol (M√©xico) ,  Espa√±ol (Espa√±a) ,  Polski ,  Italiano ,  ÊôÆÈÄöËØù ,  –†—É—Å—Å–∫–∏–π ,  ÌïúÍµ≠Ïñ¥  ,  Ti·∫øng Vi·ªát  or  ŸÅÿßÿ±ÿ≥€å . Giant update:   I‚Äôve written a new book based on these articles ! It not only expands and updates all my articles, but it has tons of brand new content and lots of hands-on coding projects.  Check it out now ! Have you heard people talking about machine learning but only have a fuzzy idea of what that means? Are you tired of nodding your way through conversations with co-workers? Let‚Äôs change that! This guide is for anyone who is curious about machine learning but has no idea where to start. I imagine there are a lot of people who tried reading  the wikipedia article , got frustrated and gave up wishing someone would just give them a high-level explanation. That‚Äôs what this is. The goal is be accessible to anyone ‚Äî which means that there‚Äôs a lot of generalizations. But who cares? If this gets anyone more interested in ML, then mission accomplished. Machine learning is the idea that there are generic algorithms that can tell you something interesting about a set of data without you having to write any custom code specific to the problem. Instead of writing code, you feed data to the generic algorithm and it builds its own logic based on the data. For example, one kind of algorithm is a classification algorithm. It can put data into different groups. The same classification algorithm used to recognize handwritten numbers could also be used to classify emails into spam and not-spam without changing a line of code. It‚Äôs the same algorithm but it‚Äôs fed different training data so it comes up with different classification logic. ‚ÄúMachine learning‚Äù is an umbrella term covering lots of these kinds of generic algorithms. You can think of machine learning algorithms as falling into one of two main categories ‚Äî  supervised learning  and  unsupervised learning . The difference is simple, but really important. Let‚Äôs say you are a real estate agent. Your business is growing, so you hire a bunch of new trainee agents to help you out. But there‚Äôs a problem ‚Äî you can glance at a house and have a pretty good idea of what a house is worth, but your trainees don‚Äôt have your experience so they don‚Äôt know how to price their houses. To help your trainees (and maybe free yourself up for a vacation), you decide to write a little app that can estimate the value of a house in your area based on it‚Äôs size, neighborhood, etc, and what similar houses have sold for. So you write down every time someone sells a house in your city for 3 months. For each house, you write down a bunch of details ‚Äî number of bedrooms, size in square feet, neighborhood, etc. But most importantly, you write down the final sale price: Using that training data, we want to create a program that can estimate how much any other house in your area is worth: This is called  supervised learning . You knew how much each house sold for, so in other words, you knew the answer to the problem and could work backwards from there to figure out the logic. To build your app, you feed your training data about each house into your machine learning algorithm. The algorithm is trying to figure out what kind of math needs to be done to make the numbers work out. This kind of like having the answer key to a math test with all the arithmetic symbols erased: From this, can you figure out what kind of math problems were on the test? You know you are supposed to ‚Äúdo something‚Äù with the numbers on the left to get each answer on the right. In  supervised learning , you are letting the computer work out that relationship for you. And once you know what math was required to solve this specific set of problems, you could answer to any other problem of the same type! Let‚Äôs go back to our original example with the real estate agent. What if you didn‚Äôt know the sale price for each house? Even if all you know is the size, location, etc of each house, it turns out you can still do some really cool stuff. This is called  unsupervised  learning. This is kind of like someone giving you a list of numbers on a sheet of paper and saying ‚ÄúI don‚Äôt really know what these numbers mean but maybe you can figure out if there is a pattern or grouping or something ‚Äî good luck!‚Äù So what could do with this data? For starters, you could have an algorithm that automatically identified different market segments in your data. Maybe you‚Äôd find out that home buyers in the neighborhood near the local college really like small houses with lots of bedrooms, but home buyers in the suburbs prefer 3-bedroom houses with lots of square footage. Knowing about these different kinds of customers could help direct your marketing efforts. Another cool thing you could do is automatically identify any outlier houses that were way different than everything else. Maybe those outlier houses are giant mansions and you can focus your best sales people on those areas because they have bigger commissions. Supervised learning is what we‚Äôll focus on for the rest of this post, but that‚Äôs not because unsupervised learning is any less useful or interesting. In fact, unsupervised learning is becoming increasingly important as the algorithms get better because it can be used without having to label the data with the correct answer. Side note: There are lots of  other types  of machine learning algorithms. But this is a pretty good place to start. As a human, your brain can approach most any situation and learn how to deal with that situation without any explicit instructions. If you sell houses for a long time, you will instinctively have a ‚Äúfeel‚Äù for the right price for a house, the best way to market that house, the kind of client who would be interested, etc. The goal of  Strong AI  research is to be able to replicate this ability with computers. But current machine learning algorithms aren‚Äôt that good yet ‚Äî they only work when focused a very specific, limited problem. Maybe a better definition for ‚Äúlearning‚Äù in this case is ‚Äúfiguring out an equation to solve a specific problem based on some example data‚Äù. Unfortunately  ‚ÄúMachine Figuring out an equation to solve a specific problem based on some example data‚Äù  isn‚Äôt really a great name. So we ended up with ‚ÄúMachine Learning‚Äù instead. Of course if you are reading this 50 years in the future and we‚Äôve figured out the algorithm for Strong AI, then this whole post will all seem a little quaint. Maybe stop reading and go tell your robot servant to go make you a sandwich, future human. So, how would you write the program to estimate the value of a house like in our example above? Think about it for a second before you read further. If you didn‚Äôt know anything about machine learning, you‚Äôd probably try to write out some basic rules for estimating the price of a house like this: If you fiddle with this for hours and hours, you might end up with something that sort of works. But your program will never be perfect and it will be hard to maintain as prices change. Wouldn‚Äôt it be better if the computer could just figure out how to implement this function for you? Who cares what exactly the function does as long is it returns the correct number: One way to think about this problem is that the  price  is a delicious stew and the ingredients are the  number of bedrooms , the  square footage  and the  neighborhood . If you could just figure out how much each ingredient impacts the final price, maybe there‚Äôs an exact ratio of ingredients to stir in to make the final price. That would reduce your original function (with all those crazy  if ‚Äôs and  else ‚Äôs) down to something really simple like this: Notice the magic numbers in bold ‚Äî  .841231951398213 ,  1231.1231231 ,  2.3242341421 ,   and  201.23432095 . These are our  weights . If we could just figure out the perfect weights to use that work for every house, our function could predict house prices! A dumb way to figure out the best weights would be something like this: Start with each weight set to  1.0: Run every house you know about through your function and see how far off the function is at guessing the correct price for each house: For example, if the first house really sold for $250,000, but your function guessed it sold for $178,000, you are off by $72,000 for that single house. Now add up the squared amount you are off for each house you have in your data set. Let‚Äôs say that you had 500 home sales in your data set and the square of how much your function was off for each house was a grand total of $86,123,373. That‚Äôs how ‚Äúwrong‚Äù your function currently is. Now, take that sum total and divide it by 500 to get an average of how far off you are for each house. Call this average error amount the  cost  of your function. If you could get this cost to be zero by playing with the weights, your function would be perfect. It would mean that in every case, your function perfectly guessed the price of the house based on the input data. So that‚Äôs our goal ‚Äî get this cost to be as low as possible by trying different weights. Repeat Step 2 over and over   with  every single possible combination of weights . Whichever combination of weights makes the cost closest to zero is what you use. When you find the weights that work, you‚Äôve solved the problem! That‚Äôs pretty simple, right? Well think about what you just did. You took some data, you fed it through three generic, really simple steps, and you ended up with a function that can guess the price of any house in your area. Watch out, Zillow! But here‚Äôs a few more facts that will blow your mind: Pretty crazy, right? Ok, of course you can‚Äôt just try every combination of all possible weights to find the combo that works the best. That would literally take forever since you‚Äôd never run out of numbers to try. To avoid that, mathematicians have figured out lots of  clever ways  to quickly find good values for those weights without having to try very many. Here‚Äôs one way: First, write a simple equation that represents Step #2 above: Now let‚Äôs re-write exactly the same equation, but using a bunch of machine learning math jargon (that you can ignore for now): This equation represents how wrong our price estimating function is for the weights we currently have set. If we graph this cost equation for all possible values of our weights for  number_of_bedrooms  and  sqft , we‚Äôd get a graph that might look something like this: In this graph, the lowest point in blue is where our cost is the lowest ‚Äî thus our function is the least wrong. The highest points are where we are most wrong. So if we can find the weights that get us to the lowest point on this graph, we‚Äôll have our answer! So we just need to adjust our weights so we are ‚Äúwalking down hill‚Äù on this graph towards the lowest point. If we keep making small adjustments to our weights that are always moving towards the lowest point, we‚Äôll eventually get there without having to try too many different weights. If you remember anything from Calculus, you might remember that if you take the derivative of a function, it tells you the slope of the function‚Äôs tangent at any point. In other words, it tells us which way is downhill for any given point on our graph. We can use that knowledge to walk downhill. So if we calculate a partial derivative of our cost function with respect to each of our weights, then we can subtract that value from each weight. That will walk us one step closer to the bottom of the hill. Keep doing that and eventually we‚Äôll reach the bottom of the hill and have the best possible values for our weights. (If that didn‚Äôt make sense, don‚Äôt worry and keep reading). That‚Äôs a high level summary of one way to find the best weights for your function called  batch gradient descent . Don‚Äôt be afraid to  dig deeper  if you are interested on learning the details. When you use a machine learning library to solve a real problem, all of this will be done for you. But it‚Äôs still useful to have a good idea of what is happening. The three-step algorithm I described is called  multivariate linear regression . You are estimating the equation for a line that fits through all of your house data points. Then you are using that equation to guess the sales price of houses you‚Äôve never seen before based where that house would appear on your line. It‚Äôs a really powerful idea and you can solve ‚Äúreal‚Äù problems with it. But while the approach I showed you might work in simple cases, it won‚Äôt work in all cases. One reason is because house prices aren‚Äôt always simple enough to follow a continuous line. But luckily there are lots of ways to handle that. There are plenty of other machine learning algorithms that can handle non-linear data (like  neural networks  or  SVMs  with  kernels ). There are also ways to use linear regression more cleverly that allow for more complicated lines to be fit. In all cases, the same basic idea of needing to find the best weights still applies. Also, I ignored the idea of  overfitting . It‚Äôs easy to come up with a set of weights that always works perfectly for predicting the prices of the houses in your original data set but never actually works for any new houses that weren‚Äôt in your original data set. But there are ways to deal with this (like  regularization  and using a  cross-validation  data set). Learning how to deal with this issue is a key part of learning how to apply machine learning successfully. In other words, while the basic concept is pretty simple, it takes some skill and experience to apply machine learning and get useful results. But it‚Äôs a skill that any developer can learn! Once you start seeing how easily machine learning techniques can be applied to problems that seem really hard (like handwriting recognition), you start to get the feeling that you could use machine learning to solve any problem and get an answer as long as you have enough data. Just feed in the data and watch the computer magically figure out the equation that fits the data! But it‚Äôs important to remember that machine learning only works if the problem is actually solvable with the data that you have. For example, if you build a model that predicts home prices based on the type of potted plants in each house, it‚Äôs never going to work. There just isn‚Äôt any kind of relationship between the potted plants in each house and the home‚Äôs sale price. So no matter how hard it tries, the computer can never deduce a relationship between the two. So remember, if a human expert couldn‚Äôt use the data to solve the problem manually, a computer probably won‚Äôt be able to either. Instead, focus on problems where a human could solve the problem, but where it would be great if a computer could solve it much more quickly. In my mind, the biggest problem with machine learning right now is that it mostly lives in the world of academia and commercial research groups. There isn‚Äôt a lot of easy to understand material out there for people who would like to get a broad understanding without actually becoming experts. But it‚Äôs getting a little better every day. If you want to try out what you‚Äôve learned in this article, I made  a course that walks you through every step of this article, including writing all the code . Give it a try! If you want to go deeper, Andrew Ng‚Äôs free  Machine Learning class on Coursera  is pretty amazing as a next step. I highly recommend it. It should be accessible to anyone who has a Comp. Sci. degree and who remembers a very minimal amount of math. Also, you can play around with tons of machine learning algorithms by downloading and installing  SciKit-Learn . It‚Äôs a python framework that has ‚Äúblack box‚Äù versions of all the standard algorithms. If you liked this article, please consider signing up for my Machine Learning is Fun! Newsletter: Also, please check out the  full-length course version of this article .  It covers everything in this article in more detail, including writing the actual code in Python. You can get a free 30-day trial to watch the course  if you sign up with this link . You can also follow me on Twitter at  @ageitgey ,  email me directly  or  find me on linkedin . I‚Äôd love to hear from you if I can help you or your team with machine learning. Now continue on to  Machine Learning is Fun Part 2 !"
"Every single Machine Learning course on the internet, ranked by your reviews","very single Machine Learning course on the internet, ranked by your review","A year and a half ago, I dropped out of one of the best computer science programs in Canada. I started creating my own  data science master‚Äôs program  using online resources. I realized that I could learn everything I needed through edX, Coursera, and Udacity instead. And I could learn it faster, more efficiently, and for a fraction of the cost. I‚Äôm almost finished now. I‚Äôve taken many data science-related courses and audited portions of many more. I know the options out there, and what skills are needed for learners preparing for a data analyst or data scientist role.   So I started creating a review-driven guide that recommends the best courses for each subject within data science. For the first guide in the series, I recommended a few  coding classes  for the beginner data scientist. Then it was  statistics and probability classes . Then  introductions to data science . Also,  data visualization . For this guide, I spent a dozen hours trying to identify every online machine learning course offered as of May 2017, extracting key bits of information from their syllabi and reviews, and compiling their ratings.  My end goal was to identify the three best courses available and present them to you, below. For this task, I turned to none other than the open source Class Central community, and its database of thousands of course ratings and reviews. Since 2011,  Class Central  founder  Dhawal Shah  has kept a closer eye on online courses than arguably anyone else in the world. Dhawal personally helped me assemble this list of resources. Hey, it‚Äôs David. I wrote this guide back in 2017. Since then, I‚Äôve become a professional data analyst and created courses for multiple industry-leading online education companies. Do you want to become a data analyst, without spending 4 years and $41,762 to go to university? Follow my latest  27-day curriculum  and learn alongside other aspiring data pros. datamaverickhq.com Okay, back to the guide. Each course must fit three criteria: We believe we covered every notable course that fits the above criteria. Since there are seemingly hundreds of courses on  Udemy , we chose to consider the most-reviewed and highest-rated ones only. There‚Äôs always a chance that we missed something, though. So please let us know in the comments section if we left a good course out. We compiled average ratings and number of reviews from Class Central and other review sites to calculate a weighted average rating for each course. We read text reviews and used this feedback to supplement the numerical ratings. We made subjective syllabus judgment calls based on three factors: A popular definition originates from  Arthur Samuel  in 1959: machine learning is a subfield of computer science that gives  ‚Äúcomputers the ability to learn without being explicitly programmed.‚Äù  In practice, this means developing computer programs that can make predictions based on data. Just as humans can learn from experience, so can computers, where data = experience. A machine learning workflow is the process required for carrying out a machine learning project. Though individual projects can differ, most workflows share several common tasks: problem evaluation, data exploration, data preprocessing, model training/testing/deployment, etc. Below you‚Äôll find helpful visualization of these core steps: The ideal course introduces the entire process and provides interactive examples, assignments, and/or quizzes where students can perform each task themselves. First off, let‚Äôs define deep learning. Here is a succinct description: ‚ÄúDeep learning is a subfield of machine learning concerned with algorithms inspired by the structure and function of the brain called artificial neural networks.‚Äù ‚Äî Jason Brownlee from  Machine Learning Mastery As would be expected, portions of some of the machine learning courses contain deep learning content. I chose not to include deep learning-only courses, however. If you are interested in deep learning specifically, we‚Äôve got you covered with the following  article : medium.freecodecamp.com My top three recommendations from that list would be: Several courses listed below ask students to have prior programming, calculus, linear algebra, and statistics experience. These prerequisites are understandable given that machine learning is an advanced discipline. Missing a few subjects? Good news! Some of this experience can be acquired through our recommendations in the first two articles ( programming ,  statistics ) of this Data Science Career Guide. Several top-ranked courses below also provide gentle calculus and linear algebra refreshers and highlight the aspects most relevant to machine learning for those less familiar. Stanford University‚Äôs  Machine Learning  on Coursera is the clear current winner in terms of ratings, reviews, and syllabus fit. Taught by the famous Andrew Ng, Google Brain founder and former chief scientist at  Baidu , this was the class that sparked the founding of Coursera. It has a 4.7-star weighted average rating over 422 reviews. Released in 2011, it covers all aspects of the machine learning workflow. Though it has a smaller scope than the original Stanford class upon which it is based, it still manages to cover a large number of techniques and algorithms. The estimated timeline is eleven weeks, with two weeks dedicated to neural networks and deep learning. Free and paid options are available. Ng is a dynamic yet gentle instructor with a palpable experience. He inspires confidence, especially when sharing practical implementation tips and warnings about common pitfalls. A linear algebra refresher is provided and Ng highlights the aspects of calculus most relevant to machine learning. Evaluation is automatic and is done via multiple choice quizzes that follow each lesson and programming assignments. The assignments (there are eight of them) can be completed in MATLAB or Octave, which is an open-source version of MATLAB. Ng explains his language choice: In the past, I‚Äôve tried to teach machine learning using a large variety of different programming languages including C++, Java, Python, NumPy, and also Octave ‚Ä¶ And what I‚Äôve seen after having taught machine learning for almost a decade is that you learn much faster if you use Octave as your programming environment. Though Python and R are likely more compelling choices in 2017 with the  increased popularity of those languages , reviewers note that that shouldn‚Äôt stop you from taking the course. A few prominent reviewers noted the following: Of longstanding renown in the MOOC world, Stanford‚Äôs machine learning course really is the definitive introduction to this topic. The course broadly covers all of the major areas of machine learning ‚Ä¶ Prof. Ng precedes each segment with a motivating discussion and examples. Andrew Ng is a gifted teacher and able to explain complicated subjects in a very intuitive and clear way, including the math behind all concepts. Highly recommended. The only problem I see with this course if that it sets the expectation bar very high for other courses. Columbia University‚Äôs  Machine Learning  is a relatively new offering that is part of their Artificial Intelligence MicroMasters on edX. Though it is newer and doesn‚Äôt have a large number of reviews, the ones that it does have are exceptionally strong. Professor John Paisley is noted as brilliant, clear, and clever. It has a 4.8-star weighted average rating over 10 reviews. The course also covers all aspects of the machine learning workflow and more algorithms than the above Stanford offering. Columbia‚Äôs is a more advanced introduction, with reviewers noting that students should be comfortable with the recommended prerequisites (calculus, linear algebra, statistics, probability, and coding). Quizzes (11), programming assignments (4), and a final exam are the modes of evaluation. Students can use either Python, Octave, or MATLAB to complete the assignments. The course‚Äôs total estimated timeline is eight to ten hours per week over twelve weeks. It is free with a verified certificate available for purchase. Below are a few of the aforementioned sparkling  reviews : Over all my years of [being a] student I‚Äôve come across professors who aren‚Äôt brilliant, professors who are brilliant but they don‚Äôt know how to explain the stuff clearly, and professors who are brilliant and know how explain the stuff clearly. Dr. Paisley belongs to the third group. This is a great course ‚Ä¶ The instructor‚Äôs language is precise and that is, to my mind, one of the strongest points of the course. The lectures are of high quality and the slides are great too. Dr. Paisley and his supervisor are ‚Ä¶ students of Michael Jordan, the father of machine learning. [Dr. Paisley] is the best ML professor at Columbia because of his ability to explain stuff clearly. Up to 240 students have selected his course this semester, the largest number among all professors [teaching] machine learning at Columbia. Machine Learning A-Z‚Ñ¢  on Udemy is an impressively detailed offering that provides instruction in  both  Python and R, which is rare and can‚Äôt be said for any of the other top courses. It has a 4.5-star weighted average rating over 8,119 reviews, which makes it the most reviewed course of the ones considered. It covers the entire machine learning workflow and an almost ridiculous (in a good way) number of algorithms through 40.5 hours of on-demand video. The course takes a more applied approach and is lighter math-wise than the above two courses. Each section starts with an ‚Äúintuition‚Äù video from Eremenko that summarizes the underlying theory of the concept being taught. de Ponteves then walks through implementation with separate videos for both Python and R. As a ‚Äúbonus,‚Äù the course includes Python and R code templates for students to download and use on their own projects. There are quizzes and homework challenges, though these aren‚Äôt the strong points of the course. Eremenko and the SuperDataScience team are revered for their ability to ‚Äúmake the complex simple.‚Äù Also, the prerequisites listed are ‚Äújust some high school mathematics,‚Äù so this course might be a better option for those daunted by the Stanford and Columbia offerings. A few prominent reviewers  noted  the following: The course is professionally produced, the sound quality is excellent, and the explanations are clear and concise ‚Ä¶ It‚Äôs an incredible value for your financial and time investment. It was spectacular to be able to follow the course in two different programming languages simultaneously. Kirill is one of the absolute best instructors on Udemy (if not the Internet) and I recommend taking any class he teaches. ‚Ä¶ This course has a ton of content, like a ton! Our #1 pick had a weighted average rating of 4.7 out of 5 stars over 422 reviews. Let‚Äôs look at the other alternatives, sorted by descending rating. A reminder that deep learning-only courses are not included in this guide ‚Äî you can find those  here . The Analytics Edge  (Massachusetts Institute of Technology/edX): More focused on analytics in general, though it does cover several machine learning topics. Uses R. Strong narrative that leverages familiar real-world examples. Challenging. Ten to fifteen hours per week over twelve weeks. Free with a verified certificate available for purchase. It has a 4.9-star weighted average rating over 214 reviews. Python for Data Science and Machine Learning Bootcamp  (Jose Portilla/Udemy): Has large chunks of machine learning content, but covers the whole data science process. More of a very detailed intro to Python. Amazing course, though not ideal for the scope of this guide. 21.5 hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.6-star weighted average rating over 3316 reviews. Data Science and Machine Learning Bootcamp with R  (Jose Portilla/Udemy): The comments for Portilla‚Äôs above course apply here as well, except for R. 17.5 hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.6-star weighted average rating over 1317 reviews. Machine Learning Series  (Lazy Programmer Inc./Udemy): Taught by a data scientist/big data engineer/full stack software engineer with an impressive resume, Lazy Programmer currently has a series of 16 machine learning-focused courses on Udemy. In total, the courses have 5000+ ratings and almost all of them have 4.6 stars. A useful course ordering is provided in each individual course‚Äôs description. Uses Python. Cost varies depending on Udemy discounts, which are frequent. Machine Learning  (Georgia Tech/Udacity): A compilation of what was three separate courses: Supervised, Unsupervised and Reinforcement Learning. Part of Udacity‚Äôs Machine Learning Engineer Nanodegree and Georgia Tech‚Äôs Online Master‚Äôs Degree (OMS). Bite-sized videos, as is Udacity‚Äôs style. Friendly professors. Estimated timeline of four months. Free. It has a 4.56-star weighted average rating over 9 reviews. Implementing Predictive Analytics with Spark in Azure HDInsight  (Microsoft/edX): Introduces the core concepts of machine learning and a variety of algorithms. Leverages several big data-friendly tools, including Apache Spark, Scala, and Hadoop. Uses both Python and R. Four hours per week over six weeks. Free with a verified certificate available for purchase. It has a 4.5-star weighted average rating over 6 reviews. Data Science and Machine Learning with Python ‚Äî Hands On!  (Frank Kane/Udemy): Uses Python. Kane has nine years of experience at Amazon and IMDb. Nine hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.5-star weighted average rating over 4139 reviews. Scala and Spark for Big Data and Machine Learning  (Jose Portilla/Udemy): ‚ÄúBig data‚Äù focus, specifically on implementation in Scala and Spark. Ten hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.5-star weighted average rating over 607 reviews. Machine Learning Engineer Nanodegree  (Udacity): Udacity‚Äôs flagship Machine Learning program, which features a best-in-class project review system and career support. The program is a compilation of several individual Udacity courses, which are free. Co-created by Kaggle. Estimated timeline of six months. Currently costs $199 USD per month with a 50% tuition refund available for those who graduate within 12 months. It has a 4.5-star weighted average rating over 2 reviews. Learning From Data (Introductory Machine Learning)  (California Institute of Technology/edX): Enrollment is currently closed on edX, but is also available via CalTech‚Äôs independent platform (see below). It has a 4.49-star weighted average rating over 42 reviews. Learning From Data (Introductory Machine Learning)  (Yaser Abu-Mostafa/California Institute of Technology): ‚ÄúA real Caltech course, not a watered-down version.‚Äù Reviews note it is excellent for understanding machine learning theory. The professor, Yaser Abu-Mostafa, is popular among students and also wrote the textbook upon which this course is based. Videos are taped lectures (with lectures slides picture-in-picture) uploaded to YouTube. Homework assignments are .pdf files. The course experience for online students isn‚Äôt as polished as the top three recommendations. It has a 4.43-star weighted average rating over 7 reviews. Mining Massive Datasets  (Stanford University): Machine learning with a focus on ‚Äúbig data.‚Äù Introduces modern distributed file systems and MapReduce. Ten hours per week over seven weeks. Free. It has a 4.4-star weighted average rating over 30 reviews. AWS Machine Learning: A Complete Guide With Python  (Chandra Lingam/Udemy): A unique focus on cloud-based machine learning and specifically Amazon Web Services. Uses Python. Nine hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.4-star weighted average rating over 62 reviews. Introduction to Machine Learning & Face Detection in Python  (Holczer Balazs/Udemy): Uses Python. Eight hours of on-demand video. Cost varies depending on Udemy discounts, which are frequent. It has a 4.4-star weighted average rating over 162 reviews. StatLearning: Statistical Learning  (Stanford University): Based on the excellent textbook, ‚Äú An Introduction to Statistical Learning, with Applications in R ‚Äù and taught by the professors who wrote it. Reviewers note that the MOOC isn‚Äôt as good as the book, citing ‚Äúthin‚Äù exercises and mediocre videos. Five hours per week over nine weeks. Free. It has a 4.35-star weighted average rating over 84 reviews. Machine Learning Specialization  (University of Washington/Coursera): Great courses, but last two classes (including the capstone project) were canceled. Reviewers note that this series is more digestable (read: easier for those without strong technical backgrounds) than other top machine learning courses (e.g. Stanford‚Äôs or Caltech‚Äôs). Be aware that the series is incomplete with recommender systems, deep learning, and a summary missing. Free and paid options available. It has a 4.31-star weighted average rating over 80 reviews. From 0 to 1: Machine Learning, NLP & Python-Cut to the Chase  (Loony Corn/Udemy): ‚ÄúA down-to-earth, shy but confident take on machine learning techniques.‚Äù Taught by four-person team with decades of industry experience together. Uses Python. Cost varies depending on Udemy discounts, which are frequent. It has a 4.2-star weighted average rating over 494 reviews. Principles of Machine Learning  (Microsoft/edX): Uses R, Python, and Microsoft Azure Machine Learning. Part of the Microsoft Professional Program Certificate in Data Science. Three to four hours per week over six weeks. Free with a verified certificate available for purchase. It has a 4.09-star weighted average rating over 11 reviews. Big Data: Statistical Inference and Machine Learning  (Queensland University of Technology/FutureLearn): A nice, brief exploratory machine learning course with a focus on big data. Covers a few tools like R, H2O Flow, and WEKA. Only three weeks in duration at a recommended two hours per week, but one reviewer noted that six hours per week would be more appropriate. Free and paid options available. It has a 4-star weighted average rating over 4 reviews. Genomic Data Science and Clustering  (Bioinformatics V) (University of California, San Diego/Coursera): For those interested in the intersection of computer science and biology and how it represents an important frontier in modern science. Focuses on clustering and dimensionality reduction. Part of UCSD‚Äôs Bioinformatics Specialization. Free and paid options available. It has a 4-star weighted average rating over 3 reviews. Intro to Machine Learning  (Udacity): Prioritizes topic breadth and practical tools (in Python) over depth and theory. The instructors, Sebastian Thrun and Katie Malone, make this class so fun. Consists of bite-sized videos and quizzes followed by a mini-project for each lesson. Currently part of Udacity‚Äôs Data Analyst Nanodegree. Estimated timeline of ten weeks. Free. It has a 3.95-star weighted average rating over 19 reviews. Machine Learning for Data Analysis  (Wesleyan University/Coursera): A brief intro machine learning and a few select algorithms. Covers decision trees, random forests, lasso regression, and k-means clustering. Part of Wesleyan‚Äôs Data Analysis and Interpretation Specialization. Estimated timeline of four weeks. Free and paid options available. It has a 3.6-star weighted average rating over 5 reviews. Programming with Python for Data Science  (Microsoft/edX): Produced by Microsoft in partnership with Coding Dojo. Uses Python. Eight hours per week over six weeks. Free and paid options available. It has a 3.46-star weighted average rating over 37 reviews. Machine Learning for Trading  (Georgia Tech/Udacity): Focuses on applying probabilistic machine learning approaches to trading decisions. Uses Python. Part of Udacity‚Äôs Machine Learning Engineer Nanodegree and Georgia Tech‚Äôs Online Master‚Äôs Degree (OMS). Estimated timeline of four months. Free. It has a 3.29-star weighted average rating over 14 reviews. Practical Machine Learning  (Johns Hopkins University/Coursera): A brief, practical introduction to a number of machine learning algorithms. Several one/two-star reviews expressing a variety of concerns. Part of JHU‚Äôs Data Science Specialization. Four to nine hours per week over four weeks. Free and paid options available. It has a 3.11-star weighted average rating over 37 reviews. Machine Learning for Data Science and Analytics  (Columbia University/edX): Introduces a wide range of machine learning topics. Some passionate negative reviews with concerns including content choices, a lack of programming assignments, and uninspiring presentation. Seven to ten hours per week over five weeks. Free with a verified certificate available for purchase. It has a 2.74-star weighted average rating over 36 reviews. Recommender Systems Specialization  (University of Minnesota/Coursera): Strong focus one specific type of machine learning ‚Äî recommender systems. A four course specialization plus a capstone project, which is a case study. Taught using LensKit (an open-source toolkit for recommender systems). Free and paid options available. It has a 2-star weighted average rating over 2 reviews. Machine Learning With Big Data  (University of California, San Diego/Coursera): Terrible reviews that highlight poor instruction and evaluation. Some noted it took them mere hours to complete the whole course. Part of UCSD‚Äôs Big Data Specialization. Free and paid options available. It has a 1.86-star weighted average rating over 14 reviews. Practical Predictive Analytics: Models and Methods  (University of Washington/Coursera): A brief intro to core machine learning concepts. One reviewer noted that there was a lack of quizzes and that the assignments were not challenging. Part of UW‚Äôs Data Science at Scale Specialization. Six to eight hours per week over four weeks. Free and paid options available. It has a 1.75-star weighted average rating over 4 reviews. The following courses had one or no reviews as of May 2017. Machine Learning for Musicians and Artists  (Goldsmiths, University of London/Kadenze): Unique. Students learn algorithms, software tools, and machine learning best practices to make sense of human gesture, musical audio, and other real-time data. Seven sessions in length. Audit (free) and premium ($10 USD per month) options available. It has one 5-star review. Applied Machine Learning in Python  (University of Michigan/Coursera): Taught using Python and the scikit learn toolkit. Part of the Applied Data Science with Python Specialization. Scheduled to start May 29th. Free and paid options available. Applied Machine Learning  (Microsoft/edX): Taught using various tools, including Python, R, and Microsoft Azure Machine Learning (note: Microsoft produces the course). Includes hands-on labs to reinforce the lecture content. Three to four hours per week over six weeks. Free with a verified certificate available for purchase. Machine Learning with Python  (Big Data University): Taught using Python. Targeted towards beginners. Estimated completion time of four hours. Big Data University is affiliated with IBM. Free. Machine Learning with Apache SystemML  (Big Data University): Taught using Apache SystemML, which is a declarative style language designed for large-scale machine learning. Estimated completion time of eight hours. Big Data University is affiliated with IBM. Free. Machine Learning for Data Science  (University of California, San Diego/edX): Doesn‚Äôt launch until January 2018. Programming examples and assignments are in Python, using Jupyter notebooks. Eight hours per week over ten weeks. Free with a verified certificate available for purchase. Introduction to Analytics Modeling  (Georgia Tech/edX): The course advertises R as its primary programming tool. Five to ten hours per week over ten weeks. Free with a verified certificate available for purchase. Predictive Analytics: Gaining Insights from Big Data  (Queensland University of Technology/FutureLearn): Brief overview of a few algorithms. Uses Hewlett Packard Enterprise‚Äôs Vertica Analytics platform as an applied tool. Start date to be announced. Two hours per week over four weeks. Free with a Certificate of Achievement available for purchase. Introducci√≥n al Machine Learning  (Universitas Telef√≥nica/Mir√≠ada X): Taught in Spanish. An introduction to machine learning that covers supervised and unsupervised learning. A total of twenty estimated hours over four weeks. Machine Learning Path Step  (Dataquest): Taught in Python using Dataquest‚Äôs interactive in-browser platform. Multiple guided projects and a ‚Äúplus‚Äù project where you build your own machine learning system using your own data. Subscription required. The following six courses are offered by  DataCamp . DataCamp‚Äôs hybrid teaching style leverages video and text-based instruction with lots of examples through an in-browser code editor. A subscription is required for full access to each course. Introduction to Machine Learning  (DataCamp): Covers classification, regression, and clustering algorithms. Uses R. Fifteen videos and 81 exercises with an estimated timeline of six hours. Supervised Learning with scikit-learn  (DataCamp): Uses Python and scikit-learn. Covers classification and regression algorithms. Seventeen videos and 54 exercises with an estimated timeline of four hours. Unsupervised Learning in R  (DataCamp): Provides a basic introduction to clustering and dimensionality reduction in R. Sixteen videos and 49 exercises with an estimated timeline of four hours. Machine Learning Toolbox  (DataCamp): Teaches the ‚Äúbig ideas‚Äù in machine learning. Uses R. 24 videos and 88 exercises with an estimated timeline of four hours. Machine Learning with the Experts: School Budgets  (DataCamp): A case study from a machine learning competition on DrivenData. Involves building a model to automatically classify items in a school‚Äôs budget. DataCamp‚Äôs ‚ÄúSupervised Learning with scikit-learn‚Äù is a prerequisite. Fifteen videos and 51 exercises with an estimated timeline of four hours. Unsupervised Learning in Python  (DataCamp): Covers a variety of unsupervised learning algorithms using Python, scikit-learn, and scipy. The course ends with students building a recommender system to recommend popular musical artists. Thirteen videos and 52 exercises with an estimated timeline of four hours. Machine Learning  (Tom Mitchell/Carnegie Mellon University): Carnegie Mellon‚Äôs graduate introductory machine learning course. A prerequisite to their second graduate level course, ‚ÄúStatistical Machine Learning.‚Äù Taped university lectures with practice problems, homework assignments, and a midterm (all with solutions) posted online. A  2011 version  of the course also exists. CMU is one of the best graduate schools for studying machine learning and has a whole department dedicated to ML. Free. Statistical Machine Learning  (Larry Wasserman/Carnegie Mellon University): Likely the most advanced course in this guide. A follow-up to Carnegie Mellon‚Äôs Machine Learning course. Taped university lectures with practice problems, homework assignments, and a midterm (all with solutions) posted online. Free. Undergraduate Machine Learning  (Nando de Freitas/University of British Columbia): An undergraduate machine learning course. Lectures are filmed and put on YouTube with the slides posted on the course website. The course assignments are posted as well (no solutions, though). de Freitas is now a full-time professor at the University of Oxford and receives praise for his teaching abilities in various forums. Graduate version available (see below). Machine Learning  (Nando de Freitas/University of British Columbia): A graduate machine learning course. The comments in de Freitas‚Äô undergraduate course (above) apply here as well. This is the fifth of a six-piece series that covers the best online courses for launching yourself into the data science field. We covered programming in the  first article , statistics and probability in the  second article , intros to data science in the  third article , and data visualization in the  fourth . medium.freecodecamp.com The final piece will be a summary of those articles, plus the best online courses for other key topics such as data wrangling, databases, and even software engineering. If you‚Äôre looking for a complete list of Data Science online courses, you can find them on Class Central‚Äôs  Data Science and Big Data  subject page. If you enjoyed reading this, check out some of  Class Central ‚Äôs other pieces: medium.freecodecamp.com medium.freecodecamp.com If you have suggestions for courses I missed, let me know in the responses! If you found this helpful, click the üíö so more people will see it here on Medium. This is a condensed version of my  original article  published on Class Central, where I‚Äôve included detailed course syllabi."
Essential Cheat Sheets for Machine Learning and Deep Learning Engineers,ssential Cheat Sheets for Machine Learning and Deep Learning Engineer,"Machine learning is complex. For newbies, starting to learn machine learning can be painful if they don‚Äôt have right resources to learn from. Most of the machine learning libraries are difficult to understand and learning curve can be a bit frustrating. I am creating a repository on Github( cheatsheets-ai ) containing cheatsheets for different machine learning frameworks, gathered from different sources. Do visit the Github repository, also, contribute cheat sheets if you have any. Thanks. List of Cheatsheets:  1. Keras 2. Numpy 3. Pandas 4. Scipy 5. Matplotlib 6. Scikit-learn 7. Neural Networks Zoo 8. ggplot2 9. PySpark 10. R Studio 11. Jupyter Notebook 12. Dask 2. Numpy 3. Pandas 4. Scipy 5. Matplotlib 6. Scikit-learn 7. Neural Networks Zoo 8. ggplot2 9. PySpark 10. R Studio (dplyr and tidyr) 11. Jupyter Notebook 12. Dask Thank you for reading. If you want to get into contact, you can reach out to me at  ahikailash1@gmail.com About Me: I am a Co-Founder of  MateLabs , where we have built  Mateverse , an ML Platform which enables everyone to easily build and train Machine Learning Models, without writing a single line of code. Note : Recently, I published a book on GANs titled ‚ÄúGenerative Adversarial Networks Projects‚Äù, in which I covered most of the widely popular GAN architectures and their implementations. DCGAN, StackGAN, CycleGAN, Pix2pix, Age-cGAN, and 3D-GAN have been covered in details at the implementation level. Each architecture has a chapter dedicated to it. I have explained these networks in a very simple and descriptive language using Keras framework with Tensorflow backend. If you are working on GANs or planning to use GANs, give it a read and share your valuable feedback with me at  ahikailash1@gmail.com www.amazon.com You can grab a copy of the book from  http://www.amazon.com/Generative-Adversarial-Networks-Projects-next-generation/dp/1789136679 https://www.amazon.in/Generative-Adversarial-Networks-Projects-next-generation/dp/1789136679?fbclid=IwAR0X2pDk4CTxn5GqWmBbKIgiB38WmFX-sqCpBNI8k9Z8I-KCQ7VWRpJXm7I   https://www.packtpub.com/big-data-and-business-intelligence/generative-adversarial-networks-projects?fbclid=IwAR2OtU21faMFPM4suH_HJmy_DRQxOVwJZB0kz3ZiSbFb_MW7INYCqqV7U0c Triplebyte helps programmers find great companies to work at. They‚Äôll go through a technical interview with you, match you with companies that are looking for people with your specific skill sets, and then fast track you through their hiring processes. Looking for a new job? Take Triplebyte‚Äôs quiz and get a job at top companies!"
"Cheat Sheets for AI, Neural Networks, Machine Learning, Deep Learning & Big Data","heat Sheets for AI, Neural Networks, Machine Learning, Deep Learning & Big Dat","Over the past few months, I have been collecting AI cheat sheets. From time to time I share them with friends and colleagues and recently I have been getting asked a lot, so I decided to organize and share the entire collection. To make things more interesting and give context, I added descriptions and/or excerpts for each major topic. This is the most complete list and the Big-O is at the very end, enjoy‚Ä¶ >>> Update: We have recently redesigned these cheat sheets into a Super High Definition PDF. Check them out below: becominghuman.ai chatbotslife.com aijobsboard.com This machine learning cheat sheet will help you find the right estimator for the job which is the most difficult part. The flowchart will help you check the documentation and rough guide of each estimator that will help you to know more about the problems and how to solve it. >>>  See Latest Jobs in AI, ML & BIG DATA  <<< Scikit-learn  (formerly  scikits.learn ) is a  free software   machine learning   library  for the  Python  programming language. It features various  classification ,  regression  and  clustering  algorithms including  support vector machines ,  random forests ,  gradient boosting ,  k -means  and  DBSCAN , and is designed to interoperate with the Python numerical and scientific libraries  NumPy  and  SciPy . This machine learning cheat sheet from Microsoft Azure will help you choose the appropriate machine learning algorithms for your predictive analytics solution. First, the cheat sheet will asks you about the data nature and then suggests the best algorithm for the job. becominghuman.ai aijobsboard.com In May 2017 Google announced the second-generation of the TPU, as well as the availability of the TPUs in  Google Compute Engine . [12]  The second-generation TPUs deliver up to 180 teraflops of performance, and when organized into clusters of 64 TPUs provide up to 11.5 petaflops. becominghuman.ai In 2017, Google‚Äôs TensorFlow team decided to support Keras in TensorFlow‚Äôs core library. Chollet explained that Keras was conceived to be an interface rather than an end-to-end machine-learning framework. It presents a higher-level, more intuitive set of abstractions that make it easy to configure neural networks regardless of the backend scientific computing library. NumPy targets the  CPython  reference  implementation  of Python, which is a non-optimizing  bytecode  interpreter. Mathematical algorithms written for this version of Python often run much slower than  compiled  equivalents. NumPy address the slowness problem partly by providing multidimensional arrays and functions and operators that operate efficiently on arrays, requiring rewriting some code, mostly inner loops using NumPy. The name ‚ÄòPandas‚Äô is derived from the term ‚Äú panel data ‚Äù, an  econometrics  term for multidimensional structured data sets. The term ‚Äúdata wrangler‚Äù is starting to infiltrate pop culture. In the 2017 movie  Kong: Skull Island , one of the characters, played by actor  Marc Evan Jackson  is introduced as ‚ÄúSteve Woodward, our data wrangler‚Äù. becominghuman.ai chatbotslife.com aijobsboard.com SciPy builds on the  NumPy  array object and is part of the NumPy stack which includes tools like  Matplotlib ,  pandas  and  SymPy , and an expanding set of scientific computing libraries. This NumPy stack has similar users to other applications such as  MATLAB ,  GNU Octave , and  Scilab . The NumPy stack is also sometimes referred to as the SciPy stack. [3] matplotlib  is a  plotting   library  for the  Python  programming language and its numerical mathematics extension  NumPy . It provides an  object-oriented   API  for embedding plots into applications using general-purpose  GUI toolkits  like  Tkinter ,  wxPython ,  Qt , or  GTK+ . There is also a  procedural  ‚Äúpylab‚Äù interface based on a  state machine  (like  OpenGL ), designed to closely resemble that of  MATLAB , though its use is discouraged. [2]   SciPy  makes use of matplotlib. pyplot is a matplotlib module which provides a MATLAB-like interface. [6]  matplotlib is designed to be as usable as MATLAB, with the ability to use Python, with the advantage that it is free. >>> If you like this list, you can let me know  here . <<< aijobsboard.com becominghuman.ai becominghuman.ai Stefan is the founder of  Chatbot‚Äôs Life , a Chatbot media and consulting firm. Chatbot‚Äôs Life has grown to over 150k views per month and has become the premium place to learn about Bots & AI online. Chatbot‚Äôs Life has also consulted many of the top Bot companies like Swelly, Instavest, OutBrain, NearGroup and a number of Enterprises. Big-O Algorithm Cheat Sheet:  http://bigocheatsheet.com/ Bokeh Cheat Sheet:  https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Bokeh_Cheat_Sheet.pdf Data Science Cheat Sheet:  https://www.datacamp.com/community/tutorials/python-data-science-cheat-sheet-basics Data Wrangling Cheat Sheet:  https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf Data Wrangling:  https://en.wikipedia.org/wiki/Data_wrangling Ggplot Cheat Sheet:  https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf Keras Cheat Sheet:  https://www.datacamp.com/community/blog/keras-cheat-sheet#gs.DRKeNMs Keras:  https://en.wikipedia.org/wiki/Keras Machine Learning Cheat Sheet:  https://ai.icymi.email/new-machinelearning-cheat-sheet-by-emily-barry-abdsc/ Machine Learning Cheat Sheet:  https://docs.microsoft.com/en-in/azure/machine-learning/machine-learning-algorithm-cheat-sheet ML Cheat Sheet::  http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html Matplotlib Cheat Sheet:  https://www.datacamp.com/community/blog/python-matplotlib-cheat-sheet#gs.uEKySpY Matpotlib:  https://en.wikipedia.org/wiki/Matplotlib Neural Networks Cheat Sheet:  http://www.asimovinstitute.org/neural-network-zoo/ Neural Networks Graph Cheat Sheet:  http://www.asimovinstitute.org/blog/ Neural Networks:  https://www.quora.com/Where-can-find-a-cheat-sheet-for-neural-network Numpy Cheat Sheet:  https://www.datacamp.com/community/blog/python-numpy-cheat-sheet#gs.AK5ZBgE NumPy:  https://en.wikipedia.org/wiki/NumPy Pandas Cheat Sheet:  https://www.datacamp.com/community/blog/python-pandas-cheat-sheet#gs.oundfxM Pandas:  https://en.wikipedia.org/wiki/Pandas_(software) Pandas Cheat Sheet:  https://www.datacamp.com/community/blog/pandas-cheat-sheet-python#gs.HPFoRIc Pyspark Cheat Sheet:  https://www.datacamp.com/community/blog/pyspark-cheat-sheet-python#gs.L=J1zxQ Scikit Cheat Sheet:  https://www.datacamp.com/community/blog/scikit-learn-cheat-sheet Scikit-learn:  https://en.wikipedia.org/wiki/Scikit-learn Scikit-learn Cheat Sheet:  http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html Scipy Cheat Sheet:  https://www.datacamp.com/community/blog/python-scipy-cheat-sheet#gs.JDSg3OI SciPy:  https://en.wikipedia.org/wiki/SciPy TesorFlow Cheat Sheet:  https://www.altoros.com/tensorflow-cheat-sheet.html Tensor Flow:  https://en.wikipedia.org/wiki/TensorFlow"
Machine Learning is Fun! Part 3: Deep Learning and Convolutional Neural Networks,achine Learning is Fun! Part 3: Deep Learning and Convolutional Neural Network,"Update:  This article is part of a series. Check out the full series:  Part 1 ,  Part 2 ,  Part 3 ,  Part 4 ,  Part 5 ,  Part 6 ,  Part 7  and  Part 8 ! You can also read this article in  ÊôÆÈÄöËØù ,  –†—É—Å—Å–∫–∏–π ,  ÌïúÍµ≠Ïñ¥ ,  Portugu√™s ,  Ti·∫øng Vi·ªát ,  ŸÅÿßÿ±ÿ≥€å   or  Italiano . Giant update:   I‚Äôve written a new book based on these articles ! It not only expands and updates all my articles, but it has tons of brand new content and lots of hands-on coding projects.  Check it out now ! Are you tired of reading endless news stories about  deep learning  and not really knowing what that means? Let‚Äôs change that! This time, we are going to learn how to write programs that recognize objects in images using deep learning. In other words, we‚Äôre going to explain the black magic that allows Google Photos to search your photos based on what is in the picture: Just like  Part 1  and  Part 2 , this guide is for anyone who is curious about machine learning but has no idea where to start. The goal is be accessible to anyone ‚Äî which means that there‚Äôs a lot of generalizations and we skip lots of details. But who cares? If this gets anyone more interested in ML, then mission accomplished! (If you haven‚Äôt already read  part 1  and  part 2 , read them now!) You might have seen  this famous xkcd comic  before. The goof is based on the idea that any 3-year-old child can recognize a photo of a bird, but figuring out how to make a computer recognize objects has puzzled the very best computer scientists for over 50 years. In the last few years, we‚Äôve finally found a good approach to object recognition using  deep convolutional neural networks . That sounds like a a bunch of made up words from a William Gibson Sci-Fi novel, but the ideas are totally understandable if you break them down one by one. So let‚Äôs do it ‚Äî let‚Äôs write a program that can recognize birds! Before we learn how to recognize pictures of birds, let‚Äôs learn how to recognize something much simpler ‚Äî the handwritten number ‚Äú8‚Äù. In  Part 2 , we learned about how neural networks can solve complex problems by chaining together lots of simple neurons. We created a small neural network to estimate the price of a house based on how many bedrooms it had, how big it was, and which neighborhood it was in: We also know that the idea of machine learning is that the same generic algorithms can be reused with different data to solve different problems. So let‚Äôs modify this same neural network to recognize handwritten text. But to make the job really simple, we‚Äôll only try to recognize one letter ‚Äî the numeral ‚Äú8‚Äù. Machine learning only works when you have data ‚Äî preferably a lot of data. So we need lots and lots of handwritten ‚Äú8‚Äùs to get started. Luckily, researchers created the  MNIST data set of handwritten numbers  for this very purpose. MNIST provides 60,000 images of handwritten digits, each as an 18x18 image. Here are some ‚Äú8‚Äùs from the data set: The neural network we made in  Part 2  only took in a three numbers as the input (‚Äú3‚Äù bedrooms, ‚Äú2000‚Äù sq. feet , etc.). But now we want to process images with our neural network. How in the world do we feed images into a neural network instead of just numbers? The answer is incredible simple. A neural network takes numbers as input. To a computer, an image is really just a grid of numbers that represent how dark each pixel is: To feed an image into our neural network, we simply treat the 18x18 pixel image as an array of 324 numbers: The handle 324 inputs, we‚Äôll just enlarge our neural network to have 324 input nodes: Notice that our neural network also has two outputs now (instead of just one). The first output will predict the likelihood that the image is an ‚Äú8‚Äù and thee second output will predict the likelihood it isn‚Äôt an ‚Äú8‚Äù. By having a separate output for each type of object we want to recognize, we can use a neural network to classify objects into groups. Our neural network is a lot bigger than last time (324 inputs instead of 3!). But any modern computer can handle a neural network with a few hundred nodes without blinking. This would even work fine on your cell phone. All that‚Äôs left is to train the neural network with images of ‚Äú8‚Äùs and not-‚Äú8""s so it learns to tell them apart. When we feed in an ‚Äú8‚Äù, we‚Äôll tell it the probability the image is an ‚Äú8‚Äù is 100% and the probability it‚Äôs not an ‚Äú8‚Äù is 0%. Vice versa for the counter-example images. Here‚Äôs some of our training data: We can train this kind of neural network in a few minutes on a modern laptop. When it‚Äôs done, we‚Äôll have a neural network that can recognize pictures of ‚Äú8‚Äùs with a pretty high accuracy. Welcome to the world of (late 1980‚Äôs-era) image recognition! It‚Äôs really neat that simply feeding pixels into a neural network actually worked to build image recognition! Machine learning is magic!  ‚Ä¶right? Well, of course it‚Äôs not that simple. First, the good news is that our ‚Äú8‚Äù recognizer really does work well on simple images where the letter is right in the middle of the image: But now the really bad news: Our ‚Äú8‚Äù recognizer  totally fails  to work when the letter isn‚Äôt perfectly centered in the image. Just the slightest position change ruins everything: This is because our network only learned the pattern of a perfectly-centered ‚Äú8‚Äù. It has absolutely no idea what an off-center ‚Äú8‚Äù is. It knows exactly one pattern and one pattern only. That‚Äôs not very useful in the real world. Real world problems are never that clean and simple. So we need to figure out how to make our neural network work in cases where the ‚Äú8‚Äù isn‚Äôt perfectly centered. We already created a really good program for finding an ‚Äú8‚Äù centered in an image. What if we just scan all around the image for possible ‚Äú8‚Äùs in smaller sections, one section at a time, until we find one? This approach called a sliding window. It‚Äôs the brute force solution. It works well in some limited cases, but it‚Äôs really inefficient. You have to check the same image over and over looking for objects of different sizes. We can do better than this! When we trained our network, we only showed it ‚Äú8‚Äùs that were perfectly centered. What if we train it with more data, including ‚Äú8‚Äùs in all different positions and sizes all around the image? We don‚Äôt even need to collect new training data. We can just write a script to generate new images with the ‚Äú8‚Äùs in all kinds of different positions in the image: Using this technique, we can easily create an endless supply of training data. More data makes the problem harder for our neural network to solve, but we can compensate for that by making our network bigger and thus able to learn more complicated patterns. To make the network bigger, we just stack up layer upon layer of nodes: We call this a ‚Äúdeep neural network‚Äù because it has more layers than a traditional neural network. This idea has been around since the late 1960s. But until recently, training this large of a neural network was just too slow to be useful. But once we figured out how to use 3d graphics cards (which were designed to do matrix multiplication really fast) instead of normal computer processors, working with large neural networks suddenly became practical. In fact, the exact same NVIDIA GeForce GTX 1080 video card that you use to play  Overwatch  can be used to train neural networks incredibly quickly. But even though we can make our neural network really big and train it quickly with a 3d graphics card, that still isn‚Äôt going to get us all the way to a solution. We need to be smarter about how we process images into our neural network. Think about it. It doesn‚Äôt make sense to train a network to recognize an ‚Äú8‚Äù at the top of a picture separately from training it to recognize an ‚Äú8‚Äù at the bottom of a picture as if those were two totally different objects. There should be some way to make the neural network smart enough to know that an ‚Äú8‚Äù anywhere in the picture is the same thing without all that extra training. Luckily‚Ä¶ there is! As a human, you intuitively know that pictures have a  hierarchy  or  conceptual structure . Consider this picture: As a human, you instantly recognize the hierarchy in this picture: Most importantly, we recognize the idea of a  child  no matter what surface the child is on. We don‚Äôt have to re-learn the idea of  child  for every possible surface it could appear on. But right now, our neural network can‚Äôt do this. It thinks that an ‚Äú8‚Äù in a different part of the image is an entirely different thing. It doesn‚Äôt understand that moving an object around in the picture doesn‚Äôt make it something different. This means it has to re-learn the identify of each object in every possible position. That sucks. We need to give our neural network understanding of  translation invariance  ‚Äî an ‚Äú8‚Äù is an ‚Äú8‚Äù no matter where in the picture it shows up. We‚Äôll do this using a process called Convolution. The idea of convolution is inspired partly by computer science and partly by biology (i.e. mad scientists literally poking cat brains with weird probes to figure out how cats process images). Instead of feeding entire images into our neural network as one grid of numbers, we‚Äôre going to do something a lot smarter that takes advantage of the idea that an object is the same no matter where it appears in a picture. Here‚Äôs how it‚Äôs going to work, step by step ‚Äî Similar to our sliding window search above, let‚Äôs pass a sliding window over the entire original image and save each result as a separate, tiny picture tile: By doing this, we turned our original image into 77 equally-sized tiny image tiles. Earlier, we fed a single image into a neural network to see if it was an ‚Äú8‚Äù. We‚Äôll do the exact same thing here, but we‚Äôll do it for each individual image tile: However,  there‚Äôs one big twist : We‚Äôll keep the  same neural network weights  for every single tile in the same original image. In other words, we are treating every image tile equally. If something interesting appears in any given tile, we‚Äôll mark that tile as interesting. We don‚Äôt want to lose track of the arrangement of the original tiles. So we save the result from processing each tile into a grid in the same arrangement as the original image. It looks like this: In other words, we‚Äôve started with a large image and we ended with a slightly smaller array that records which sections of our original image were the most interesting. The result of Step 3 was an array that maps out which parts of the original image are the most interesting. But that array is still pretty big: To reduce the size of the array, we  downsample  it using an algorithm called  max pooling . It sounds fancy, but it isn‚Äôt at all! We‚Äôll just look at each 2x2 square of the array and keep the biggest number: The idea here is that if we found something interesting in any of the four input tiles that makes up each 2x2 grid square, we‚Äôll just keep the most interesting bit. This reduces the size of our array while keeping the most important bits. So far, we‚Äôve reduced a giant image down into a fairly small array. Guess what? That array is just a bunch of numbers, so we can use that small array as input into  another neural network . This final neural network will decide if the image is or isn‚Äôt a match. To differentiate it from the convolution step, we call it a ‚Äúfully connected‚Äù network. So from start to finish, our whole five-step pipeline looks like this: Our image processing pipeline is a series of steps: convolution, max-pooling, and finally a fully-connected network. When solving problems in the real world, these steps can be combined and stacked as many times as you want! You can have two, three or even ten convolution layers. You can throw in max pooling wherever you want to reduce the size of your data. The basic idea is to start with a large image and continually boil it down, step-by-step, until you finally have a single result. The more convolution steps you have, the more complicated features your network will be able to learn to recognize. For example, the first convolution step might learn to recognize sharp edges, the second convolution step might recognize beaks using it‚Äôs knowledge of sharp edges, the third step might recognize entire birds using it‚Äôs knowledge of beaks, etc. Here‚Äôs what a more realistic deep convolutional network (like you would find in a research paper) looks like: In this case, they start a 224 x 224 pixel image, apply convolution and max pooling twice, apply convolution 3 more times, apply max pooling and then have two fully-connected layers. The end result is that the image is classified into one of 1000 categories! So how do you know which steps you need to combine to make your image classifier work? Honestly, you have to answer this by doing a lot of experimentation and testing. You might have to train 100 networks before you find the optimal structure and parameters for the problem you are solving. Machine learning involves a lot of trial and error! Now finally we know enough to write a program that can decide if a picture is a bird or not. As always, we need some data to get started. The free  CIFAR10 data set  contains 6,000 pictures of birds and 52,000 pictures of things that are not birds. But to get even more data we‚Äôll also add in the  Caltech-UCSD Birds-200‚Äì2011 data set  that has another 12,000 bird pics. Here‚Äôs a few of the birds from our combined data set: And here‚Äôs some of the 52,000 non-bird images: This data set will work fine for our purposes, but 72,000 low-res images is still pretty small for real-world applications. If you want Google-level performance, you need  millions  of large images. In machine learning, having more data is almost always more important that having better algorithms. Now you know why Google is so happy to offer you unlimited photo storage. They want your sweet, sweet data! To build our classifier, we‚Äôll use  TFLearn . TFlearn is a wrapper around Google‚Äôs  TensorFlow  deep learning library that exposes a simplified API. It makes building convolutional neural networks as easy as writing a few lines of code to define the layers of our network. Here‚Äôs the code to define and train the network: If you are training with a good video card with enough RAM (like an Nvidia GeForce GTX 980 Ti or better), this will be done in less than an hour. If you are training with a normal cpu, it might take a lot longer. As it trains, the accuracy will increase. After the first pass, I got 75.4% accuracy. After just 10 passes, it was already up to 91.7%. After 50 or so passes, it capped out around 95.5% accuracy and additional training didn‚Äôt help, so I stopped it there. Congrats! Our program can now recognize birds in images! Now that we have a trained neural network, we can use it!  Here‚Äôs a simple script  that takes in a single image file and predicts if it is a bird or not. But to really see how effective our network is, we need to test it with lots of images. The data set I created held back 15,000 images for validation. When I ran those 15,000 images through the network, it predicted the correct answer 95% of the time. That seems pretty good, right? Well‚Ä¶ it depends! Our network claims to be 95% accurate. But the devil is in the details. That could mean all sorts of different things. For example, what if 5% of our training images were birds and the other 95% were not birds? A program that guessed ‚Äúnot a bird‚Äù every single time would be 95% accurate! But it would also be 100% useless. We need to look more closely at the numbers than just the overall accuracy. To judge how good a classification system really is, we need to look closely at  how  it failed, not just the percentage of the time that it failed. Instead of thinking about our predictions as ‚Äúright‚Äù and ‚Äúwrong‚Äù, let‚Äôs break them down into four separate categories ‚Äî Using our validation set of 15,000 images, here‚Äôs how many times our predictions fell into each category: Why do we break our results down like this? Because not all mistakes are created equal. Imagine if we were writing a program to detect cancer from an MRI image. If we were detecting cancer, we‚Äôd rather have false positives than false negatives. False negatives would be the worse possible case ‚Äî that‚Äôs when the program told someone they definitely didn‚Äôt have cancer but they actually did. Instead of just looking at overall accuracy, we calculate  Precision and Recall  metrics. Precision and Recall metrics give us a clearer picture of how well we did: This tells us that 97% of the time we guessed ‚ÄúBird‚Äù, we were right! But it also tells us that we only found 90% of the actual birds in the data set. In other words, we might not find every bird but we are pretty sure about it when we do find one! Now that you know the basics of deep convolutional networks, you can try out some of the  examples that come with tflearn  to get your hands dirty with different neural network architectures. It even comes with built-in data sets so you don‚Äôt even have to find your own images. You also know enough now to start branching and learning about other areas of machine learning. Why not learn  how to use algorithms to train computers how to play Atari games  next? If you liked this article, please consider  signing up for my Machine Learning is Fun! email list . I‚Äôll only email you when I have something new and awesome to share. It‚Äôs the best way to find out when I write more articles like this. You can also follow me on Twitter at  @ageitgey ,  email me directly  or  find me on linkedin . I‚Äôd love to hear from you if I can help you or your team with machine learning. Now continue on to  Machine Learning is Fun Part 4 ,  Part 5  and  Part 6 !"
‚ÄòI want to learn Artificial Intelligence and Machine Learning. Where can I start?‚Äô,I want to learn Artificial Intelligence and Machine Learning. Where can I start?,"I was working at the Apple Store and I wanted a change. To start building the tech I was servicing. I began looking into Machine Learning (ML) and Artificial Intelligence (AI). There‚Äôs so much going on. Too much. Every week it seems like Google or Facebook are releasing a new kind of AI to make things faster or improve our experience. And don‚Äôt get me started on the number of self-driving car companies. This is a good thing though. I‚Äôm not a fan of driving and roads are dangerous. Even with all this happening, there‚Äôs still yet to be an agreed definition of what exactly artificial intelligence is. Some argue deep learning can be considered AI, others will say it‚Äôs not AI unless it passes the Turing Test. This lack of definition really stunted my progress in the beginning. It was hard to learn something which had so many different definitions. Enough with the definitions. My friends and I were building a web startup. It failed. We gave up due to a lack of meaning. But along the way, I was starting to hearing more and more about ML and AI. ‚ÄúThe computer learns things for you?‚Äù I couldn‚Äôt believe it. I stumbled across Udacity‚Äôs Deep Learning Nanodegree. A fun character called Siraj Raval was in one of the promo videos. His energy was contagious. Despite not meeting the basic requirements (I had never written a line of Python before), I signed up. 3 weeks before the course start date I emailed Udacity support asking what the refund policy was. I was scared I wouldn‚Äôt be able to complete the course. I didn‚Äôt get a refund. I completed the course within the designated timeline. It was hard. Really hard at times. My first two projects were handed in four days late. But the excitement of being involved in one of the most important technologies in the world drove me forward. Finishing the Deep Learning Nanodegree, I had guaranteed acceptance into either Udacity‚Äôs AI Nanodegree, Self-Driving Car Nanodegree or Robotics Nanodegree. All great options. I was lost again. The classic. ‚ÄúWhere do I go next?‚Äù I needed a curriculum. I‚Äôd built a foundation with the Deep Learning Nanodegree, now it was time to figure out what was next. I didn‚Äôt plan on going back to university anytime soon. I didn‚Äôt have $100,000 for a proper Masters Degree anyway. So I did what I did in the beginning. Asked my mentor, Google, for help. I‚Äôd jumped into deep learning without any prior knowledge of the field. Instead of climbing to the tip of the AI iceberg, a helicopter had dropped me off on the top. After researching a bunch of courses, I put a list of which ones interested me the most in Trello. I knew online courses had a high drop out rate. I wasn‚Äôt going to let myself be a part of this number. I had a mission. To make myself accountable, I started sharing my learning journey online. I figured I could practice communicating what I learned plus find other people who were interested in the same things I was. My friends still think I‚Äôm an alien when I go on one of my AI escapades. I made the  Trello board public  and wrote a blog post about my endeavours. The curriculum has changed slightly since I first wrote it but it‚Äôs still relevant. I‚Äôd visit the Trello board multiple times per week to track my progress. I‚Äôm Australian. And all the commotion seemed to be happening in the US. So I did the most logical thing and bought a one-way ticket. I‚Äôd been studying for a year and I figured it was about time I started putting my skills into practice. My plan was to rock up to the US and get hired. Then Ashlee messaged me on LinkedIn, ‚ÄúHey I‚Äôve seen your posts and they‚Äôre really cool, I think you should meet Mike.‚Äù I met Mike. I told him my story of learning online, how I loved healthtech and my plans to go to the US. ‚ÄúYou may be better off staying here a year or so and seeing what you can find, I‚Äô think you‚Äôd love to meet Cameron.‚Äù I met Cameron. We had a similar chat what Mike and I talked about. Health, tech, online learning, US. ‚ÄúWe‚Äôre working on some health problems, why don‚Äôt you come in on Thursday?‚Äù Thursday came. I was nervous. But someone once told me being nervous is the same as being excited. I flipped to being excited. I spent the day meeting the  Max Kelsen  team and the problems they were working on. Two Thursday‚Äôs later, Nick, the CEO, Athon, lead machine learning engineer, and I went for coffee. ‚ÄúHow would you like to join the team?‚Äù Asked Nick. ‚ÄúSure,‚Äù I said. My US flight got pushed back a couple of months and I purchased a return ticket. Learning online, I knew it was unconventional. All the roles I‚Äôd gone to apply for had Masters Degree requirements or at least some kind of technical degree. I didn‚Äôt have either of these. But I did have the skills I‚Äôd gathered from a plethora of online courses. Along the way, I was sharing my work online. My GitHub contained all the projects I‚Äôd done, my LinkedIn was stacked out and I‚Äôd practised communicating what I learned through YouTube and articles on Medium. I never handed in a resume for Max Kelsen. ‚ÄúWe saw your LinkedIn profile.‚Äù My body of work was my resume. Regardless if you‚Äôre learning online or through a Masters Degree, having a portfolio of what you‚Äôve worked on is a great way to build skin in the game. ML and AI skills are in demand but that doesn‚Äôt mean you don‚Äôt have to showcase them. Even the best product won‚Äôt sell without any shelf space. Whether it be GitHub, Kaggle, LinkedIn or a blog, have somewhere where people can find you. Plus, having your own corner of the internet is great fun. Where do you go to learn these skills? What courses are the best? There‚Äôs no best answer. Everyone‚Äôs path will be different. Some people learn better with books, others learn better through videos. What‚Äôs more important than how you start is why you start. Start with why. Why do you want to learn these skills? Do you want to make money? Do you want to build things? Do you want to make a difference? There‚Äôs no right reason. All are valid in their own way. Start with why because having a why is more important than how. Having a why means when it gets hard and it  will  get hard, you‚Äôve got something to turn to. Something to remind you why you started. Got a why? Good. Time for some hard skills. I can only recommend what I‚Äôve tried. I‚Äôve completed courses from (in order): They‚Äôre all world-class. I‚Äôm a visual learner. I learn better seeing things being done. All of these courses do that. If you‚Äôre an absolute beginner, start with some introductory Python courses and when you‚Äôre a bit more confident, move into data science, machine learning and AI. DataCamp is great for beginners learning Python but wanting to learn it with a data science and machine learning focus. The highest level of math education I‚Äôve had was in high school. The rest I‚Äôve learned through Khan Academy as I‚Äôve needed it. There are many different opinions on how much math you need to know to get into machine learning and AI. I‚Äôll share mine. If you want to apply machine learning and AI techniques to a problem, you don‚Äôt necessarily need an in-depth understanding of the math to get a good result. Libraries such as TensorFlow and PyTorch allow someone with a bit of Python experience to build state of the art models whilst the math is taken care of behind the scenes. If you‚Äôre looking to get deep into machine learning and AI research, through means of a PhD program or something similar, having an in-depth knowledge of the math is paramount. In my case, I‚Äôm not looking to dive deep into the math and improve an algorithm‚Äôs performance by 10%. I‚Äôll leave that to people smarter than me. Instead, I‚Äôm more than happy to use the libraries available and manipulate them to help solve problems as I see fit. What a machine engineer does in practice might not be what you think. Despite the cover photos of many online articles, it doesn‚Äôt always involve working with robots that have red eyes. Here are a few questions a machine learning engineer has to ask themselves daily. I borrowed these from a  great article  by Rachel Thomas, one of the co-founders of  fast.ai , she goes into more depth in the full text. For more, I made a video of what we usually get up to on Monday‚Äôs at Max Kelsen. There‚Äôs no right or wrong way to get into ML or AI (or anything else). The beautiful thing about this field is we have access to some of the best technologies in the world, all we‚Äôve got to do is learn how to use them. You could begin by learning Python code (my favourite). You could begin by studying calculus and statistics. You could begin by learning about the philosophy of decision making. Machine learning and AI fascinate me because they meet at the intersection of all of these. The more I learn about it, the more I realise there‚Äôs plenty more to learn. And it gets me excited. Sometimes I get frustrated when my code doesn‚Äôt run. Or I don‚Äôt understand a concept. So I give up temporarily. I give up by letting myself walk away from the problem and take a nap. Or go for a walk. When I come back it feels like I‚Äôm looking at it with different eyes. The excitement comes back. I keep learning. I tell myself. I‚Äôm a learning machine. There‚Äôs so much happening in the field it can be daunting to get started. Too many options lead to no options. Ignore this. Start wherever interests you most and follow it. If it leads to a dead end, great, you‚Äôve figured out what you‚Äôre not interested in. Retrace your steps and take the other fork in the road instead. Computers are smart but they still can‚Äôt learn on their own. They need your help."
Machine Learning is Fun! Part 2,achine Learning is Fun! Part ,"Update:  This article is part of a series. Check out the full series:  Part 1 ,  Part 2 ,  Part 3 ,  Part 4 ,  Part 5 ,  Part 6 ,  Part 7  and  Part 8 !  You can also read this article in  Italiano ,  Espa√±ol ,  Fran√ßais ,  T√ºrk√ße ,  –†—É—Å—Å–∫–∏–π ,  ÌïúÍµ≠Ïñ¥  Portugu√™s ,  ŸÅÿßÿ±ÿ≥€å ,  Ti·∫øng Vi·ªát   or  ÊôÆÈÄöËØù . Giant update:   I‚Äôve written a new book based on these articles ! It not only expands and updates all my articles, but it has tons of brand new content and lots of hands-on coding projects.  Check it out now ! In  Part 1 , we said that Machine Learning is using generic algorithms to tell you something interesting about your data without writing any code specific to the problem you are solving. (If you haven‚Äôt already read  part 1 , read it now!). This time, we are going to see one of these generic algorithms do something really cool  ‚Äî  create video game levels that look like they were made by humans. We‚Äôll build a neural network, feed it existing Super Mario levels and watch new ones pop out! Just like  Part 1 , this guide is for anyone who is curious about machine learning but has no idea where to start. The goal is be accessible to anyone ‚Äî which means that there‚Äôs a lot of generalizations and we skip lots of details. But who cares? If this gets anyone more interested in ML, then mission accomplished. Back in  Part 1 , we created a simple algorithm that estimated the value of a house based on its attributes. Given data about a house like this: We ended up with this simple estimation function: In other words, we estimated the value of the house by multiplying each of its attributes by a  weight . Then we just added those numbers up to get the house‚Äôs value. Instead of using code, let‚Äôs represent that same function as a simple diagram: However this algorithm only works for simple problems where the result has a  linear  relationship with the input. What if the truth behind house prices isn‚Äôt so simple? For example, maybe the neighborhood matters a lot for big houses and small houses but doesn‚Äôt matter at all for medium-sized houses. How could we capture that kind of complicated detail in our model? To be more clever, we could run this algorithm multiple times with different of weights that each capture different edge cases: Now we have four different price estimates. Let‚Äôs combine those four price estimates into one final estimate. We‚Äôll run them through the same algorithm again (but using another set of weights)! Our new  Super Answer  combines the estimates from our four different attempts to solve the problem. Because of this, it can model more cases than we could capture in one simple model. Let‚Äôs combine our four attempts to guess into one big diagram: This is a neural network! Each node knows how to take in a set of inputs, apply weights to them, and calculate an output value. By chaining together lots of these nodes, we can model complex functions. There‚Äôs a lot that I‚Äôm skipping over to keep this brief (including  feature scaling  and the  activation function ), but the most important part is that these basic ideas  click: It‚Äôs just like LEGO! We can‚Äôt model much with one single LEGO block, but we can model anything if we have enough basic LEGO blocks to stick together: The neural network we‚Äôve seen always returns the same answer when you give it the same inputs. It has no memory. In programming terms, it‚Äôs a  stateless algorithm . In many cases (like estimating the price of house), that‚Äôs exactly what you want. But the one thing this kind of model can‚Äôt do is respond to patterns in data over time. Imagine I handed you a keyboard and asked you to write a story. But before you start, my job is to guess the very first letter that you will type. What letter should I guess? I can use my knowledge of English to increase my odds of guessing the right letter. For example, you will probably type a letter that is common at the beginning of words. If I looked at stories you wrote in the past, I could narrow it down further based on the words you usually use at the beginning of your stories. Once I had all that data, I could use it to build a neural network to model how likely it is that you would start with any given letter. Our model might look like this: But let‚Äôs make the problem harder. Let‚Äôs say I need to guess the  next  letter you are going to type at any point in your story. This is a much more interesting problem. Let‚Äôs use the first few words of Ernest Hemingway‚Äôs  The Sun Also Rises  as an example: Robert Cohn was once middleweight boxi What letter is going to come next? You probably guessed ‚Äôn‚Äô ‚Äî the word is probably going to be  boxing . We know this based on the letters we‚Äôve already seen in the sentence and our knowledge of common words in English. Also, the word ‚Äòmiddleweight‚Äô gives us an extra clue that we are talking about boxing. In other words, it‚Äôs easy to guess the next letter if we take into account the sequence of letters that came right before it and combine that with our knowledge of the rules of English. To solve this problem with a neural network, we need to add  state  to our model. Each time we ask our neural network for an answer, we also save a set of our intermediate calculations and re-use them the next time as part of our input. That way, our model will adjust its predictions based on the input that it has seen recently. Keeping track of state in our model makes it possible to not just predict the most likely  first  letter in the story, but to predict the most likely  next  letter given all previous letters. This is the basic idea of a  Recurrent  Neural Network. We are updating the network each time we use it. This allows it to update its predictions based on what it saw most recently. It can even model patterns over time as long as we give it enough of a memory. Predicting the next letter in a story might seem pretty useless. What‚Äôs the point? One cool use might be auto-predict for a mobile phone keyboard: But what if we took this idea to the extreme? What if we asked the model to predict the next most likely character over and over ‚Äî forever? We‚Äôd be asking it to write a complete story for us! We saw how we could guess the next letter in Hemingway‚Äôs sentence. Let‚Äôs try generating a whole story in the style of Hemingway. To do this, we are going to use the  Recurrent Neural Network implementation  that  Andrej Karpathy  wrote. Andrej is a Deep-Learning researcher at Stanford and he wrote  an excellent introduction to generating text with RNNs , You can view all the  code for the model on github . We‚Äôll create our model from the complete text of  The Sun Also Rises ‚Äî  362,239 characters using 84 unique letters (including punctuation, uppercase/lowercase, etc). This data set is actually really small compared to typical real-world applications. To generate a really good model of Hemingway‚Äôs style, it would be much better to have at several times as much sample text. But this is good enough to play around with as an example. As we just start to train the RNN, it‚Äôs not very good at predicting letters. Here‚Äôs what it generates after a 100 loops of training: hjCTCnhoofeoxelif edElobe negnk e iohehasenoldndAmdaI ayio pe e h‚Äôe btentmuhgehi bcgdltt. gey heho grpiahe. Ddelnss.eelaishaner‚Äù cot AAfhB ht ltny ehbih a‚Äùon bhnte ectrsnae abeahngy amo k ns aeo?cdse nh a taei.rairrhelardr er deffijha You can see that it has figured out that sometimes words have spaces between them, but that‚Äôs about it. After about 1000 iterations, things are looking more promising: hing soor ither. And the caraos, and the crowebel for figttier and ale the room of me? Streat was not to him Bill-stook of the momansbed mig out ust on the bull, out here. I been soms inick stalling that aid.  ‚ÄúHon‚Äôt me and acrained on .Hw‚Äôs don‚Äôt you for the roed,‚Äù In‚Äôs pair.‚Äù  ‚ÄúAlough marith him.‚Äù The model has started to identify the patterns in basic sentence structure. It‚Äôs adding periods at the ends of sentences and even quoting dialog. A few words are recognizable, but there‚Äôs also still a lot of nonsense. But after several thousand more training iterations, it looks pretty good: He went over to the gate of the caf√©. It was like a country bed.  ‚ÄúDo you know it‚Äôs been me.‚Äù  ‚ÄúDamned us,‚Äù Bill said.  ‚ÄúI was dangerous,‚Äù I said. ‚ÄúYou were she did it and think I would a fine cape you,‚Äù I said.  ‚ÄúI can‚Äôt look strange in the cab.‚Äù  ‚ÄúYou know I was this is though,‚Äù Brett said.  ‚ÄúIt‚Äôs a fights no matter?‚Äù  ‚ÄúIt makes to do it.‚Äù  ‚ÄúYou make it?‚Äù  ‚ÄúSit down,‚Äù I said. ‚ÄúI wish I wasn‚Äôt do a little with the man.‚Äù  ‚ÄúYou found it.‚Äù  ‚ÄúI don‚Äôt know.‚Äù  ‚ÄúYou see, I‚Äôm sorry of chatches,‚Äù Bill said. ‚ÄúYou think it‚Äôs a friend off back and make you really drunk.‚Äù At this point, the algorithm has captured the basic pattern of Hemingway‚Äôs short, direct dialog. A few sentences even sort of make sense. Compare that with some real text from the book: There were a few people inside at the bar, and outside, alone, sat Harvey Stone. He had a pile of saucers in front of him, and he needed a shave.  ‚ÄúSit down,‚Äù said Harvey, ‚ÄúI‚Äôve been looking for you.‚Äù  ‚ÄúWhat‚Äôs the matter?‚Äù  ‚ÄúNothing. Just looking for you.‚Äù  ‚ÄúBeen out to the races?‚Äù  ‚ÄúNo. Not since Sunday.‚Äù  ‚ÄúWhat do you hear from the States?‚Äù  ‚ÄúNothing. Absolutely nothing.‚Äù  ‚ÄúWhat‚Äôs the matter?‚Äù Even by only looking for patterns  one character at a time , our algorithm has reproduced plausible-looking prose with proper formatting. That is kind of amazing! We don‚Äôt have to generate text completely from scratch, either. We can seed the algorithm by supplying the first few letters and just let it find the next few letters. For fun, let‚Äôs make a fake book cover for our imaginary book by generating a new author name and a new title using the seed text of ‚ÄúEr‚Äù, ‚ÄúHe‚Äù, and ‚ÄúThe S‚Äù: Not bad! But the  really mind-blowing part  is that this algorithm can figure out patterns in any sequence of data. It can easily generate real-looking  recipes  or  fake Obama speeches . But why limit ourselves human language? We can apply this same idea to any kind of sequential data that has a pattern. In 2015, Nintendo released  Super Mario Maker‚Ñ¢  for the Wii U gaming system. This game lets you draw out your own Super Mario Brothers levels on the gamepad and then upload them to the internet so you friends can play through them. You can include all the classic power-ups and enemies from the original Mario games in your levels. It‚Äôs like a virtual LEGO set for people who grew up playing Super Mario Brothers. Can we use the same model that generated fake Hemingway text to generate fake Super Mario Brothers levels? First, we need a data set for training our model. Let‚Äôs take all the outdoor levels from the original Super Mario Brothers game released in 1985: This game has 32 levels and about 70% of them have the same outdoor style. So we‚Äôll stick to those. To get the designs for each level, I took an original copy of the game and wrote a program to pull the level designs out of the game‚Äôs memory. Super Mario Bros. is a 30-year-old game and there are lots of resources online that help you figure out how the levels were stored in the game‚Äôs memory. Extracting level data from an old video game is a fun programming exercise that you should try sometime. Here‚Äôs the first level from the game (which you probably remember if you ever played it): If we look closely, we can see the level is made of a simple grid of objects: We could just as easily represent this grid as a sequence of characters with one character representing each object: We‚Äôve replaced each object in the level with a letter: ‚Ä¶and so on, using a different letter for each different kind of object in the level. I ended up with text files that looked like this: Looking at the text file, you can see that Mario levels don‚Äôt really have much of a pattern if you read them line-by-line: The patterns in a level really emerge when you think of the level as a series of columns: So in order for the algorithm to find the patterns in our data, we need to feed the data in column-by-column. Figuring out the most effective representation of your input data (called  feature selection ) is one of the keys of using machine learning algorithms well. To train the model, I needed to rotate my text files by 90 degrees. This made sure the characters were fed into the model in an order where a pattern would more easily show up: Just like we saw when creating the model of Hemingway‚Äôs prose, a model improves as we train it. After a little training, our model is generating junk: It sort of has an idea that ‚Äò-‚Äôs and ‚Äò=‚Äôs should show up a lot, but that‚Äôs about it. It hasn‚Äôt figured out the pattern yet. After several thousand iterations, it‚Äôs starting to look like something: The model has almost figured out that each line should be the same length. It has even started to figure out some of the logic of Mario: The pipes in mario are always two blocks wide and at least two blocks high, so the ‚ÄúP‚Äùs in the data should appear in 2x2 clusters. That‚Äôs pretty cool! With a lot more training, the model gets to the point where it generates perfectly valid data: Let‚Äôs sample an entire level‚Äôs worth of data from our model and rotate it back horizontal: This data looks great! There are several awesome things to notice: Finally, let‚Äôs take this level and recreate it in Super Mario Maker: Play it yourself! If you have Super Mario Maker, you can play this level by  bookmarking it online  or by looking it up using level code  4AC9‚Äì0000‚Äì0157-F3C3 . The recurrent neural network algorithm we used to train our model is the same kind of algorithm used by real-world companies to solve hard problems like speech detection and language translation. What makes our model a ‚Äòtoy‚Äô instead of cutting-edge is that our model is generated from very little data. There just aren‚Äôt enough levels in the original Super Mario Brothers game to provide enough data for a really good model. If we could get access to the hundreds of thousands of user-created Super Mario Maker levels that Nintendo has, we could make an amazing model. But we can‚Äôt ‚Äî because Nintendo won‚Äôt let us have them. Big companies don‚Äôt give away their data for free. As machine learning becomes more important in more industries, the difference between a good program and a bad program will be how much data you have to train your models. That‚Äôs why companies like Google and Facebook need your data so badly! For example, Google recently open sourced  TensorFlow , its software toolkit for building large-scale machine learning applications. It was a pretty big deal that Google gave away such important, capable technology for free. This is the same stuff that powers Google Translate. But without Google‚Äôs massive trove of data in every language, you can‚Äôt create a competitor to Google Translate. Data is what gives Google its edge. Think about that the next time you open up your  Google Maps Location History  or  Facebook Location History  and notice that it stores every place you‚Äôve ever been. In machine learning, there‚Äôs never a single way to solve a problem. You have limitless options when deciding how to pre-process your data and which algorithms to use. Often  combining multiple approaches  will give you better results than any single approach. Readers have sent me links to other interesting approaches to generating Super Mario levels: If you liked this article, please consider  signing up for my Machine Learning is Fun! email list . I‚Äôll only email you when I have something new and awesome to share. It‚Äôs the best way to find out when I write more articles like this. You can also follow me on Twitter at  @ageitgey ,  email me directly  or  find me on linkedin . I‚Äôd love to hear from you if I can help you or your team with machine learning. Now continue on to  Machine Learning is Fun Part 3 !"
30 Amazing Machine Learning Projects for the Past Year (v.2018),0 Amazing Machine Learning Projects for the Past Year (v.2018,"For the past year , we‚Äôve compared nearly 8,800 open source Machine Learning projects to pick Top 30 (0.3% chance). This is an extremely competitive list and it carefully picks the best open source Machine Learning libraries, datasets and apps published between January and December 2017.  Mybridge AI  evaluates the quality by considering popularity, engagement and recency. To give you an idea about the quality, the average number of  Github stars is 3,558. Open source projects can be useful for data scientists. You can learn by reading the source code and build something on top of the existing projects. Give a plenty of time to play around with Machine Learning projects you may have missed for the past year. <Recommended Learning> A) Neural Networks Deep Learning A-Z‚Ñ¢: Hands-On Artificial Neural Networks [68,745 recommends, 4.5/5 stars] B) TensorFlow Complete Guide to TensorFlow for Deep Learning with Python [17,834 recommends, 4.6/5 stars] <Others> A) Web hosting : Get free domain name for a year. For your ‚Äòsimple‚Äô personal website or project site. (Click the numbers below. Credit given to the biggest contributor.) FastText: Library for fast text representation and classification.  [11786 stars on Github] . Courtesy of  Facebook Research ‚Ä¶‚Ä¶‚Ä¶.. [  Muse : Multilingual Unsupervised or Supervised word Embeddings, based on Fast Text. 695 stars on Github] Deep-photo-styletransfer: Code and data for paper ‚ÄúDeep Photo Style Transfer‚Äù  [9747 stars on Github] . Courtesy of Fujun Luan, Ph.D. at Cornell University The world‚Äôs simplest facial recognition api for Python and the command line  [8672 stars on Github] . Courtesy of  Adam Geitgey Magenta: Music and Art Generation with Machine Intelligence  [8113 stars on Github] . Sonnet: TensorFlow-based neural network library  [5731 stars on Github] . Courtesy of  Malcolm Reynolds  at Deepmind deeplearn.js: A hardware-accelerated machine intelligence library for the web  [5462 stars on Github] . Courtesy of Nikhil Thorat at Google Brain Fast Style Transfer in TensorFlow  [4843 stars on Github] . Courtesy of  Logan Engstrom  at MIT Pysc2: StarCraft II Learning Environment  [3683 stars on Github] . Courtesy of Timo Ewalds at DeepMind AirSim: Open source simulator based on Unreal Engine for autonomous vehicles from Microsoft AI & Research  [3861 stars on Github] . Courtesy of  Shital Shah  at Microsoft Facets: Visualizations for machine learning datasets  [3371 stars on Github] . Courtesy of Google Brain Style2Paints: AI colorization of images  [3310 stars on Github] . Tensor2Tensor: A library for generalized sequence to sequence models ‚Äî Google Research  [3087 stars on Github] . Courtesy of  Ryan Sepassi  at Google Brain Image-to-image translation in PyTorch (e.g. horse2zebra, edges2cats, and more)  [2847 stars on Github] . Courtesy of Jun-Yan Zhu, Ph.D at Berkeley Faiss: A library for efficient similarity search and clustering of dense vectors.  [2629 stars on Github] . Courtesy of Facebook Research Fashion-mnist: A MNIST-like fashion product database  [2780 stars on Github] . Courtesy of Han Xiao, Research Scientist  Zalando Tech ParlAI: A framework for training and evaluating AI models on a variety of openly available dialog datasets  [2578 stars on Github] . Courtesy of Alexander Miller at  Facebook Research Fairseq: Facebook AI Research Sequence-to-Sequence Toolkit  [2571 stars on Github] . Pyro: Deep universal probabilistic programming with Python and PyTorch  [2387 stars on Github] . Courtesy of Uber AI Labs iGAN: Interactive Image Generation powered by GAN  [2369 stars on Github] . Deep-image-prior: Image restoration with neural networks but without learning  [2188 stars on Github] . Courtesy of Dmitry Ulyanov, Ph.D at Skoltech Face_classification: Real-time face detection and emotion/gender classification using fer2013/imdb datasets with a keras CNN model and openCV.  [1967 stars on Github] . Speech-to-Text-WaveNet : End-to-end sentence level English speech recognition using DeepMind‚Äôs WaveNet and tensorflow  [1961 stars on Github] . Courtesy of Namju Kim at Kakao Brain StarGAN: Unified Generative Adversarial Networks for Multi-Domain Image-to-Image Translation  [1954 stars on Github] . Courtesy of  Yunjey Choi  at Korea University Ml-agents: Unity Machine Learning Agents  [1658 stars on Github] . Courtesy of  Arthur Juliani , Deep Learning at Unity3D DeepVideoAnalytics: A distributed visual search and visual data analytics platform  [1494 stars on Github] . Courtesy of  Akshay Bhat , Ph.D at Cornell University OpenNMT: Open-Source Neural Machine Translation in Torch  [1490 stars on Github] . Pix2pixHD: Synthesizing and manipulating 2048x1024 images with conditional GANs  [1283 stars on Github] . Courtesy of  Ming-Yu Liu  at AI Research Scientist at Nvidia Horovod: Distributed training framework for TensorFlow.  [1188 stars on Github] . Courtesy of Uber Engineering AI-Blocks: A powerful and intuitive WYSIWYG interface that allows anyone to create Machine Learning models  [899 stars on Github] . Deep neural networks for voice conversion (voice style transfer) in Tensorflow  [845 stars on Github] . Courtesy of  Dabi Ahn , AI Research at Kakao Brain That‚Äôs it for Machine Learning Open Source of the Year. Visit  our publication   to find top posts for more programming skills."
Essential Math for Data Science,ssential Math for Data Scienc,"M athematics is the bedrock of any contemporary discipline of science. Almost all the techniques of modern data science, including machine learning, have a deep mathematical underpinning. It goes without saying that you will absolutely need all the other pearls of knowledge‚Äîprogramming‚Ä¶"
The best Mario Kart character according to data science,he best Mario Kart character according to data scienc,"Mario Kart was a staple of my childhood ‚Äî my friends and I would spend hours after school as Mario, Luigi, and other characters from the Nintendo universe racing around cartoonish tracks and lobbing pixelated bananas at each other. One thing that always vexed our little group of would-be speedsters was the question of which character was best. Some people swore by zippy Yoshi, others argued that big, heavy Bowser was the best option. Back then there were only eight options to choose from; fast forward to the current iteration of the Mario Kart franchise and the question is even more complicated because you can select different karts and tires to go with your character. My Mario Kart reflexes aren‚Äôt what they used to be, but I am better at data science than I was as a fourth grader, so in this post I‚Äôll use data to finally answer the question ‚ÄúWho is the best character in Mario Kart?‚Äù This is a tricky question because there are tons of potential character / kart / tire configurations now and they all have widely varying stats across a number of attributes. In general, it isn‚Äôt possible to optimize across multiple dimensions simultaneously, however some setups are undeniably worse than others. The question for an aspiring Mario Kart champion nowadays is ‚ÄúHow can I pick a character / kart / tire combination that is in some sense optimal, even if there isn‚Äôt one ‚Äòbest‚Äô option?‚Äù To answer this question we turn to one of Mario‚Äôs compatriots, the nineteenth century Italian economist Vilfredo Pareto who introduced the concept of  Pareto efficiency  and the related  Pareto frontier . The concept of Pareto efficiency applies to situations where there is a finite pool of resources and multiple competing outcomes that depend on how those resources are allocated. The ‚ÄúPareto efficient‚Äù allocations are those in which it‚Äôs impossible to improve one outcome without worsening another outcome. This is more easily explained with a picture (courtesy of  Wikipedia ). Each circle is a potential resource allocation, which in our case means a distribution of stat points across the different attributes like weight, handling, and traction (characters in Mario Kart have about the same number of total stat points, and differ only in their distribution). The position of each circle represents the outcome of that allocation on two competing dimensions, for example speed and acceleration. The allocations in red lie on the Pareto frontier: for each of these allocations, an improvement in one outcome requires a decrease in the other. Allocations in grey are not Pareto efficient because you can improve both outcomes with a different allocation of resources. Speed and acceleration are generally the two most important attributes in Mario Kart, so the goal of this analysis is to identify the character / kart / tire configurations that lie on the Pareto frontier for speed and acceleration. We‚Äôll start by examining the stats of each character, kart, and tire independently using some fan-compiled  data . One particular quirk of Mario Kart is that while there are a couple dozen characters, many of them have identical stats. From here on out, I‚Äôll refer to the character (or kart, or tire) class by the name of one of its members. For example, in the heatmap below the row labelled ‚ÄòPeach‚Äô also describes the stats for Daisy and Yoshi. The complete class memberships are listed at the end of the post in case you want to see where your favorite character lands. There are seven classes of characters. Let‚Äôs have a look at how their stats compare. The most obvious trend is the trade-off between speed and acceleration: heavy characters have good speed but poor acceleration, while light characters have snappy acceleration but a low top speed. There are variations in the other stats as well, but to a large extent, the speed and acceleration dominate the performance of a particular set up, so we‚Äôll be ignoring the rest of the stats. Karts and tires modify the base stats of the characters: the attributes of the final configuration are a sum of the character‚Äôs stats and the kart / tire modifiers. As with characters, there are dozens of karts and tires, but only a few categories with different stats. The trends here are less obvious, but they generally agree with what we saw in the character stats: improvements in speed come at the expense of acceleration, and vice versa. Our goal is to find all the configurations that have an optimal combination of speed and acceleration, so the next step is to compute the stats for each unique (character, kart, tire) combination. With a little bit of Python we can enumerate all character / kart / tire combinations and calculate their attributes by adding up the values in the figures above. Equipped with the statistics for each possible combination, we can can plot the speed vs. the acceleration of each possible setup, and identify those that lie on the Pareto frontier. According to the above chart, the optimal configurations make up a fairly small subset of the total possible setups. We can quantify this by counting all the different combinations (note that some combinations overlap in the figure). Just for fun, let‚Äôs also count up the possible combinations including all the characters, karts, and tires with identical stats. Possible combinations: 149760 Unique stat combinations: 294 Optimal combinations: 15 The optimal configurations make up just 5% of the potential unique stat configurations! Let‚Äôs have a look at what these optimal configurations look like. Unless you‚Äôre going all-in on acceleration, it looks like a heavy character is the way to go; the two heaviest character classes (Wario and Donkey Kong) account for 11/15 of the Pareto-optimal configurations. We can also look at the other main stats for each of these configurations. So there it is, if speed and acceleration are your main concerns, then one of these 15 configurations is your best bet. Sometimes an optimal configuration isn‚Äôt what you‚Äôre looking for though (say, because your roommate threatened to stop playing if there wasn‚Äôt some sort of handicap, to choose a random example). In that case, we can explore all the possible configurations with a quick  bokeh  interactive graphic. A few observations: If you‚Äôd like to see the code behind this analysis you can find it  here . And finally, in case you have a particular attachment to one of the characters (or karts / tires) you can look up which class he / she / it belongs to below. Character Classes ***************** - Baby Mario, Baby Luigi, Baby Peach, Baby Daisy, Baby Rosalina, Lemmy Koopa, Mii Light - Toad, Shy Guy, Koopa Troopa, Lakitu, Wendy Koopa, Larry Koopa, Toadette - Peach, Daisy, Yoshi - Mario, Luigi, Iggy Koopa, Ludwig Koopa, Mii Medium - Donkey Kong, Waluigi, Rosalina, Roy Koopa - Metal Mario, Pink Gold Peach - Wario, Bowser, Morton Koopa, Mii Heavy Body Classes ***************** - Standard Kart, Prancer, Cat Cruiser, Sneeker, The Duke, Teddy Buggy - Gold Standard, Mach 8, Circuit Special, Sports Coupe - Badwagon, TriSpeeder, Steel Driver, Standard ATV - Biddybuggy, Landship, Mr. Scooty - Pipe Frame, Standard Bike, Flame Ride, Varmit, Wild Wiggler - Sports Bike, Jet Bike, Comet, Yoshi Bike Tire Classes ***************** - Standard, Blue Standard, Offroad, Retro Offroad - Monster, Hot Monster - Slick, Cyber Slick - Roller, Azure Roller, Button - Slim, Crimson Slim - Metal, Gold - Wood, Sponge, Cushion"
"If you want to learn Data Science, start with one of these programming classes","f you want to learn Data Science, start with one of these programming classe","A year ago, I was a numbers geek with no coding background. After trying an online programming course, I was so inspired that I enrolled in one of the best computer science programs in Canada. Two weeks later, I realized that I could learn everything I needed through edX, Coursera, and Udacity instead. So I dropped out. The decision was not difficult. I could learn the content I wanted to faster, more efficiently, and for a fraction of the cost. I already had a university degree and, perhaps more importantly, I already had the university experience. Paying $30K+ to go back to school seemed irresponsible. I started creating my own  data science master‚Äôs degree  using online courses shortly afterwards, after realizing it was a better fit for me than computer science. I scoured the introduction to programming landscape. I‚Äôve already taken several courses and audited portions of many others. I know the options, and what skills are needed if you‚Äôre targeting a data analyst or data scientist role. For this guide, I spent 20+ hours trying to find every single online introduction to programming course offered as of August 2016, extracting key bits of information from their syllabi and reviews, and compiling their ratings. For this task, I turned to none other than the open source Class Central community and its database of thousands of course ratings and reviews. Since 2011,  Class Central  founder  Dhawal Shah  has kept a closer eye on online courses than arguably anyone else in the world. Dhawal personally helped me assemble this list of resources. Hey, it‚Äôs David. I wrote this guide back in 2016. Since then, I‚Äôve become a professional data analyst and created courses for multiple industry-leading online education companies. Do you want to become a data analyst, without spending 4 years and $41,762 to go to university? Follow my latest  27-day curriculum  and learn alongside other aspiring data pros.  My top programming course recommendation for 2023 is in there, too. datamaverickhq.com Okay, back to the guide. Each course had to fit four criteria: We believe we covered every notable course that exists and which fits the above criteria. Since there are seemingly hundreds of courses on Udemy in Python and R, we chose to consider the most reviewed and highest rated ones only. There is a chance we missed something, however. Please let us know if you think that is the case. We compiled average rating and number of reviews from Class Central and other review sites. We calculated a weighted average rating for each course. If a series had multiple courses (like Rice University‚Äôs  Part 1  and  Part 2 ), we calculated the weighted average rating across all courses. We also read text reviews and used this feedback to supplement the numerical ratings. We made subjective syllabus judgment calls based on three factors: Programming is not computer science and vice versa. There is a difference of which beginners may not be acutely aware. Borrowing  this answer  from Programmers Stack Exchange: Computer science is the study of what computers [can] do; programming is the practice of making computers do things. The course we are looking for introduces  programming  and optionally touches on relevant aspects of computer science that would benefit a new programmer in terms of awareness. Many of the courses considered, you‚Äôll notice, do indeed have a computer science portion. None of the courses, however, are strictly computer science courses, which is why something like  Harvard‚Äôs CS50x  on edX is excluded. University of Toronto‚Äôs ‚ÄúLearn to Program‚Äù series on Coursera.  LTP1: The Fundamentals  and  LTP2: Crafting Quality Code  have a near-perfect weighted average rating of 4.71 out of 5 stars over 284 reviews. They also have a great mix of content difficulty and scope for the beginner data scientist. This free, Python-based introduction to programming sets itself apart from the other 20+ courses we considered. Jennifer Campbell and Paul Gries, two associate professors in the University of Toronto‚Äôs department of computer science (which is regarded as  one of the best in the world ) teach the series. The self-paced, self-contained Coursera courses match the material in their book, ‚Äú Practical Programming: An Introduction to Computer Science Using Python 3 .‚Äù LTP1 covers 40‚Äì50% of the book and LTP2 covers another 40%. The 10‚Äì20% not covered is not particularly useful for data science, which helped their case for being our pick. The professors kindly and promptly sent me detailed course syllabi upon request, which were difficult to find online prior to the course‚Äôs official restart in September 2016. Learn to Program: The Fundamentals (LTP1) Timeline: 7 weeks Estimated time commitment: 6‚Äì8 hours per week This course provides an introduction to computer programming intended for people with no programming experience. It covers the basics of programming in Python including elementary data types (numeric types, strings, lists, dictionaries, and files), control flow, functions, objects, methods, fields, and mutability. Modules Learn to Program: Crafting Quality Code (LTP2) Timeline: 5 weeks Estimated time commitment: 6‚Äì8 hours per week You know the basics of programming in Python: elementary data types (numeric types, strings, lists, dictionaries, and files), control flow, functions, objects, methods, fields, and mutability.  You need to be good at these in order to succeed in this course. LTP: Crafting Quality Code  covers the next steps: designing larger programs, testing your code so that you know it works, reading code in order to understand how efficient it is, and creating your own types. Modules Associate professor Gries also provided the following commentary on the course structure: ‚ÄúEach module has between about 45 minutes to a bit more than an hour of video. There are in-video quiz questions, which will bring the total time spent studying the videos to perhaps 2 hours.‚Äù These videos are generally shorter than ten minutes each. He continued: ‚ÄúIn addition, we have one exercise (a dozen or two or so multiple choice and short-answer questions) per module, which should take an hour or two. There are three programming assignments in LTP1, each of which might take four to eight hours of work. There are two programming assignments in LTP2 of similar size.‚Äù He emphasized that the estimate of 6‚Äì8 hours per week is a rough guess: ‚ÄúEstimating time spent is incredibly student-dependent, so please take my estimates in that context. For example, someone who knows a bit of programming, perhaps in another programming language, might take half the time of someone completely new to programming. Sometimes someone will get stuck on a concept for a couple of hours, while they might breeze through on other concepts ‚Ä¶ That‚Äôs one of the reasons the self-paced format is so appealing to us.‚Äù In total, the University of Toronto‚Äôs  Learn to Program  series runs an estimated 12 weeks at 6‚Äì8 hours per week, which is about standard for most online courses created by universities. If you prefer to binge-study your MOOCs, that‚Äôs 72‚Äì96 hours, which could feasibly be completed in two to three weeks, especially if you have a bit of programming experience. If you already have some familiarity with programming, and don‚Äôt mind a syllabus that has a notable skew towards games and interactive applications, I would also recommend Rice University‚Äôs An Introduction to Interactive Programming in Python ( Part 1  and  Part 2 ) on Coursera. With 6,000+ reviews and the highest weighted average rating of 4.93/5 stars, this popular course is noted for its engaging videos, challenging quizzes, and enjoyable mini projects. It‚Äôs slightly more difficult, and focuses less on the fundamentals and more on topics that aren‚Äôt applicable in data science than our #1 pick. These courses are also part of the 7 course  Principles in Computing Specialization  on Coursera. The materials are self-paced and free, and a paid certificate is available. The course must be purchased for $79 (USD) for access to graded materials. The condensed course description and full syllabus are as follows: ‚ÄúThis two-part course is designed to help students with very little or no computing background learn the basics of building simple interactive applications ‚Ä¶ To make learning Python easy, we have developed a new browser-based programming environment that makes developing interactive applications in Python simple. These applications will involve windows whose contents are graphical and respond to buttons, the keyboard, and the mouse. Recommended background: A knowledge of high school mathematics is required.  While the class is designed for students with no prior programming experience, some beginning programmers have viewed the class as being fast-paced . For students interested in some light preparation prior to the start of class, we recommend a self-paced Python learning site such as codecademy.com.‚Äù Timeline: 5 weeks Estimated time commitment: 7‚Äì10 hours per week Week 0 ‚Äî statements, expressions, variables   Understand the structure of this class, and explore Python as a calculator. Week 1 ‚Äî functions, logic, conditionals  Learn the basic constructs of Python programming, and create a program that plays a variant of Rock-Paper-Scissors. Week 2 ‚Äî event-driven programming, local/global variables  Learn the basics of event-driven programming, understand the difference between local and global variables, and create an interactive program that plays a simple guessing game. Week 3 ‚Äî canvas, drawing, timers  Create a canvas in Python, learn how to draw on the canvas, and create a digital stopwatch. Week 4 ‚Äî lists, keyboard input, the basics of modeling motion  Learn the basics of lists in Python, model moving objects in Python, and recreate the classic arcade game ‚ÄúPong.‚Äù Week 5 ‚Äî mouse input, list methods, dictionaries   Read mouse input, learn about list methods and dictionaries, and draw images.   Week 6 ‚Äî classes and object-oriented programming   Learn the basics of object-oriented programming in Python using classes, and work with tiled images. Week 7 ‚Äî basic game physics, sprites   Understand the math of acceleration and friction, work with sprites, and add sound to your game. Week 8 ‚Äî sets and animation   Learn about sets in Python, compute collisions between sprites, and animate sprites. If you are set on an introduction to programming course in R, we recommend DataCamp‚Äôs series of R courses:  Introduction to R ,  Intermediate R ,  Intermediate R ‚Äî Practice , and  Writing Functions in R . Though the latter three come at a price point of $25/month, DataCamp is best in category for covering the programming fundamentals and R-specific topics, which is reflected in its average rating of 4.29/5 stars. We believe the best approach to learning programming for data science using  online courses   is to do it first through Python. Why? There is a lack of MOOC options that teach core programming principles and use R as the language of instruction. We found six such R courses that fit our testing criteria, compared to twenty-two Python-based courses. Most of the R courses didn‚Äôt receive great ratings and failed to meet most of our subjective testing criteria. The series breakdown is as follows: Estimated time commitment: 4 hours Chapters: Estimated time commitment: 6 hours Chapters: Estimated time commitment: 4 hours This follow-up course on intermediate R does not cover new programming concepts. Instead, you will strengthen your knowledge of the topics in intermediate R with a bunch of new and fun exercises. Estimated time commitment: 4 hours Chapters: Another option for R would be to take a Python-based introduction to programming course to cover the fundamentals of programming, and then pick up R syntax with an R basics course. This is what I did, but I did it with Udacity‚Äôs  Data Analysis with R . It worked well for me. You can also pick up R with our  top recommendation for a statistics class , which teaches the basics of R through coding up stats problems. Our #1 and #2 picks had a 4.71 and 4.93 star weighted average rating over 284 and 6,069 reviews, respectively. Let‚Äôs look at the other alternatives. This is the first of a six-piece series that covers the best MOOCs for launching yourself into the data science field. It will cover several other data science core competencies:  statistics , the  data science process , data visualization, and machine learning. medium.freecodecamp.com medium.freecodecamp.com The final piece will be a summary of those courses, and the best MOOCs for other key topics such as data wrangling, databases, and even software engineering. If you‚Äôre looking for a complete list of Data Science MOOCs, you can find them on Class Central‚Äôs  Data Science and Big Data  subject page. If you enjoyed reading this, check out some of  Class Central ‚Äôs other pieces: medium.freecodecamp.com medium.freecodecamp.com If you have suggestions for courses I missed, let me know in the responses! If you found this helpful, click the üíö so more people will see it here on Medium. This is a condensed version of the  original article published on Class Central , where course descriptions, syllabi, and multiple reviews are included."
How To Learn Data Science If You‚Äôre Broke,ow To Learn Data Science If You‚Äôre Brok,"Over the last year, I taught myself data science. I learned from hundreds of online resources and studied 6‚Äì8 hours every day. All while working for minimum wage at a day-care. My goal was to start a career I was passionate about, despite my lack of funds. Because of this choice I have accomplished a lot over the last few months. I published my own  website , was posted in a major online data science  publication , and was given scholarships to a competitive computer science graduate  program . In the following article, I give guidelines and advice so you can make your own data science curriculum. I hope to give others the tools to begin their own educational journey. So they can begin to work towards a more passionate career in data science. When I say ‚Äúdata science‚Äù, I am referring to the collection of tools that turn data into real-world actions. These include machine learning, database technologies, statistics, programming, and domain-specific technologies. The internet is a chaotic mess. Learning from it can often feel like drinking from the fun end of a fire-hose. There are simpler alternatives that offer to sort the mess for you. Sites like  Dataquest ,  DataCamp , and  Udacity  all offer to teach you data science skills. Each creating an education program that shepherds you from topic to topic. Each requires little course-planning on your part. The problem? They cost too much, they don‚Äôt teach you how to apply concepts in a job setting, and they prevent you from exploring your own interests and passions. There are free alternatives like  edX  and  coursera  which offer one-off courses diving into specific topics. If you learn well from videos or a classroom setting, these are excellent ways to learn data science. Check out this  website  for a listing of available data science courses. There are also a few free course curricula you can use. Check out  David Venturi ‚Äôs post, or the  Open Source DS Masters  (a more traditional education plan). If you learn well from reading, look at the  Data Science From Scratch  book. This textbook is a full learning plan that can be supplemented with online resources. You can find the full book online or get a physical copy from  Amazon  ($27). These are just a few of the free resources that provide a detailed learning path for data science. There are many more. To better understand the skills you need to acquire on your educational journey, in the next section I detail a broader curriculum guideline. This is intended to be high-level, and not just a list of courses to take or books to read. Programming is a fundamental skill of data scientists. Get comfortable with the syntax of Python. Understand how to run a python program in many different ways. (Jupyter notebook vs. command line vs IDE) I took about a month to review the  Python docs , the  Hitchhiker‚Äôs Guide to Python , and coding challenges on  CodeSignal . Hint: Keep an ear out for common problem-solving techniques used by programmers. (pronounced ‚Äúalgorithms‚Äù) A prerequisite for machine learning and data analysis. If you already have a solid understanding spend a week or two brushing up on key concepts. Focus especially hard on descriptive statistics . Being able to understand a data set is a skill worth its weight in gold. Learn how to load, manipulate, and visualize data. Mastery of these libraries will be crucial to your personal projects. Quick hint: Don‚Äôt feel like you have to memorize every method or function name, that comes with practice. If you forget, Google it. Check out the  Pandas Docs ,  Numpy Docs , and  Matplotlib Tutorials . There are better resources out there, but these are what I used. Remember, the only way you will learn these libraries is by using them! Learn the theory and application of machine learning algorithms. Then apply the concepts you learn to real-world data that you care about. Most beginners start by working with toy data-sets from the  UCI ML Repository . Play around with the data and go through guided ML tutorials. The  Scikit-learn  documentation has excellent tutorials on the application of common algorithms. I also found this  podcast  to be a great (and free) educational resource behind the theory of ML. You can listen to it on your commute or while working out. Getting a job means being able to take real-world data and turn it into action. To do this you will need to learn how to use a business‚Äô computational resources to get, transform, and process data. This is the most under-taught part of the data science curriculum. Mainly because the specific tools you use depend on the industry you are going in to. However, database manipulation is a required skill set.  You can learn how to manipulate databases with code on  ModeAnalytics  or  Codecademy . You can also implement your own database (cheaply) on  DigitalOcean . Another (often) required skill is  version control .  You can acquire this skill easily by creating a  GitHub  account and using the command line to commit your code daily. When considering what other technologies to learn, it is important to think about your interests and passions. For example, if you are interested in web development, then look into the tools used by companies in that industry. There are literally thousands of web pages and forums explaining the use of common data science tools. Because of this, it is very easy to get side-tracked while learning¬†online. When you start researching a topic you need to hold your goal in mind. If you don‚Äôt, you risk getting caught up in whatever catchy link draws your eye. The solution,  get a good storage system to save interesting web-resources . This way you can save material for later, and focus on the topic that is relevant to you at the moment. If you do this right, you can make an ordered learning path that shows you what you should be focused on. You will also learn faster and avoid being distracted. Warning,  your reading list will quickly grow into the hundreds  as you explore new topics that interest you. Don‚Äôt worry, this leads us to my second piece of advice. Having a self-driven education can often feel like trying to read a never-ending library of knowledge. If you‚Äôre going to be successful in data science you need to think of your education as a lifelong process. Just remember, the process of learning is its own reward. Throughout your educational journey, you will explore your interests and discover more about what drives you . The more you learn about yourself, the more enjoyment you will get out of learning. Don‚Äôt settle for just learning a concept and then moving to the next thing. The process of learning doesn‚Äôt stop until you can apply a concept to the real world. Not every concept needs to have a dedicated project in your portfolio. But it is important to stay grounded and  remember that you are learning so you can make an impact in the world. When it comes down to it,  skepticism is one of the biggest adversities you will face when learning data science. This may come from others, or it may come from  yourself . Your portfolio is your way of showing the world that you are capable and confident in your own skills. Because of this, building a portfolio is the single most important thing you can do while studying data science. A good portfolio can land you a job and make you a more confident data scientist. Fill your portfolio with projects that you are proud of. Did you build your own web app from scratch? Did you make your own IMDB database? Have you written an interesting data analysis of healthcare data? Put it in your portfolio. Just make sure write-ups are readable, the code is well documented, and the portfolio itself looks good. This is my portfolio. A simpler method to publish your portfolio is to create a GitHub repository that includes a great ReadMe (summary page) as well as relevant project files. Here is an aesthetically pleasing, yet simple,  GitHub portfolio . For a more advanced portfolio, look into GitHub-IO to host your own free website. ( example ) Data science is a set of tools intended to make a change in the world. Some data scientists build computer vision systems to diagnose medical images, others traverse billions of data entries to find patterns in website user preferences. The applications of data science are endless, that‚Äôs why it is important to find what applications excite you. If you find topics that you are passionate about, you will be more willing to put in the work to make a great project. This leads to my favorite piece of advice in this article. When you are learning, keep your eyes open for projects or ideas that excite you. Once you have spent time learning, try to connect the dots. Find similarities between projects that fascinate you. Then spend some time researching industries that work on those types of projects. Once you find an industry that you are passionate about, make it your goal to acquire the skills and technical expertise needed in that business. If you can do this, you will be primed to turn your hard work and dedication for learning into a passionate and successful career. If you love making discoveries about the world. If you are fascinated by artificial intelligence. Then you can break into the data science industry no matter what your situation is. It won‚Äôt be easy. To motivate your own education you will need perseverance and¬†discipline. But if you are the type of person who can push yourself to improve, you are more than capable of mastering these skills on your own. After all, that‚Äôs what being a data scientist is all about. Being curious, self-driven, and passionate about finding answers."
How to Build a Data Science Portfolio,ow to Build a Data Science Portfoli,"How do you get a job in data science?  Knowing enough statistics, machine learning, programming, etc to be able to get a job is difficult. One thing I have found lately is quite a few people  may   have the required skills to get a job, but no portfolio . While a resume matters, having a portfolio of public evidence of your data science skills can do wonders for your job prospects. Even if you have a  referral ,  the ability to show potential employers what you can do instead of just telling them you can do something is important . This post will include links to where various data science professionals (data science managers, data scientists, social media icons, or some combination thereof) and others talk about what to have in a portfolio and how to get noticed. With that, let‚Äôs get started! Besides the benefit of learning by making a portfolio, a portfolio is important as it can help get you employment. For the purpose of this article, let‚Äôs define a portfolio as public evidence of your data science skills. I got this definition from  David Robinson  Chief Data Scientist at DataCamp when he was interviewed by  Marissa Gemma  on  Mode Analytics blog . He was asked about landing his first job in industry and said, The most effective strategy for me was doing public work. I blogged and did a lot of open source development late in my PhD, and these helped give public evidence of my data science skills. But the way I landed my first industry job was a particularly noteworthy example of the public work. During my PhD I was an active answerer on the programming site Stack Overflow, and an engineer at the company came across one of my answers (one explaining the intuition behind the beta distribution). He was so impressed with the answer that he got in touch with me [through Twitter], and a few interviews later  I was hired . You may think of this as a freak occurrence, but you will often find that the more active you are, the greater chance you have of something like this occuring. From  David‚Äôs blog post , The more public work you do, the higher the chance of a freak accident like that: of someone noticing your work and pointing you towards a job opportunity, or of someone who‚Äôs interviewing you having heard of work you‚Äôve done. People often forget that software engineers and data scientists also Google their issues. If these same people have their problems solved by reading your public work, they might think better of you and reach out to you. Even for an entry level role, most companies want to have people with at least a little bit of real life experience. You may have seen memes like the one below. The question is how do you get experience if you need experience to get your first job? If there is an answer, the answer is  projects . Projects are perhaps the best substitutes for work experience or as  Will Stanton  said, If you don‚Äôt have any experience as a data scientist, then you absolutely  have to  do independent projects. In fact, when  Jacqueline Nolis   interviews candidates , she wants to hear about a description of a recent problem/project that you have faced. I want to hear about a project they‚Äôve worked on recently. I ask them about how the project started, how they determined it was worth time and effort, their process, and their results. I also ask them about what they learned from the project. I gain a lot from answers to this question: if they can tell a narrative, how the problem related to the bigger picture, and how they tackled the hard work of doing something. If you don‚Äôt have some data science related work experience, the best option here is to talk about a data science project that you have worked on. Data science is such a broad field that it is hard to know what kind of projects hiring managers want to see.  William Chen , a Data Science Manager at Quora, shared his thoughts on the subject at Kaggle‚Äôs CareerCon 2018 ( video ). I love projects where people show that they are interested in data in a way that goes beyond homework assignments. Any sort of class final project where you explore an interesting dataset and find interesting results‚Ä¶ Put effort into the writeup‚Ä¶ I really like seeing really good writeups where people find interesting and novel things‚Ä¶have some visualizations and share their work. A lot of people recognize the value of creating projects, but one issue a lot of people wonder is where do you get that interesting dataset and what do you do with it.  Jason Goodman , Data Scientist at Airbnb, has a post  Advice on Building Data Portfolio Projects  where he talks about many different project ideas and has good advice on what kind of datasets you should use. He also echos one of William‚Äôs points about working with interesting data. I find that the best portfolio projects are less about doing fancy modeling and more about working with interesting data. A lot of people do things with financial information or Twitter data; those can work, but the data isn‚Äôt inherently that interesting, so you‚Äôre working uphill. One of his other points in the article is that webscraping is a great way to get interesting data. If you are interested in learning how to build your own dataset by webscraping in Python, you can see my post  here . If you are coming from academia, it is important to note that your thesis can count as a project (a very large project). You can hear  William Chen  talk about it  here . One thing I have found very common (to the point of it appearing multiple times in this blog post) in a lot of portfolio/resume advice is not to have common projects in your portfolio. Jeremie Harris  in  The 4 fastest ways not to get hired as a data scientist  said, It‚Äôs hard to think of a faster way to have your resume thrown into the ‚Äòdefinite no‚Äô pile than featuring work you did on trivial proof-of-concept datasets among your highlighted personal projects. When in doubt, here are some projects that hurt you more than they help you: * Survival classification on the  Titanic dataset . * Hand-written digit classification on the  MNIST dataset . * Flower species classification using the  iris dataset . The image below shows partial examples of classification of Titanic (A), MNIST (B), and iris (C) datasets. There aren‚Äôt a lot of ways to use these datasets to distinguish yourself from other applicants. Make sure to list novel projects. Favio Vazquez  has an  excellent article  where he talked about how he got his job as a data scientist. Of course, one of his tips is to have a portfolio. Have a portfolio. If you are looking for a serious paid job in data science do some projects with real data. If you can post them on GitHub. Apart from Kaggle competitions, find something that you love or a problem you want to solve and use your knowledge to do it. One of the other interesting findings was that you always have to keep on improving as you go through the job hunt. I applied to almost 125 jobs (for real, maybe you applied for much more), I got only like 25‚Äì30 replies. Some of them were just: Thanks but nope. And I got almost 15 interviews. I learned from each one. Got better. I had to deal with a lot of rejection. Something I was actually not prepared to. But I loved the process of getting interviewed (not all of them to be honest). I studied a lot, programmed everyday, read a lot of articles and posts. They helped a lot. As you learn more and improve yourself, your portfolio should also be updated. This same sentiment is echoed in many other advice articles. As  Jason Goodman  said, The project isn‚Äôt done when you post it publicly. Don‚Äôt be afraid to keep adding on to or editing your projects after they‚Äôre published! This advice is especially true when you are looking for a job. There are many stories of successful people like  Kelly Peng , Data Scientist at Airbnb, who really persevered and kept on working and improving. In  one of her blog posts , she went over how many places she applied for and interviewed with. Applications: 475 Phone interviews: 50 Finished data science take-home challenges: 9 Onsite interviews: 8 Offers: 2 Time spent: 6 months She clearly applied to a lot of jobs and kept on persisting. In her article, she even mentions how you need to keep on learning from your interviewing experiences. Take note of all the interview questions you got asked, especially those questions you failed to answer. You can fail again, but don‚Äôt fail at the same spot. You should always be learning and improving. One of the ways someone finds your portfolio is often through your resume so it is worth a mention. A data science resume is a place to focus on your technical skills. Your resume is a chance to succinctly represent your qualifications and fit for that particular role. Recruiters and hiring managers skim resumes very quickly, and you only have a short time to make an impression. Improving your resume can increase your chance of getting an interview. You have to make sure every single line and every single section of your resume counts. William Chen , a Data Science Manager from Quora has  9 Tips for making your data science resume .  Notice in the brief summary of his points below, that projects and portfolio are points 6, 7, 8, and arguably 9 . 2. Objective : Don‚Äôt include one. They don‚Äôt help you distinguish yourself from other people. They take away space from the more important things (skills, projects, experience etc). Cover letters are extremely optional unless you really personalize it. 3. Coursework : Do list  relevant coursework  that is applicable for the job description. 4. Skills : Don‚Äôt give numerical ratings for your skills. If you want to rate yourself on your skills, use words like proficient or familiar or things like that. You can even exclude assessments altogether. 5. Skills : Do list technical skills that the job description mentions. The order you list your skills in can suggest what you are best at. 6. Projects : Don‚Äôt list common projects or homework. They aren‚Äôt that helpful in distinguishing you from other applicants. List projects that are novel. 7. Projects :   Show results and include links. If you participated in Kaggle competition, put percentile rank as it helps the person reading your resume understand where you are in the competition. In projects sections, there is always room for links to writeups and papers as they let the hiring manager or recruiter dig in deeper (bias to real world messy problems where you learn something new). Notice that in one of the projects sections above, a person has an additional link to a blog that lets the recruiter or hiring manager find out more. This is one way to link to various parts of your portfolio from your resume. 8. Portfolio:  Fill our your online presence. The most basic is a LinkedIn profile. It is kind of like an extended resume. Github and Kaggle profiles can help show off your work. Fill out each profile and include links to other sites. Fill out descriptions for your GitHub respositories. Include links to your knowledge sharing profiles/blog (medium, quora). Data science specifically is about knowledge sharing and communicating what the data means to other people. You don‚Äôt have to do all of them, but pick a few and do it (More on this later). 9. Experience : Tailor your experience towards the job. Experience is the core of your resume, but if you don‚Äôt have work experience what do you do? Focus your resume on independent projects, like capstone projects, independent research, thesis work, or Kaggle competitions. These are substitutes for work experience if you don‚Äôt have work experience to put on your resume. Avoid putting irrelevant experience on your resume. If you want to know hear data science managers go over portfolios and resumes, here are links to Kaggle‚Äôs CareerCon 2018 ( video ,  resumes reviewed ). This is very similar to the Importance of a Portfolio section, just divided into subsections. Having a Github page, a Kaggle profile, a Stack Overflow, etc can provide support for your resume. Having online profiles filled out can be a good signal for hiring managers. As  David Robinson  phrases it, Generally, when I‚Äôm evaluating a candidate, I‚Äôm excited to see what they‚Äôve shared publicly, even if it‚Äôs not polished or finished. And sharing  anything  is almost always better than sharing nothing. The reason why data scientists like seeing public work is as  Will Stanton  said, Data scientists use these tools to share their own work and find answers to questions. If you use these tools, then you are signaling to data scientists that you are one of  them , even if you haven‚Äôt ever worked as a data scientist. A lot of Data science is about communication and presenting data so it is good to have these online profiles. Besides from the fact that these platforms help provide valuable experience, they can also help you get noticed and lead people to your resume. People can and do find your resume online through various sources (LinkedIn, GitHub, Twitter, Kaggle, Medium, Stack Overflow, Tableau Public, Quora, Youtube, etc). You will even find that different types of social media feed into eachother. A Github profile is a powerful signal that you are a competent data scientist. In the projects section of a resume, people often leave links to their GitHub where the code is stored for their projects. You can also have writeups and markdown there. GitHub lets people see what you have built and how you have built it. At some companies, hiring managers look at an applicants GitHub. It is another way to show employers you aren‚Äôt a false positive. If you take the time to develop your GitHub profile, you can be better evaluated than others. It is worth mentioning that you need to have some sort of README.md with a description of your project as a lot of  data science is about communicating results . Make sure the README.md file clearly describes what your project is, what it does, and how to run your code. Participating in Kaggle competitions, creating a kernel, and contributing to discussions are ways to show some competency as a data scientist. It is important to emphasize that Kaggle is not like an industry project as  Colleen Farrelly , mentions in this  quora question . Kaggle competitions take care of coming up with a task, acquire data for you, and clean it into some usable form. What it does is give you practice analyzing data and coming up with a model. Note that there is a good reason why  Kaggle Grandmasters continue to participate in Kaggle competitions .  Reshama Shaikh  has a post  To Kaggle Or Not  where she talked about the value of Kaggle competitions. From her post, It is true, doing one Kaggle competition does not qualify someone to be a data scientist. Neither does taking one class or attending one conference tutorial or analyzing one dataset or reading one book in data science. Working on competition(s) adds to your experience and augments your portfolio. It is a complement to your other projects, not the sole litmus test of one‚Äôs data science skillset. I completely agree with Reshama‚Äôs view on this. In particular, the point about how taking a class in something doesn‚Äôt make you an expert in something nor does it give you a job. I literally have made a course called  Python for Data Visualization  and I go into extensive depth about Pandas, Matplotlib, and Seaborn. It wont immediately give you a job or make you an immediate expert in Matplotlib or Seaborn, but it will make your knowledge greater, teach you how the libraries work, and aid in building your portfolio. Everything you do can make you more employable. Unlike a resume, which is confined by length, a LinkedIn profile allows you to describe your projects and work experience in more depth. Udacity has a  guide on making a good LinkedIn profile . An important part of LinkedIn is their search tool and for you to show up, you must have  relevant keywords   in   your profile. Recruiters often search for people on LinkedIn. LinkedIn allows you to see which companies have searched for you and who has viewed your profile. Besides companies finding you and sending you messages on your availability, LinkedIn also has many features like  Ask for a Referral .  Jason Goodman  in his article  Advice on Applying to Data Science Jobs  uses LinkedIn to  indirectly  ask for referrals. I never, never, never applied to any companies without an introduction to someone who worked at the company‚Ä¶once I was interested in a company, I would use LinkedIn to find a first- or second- degree connection at the company. I would write to that connection, asking to talk to them about their experience at the company and, if possible, whether they‚Äôd be able to connect me to someone on the Data Science team. Whenever I could, I did in-person meetings (coffee or lunch) instead of phone calls. As an aside, Trey Causey recently wrote  a great post  on how to ask for just these kinds of meetings. I would never ask for a job directly, but they would usually ask for my resume and offer to submit me as an internal referral, or put me in touch with a hiring manager. If they didn‚Äôt seem comfortable doing so...I‚Äôd just thank them for their time and move on. Notice that he doesn‚Äôt right away ask for a referral. While common job advice when applying to a company is to get a referral, it is VERY IMPORTANT to note that you still need a portfolio, experience, or some sort of proof you can do a job. Jason even mentions the importance of a portfolio in that and  other articles he has written . Aman Dalmia  learned something similar by  Interviewing at Multiple AI Companies and Startups . Networking is  NOT  messaging people to place a referral for you .  When I was starting off, I did this mistake way too often until I stumbled upon an article that talked about the importance of building a  real  connection with people by offering our help first. One other point he had is that LinkedIn is great for getting your content/portfolio out. Another important step in networking is to get your content out. For example, if you‚Äôre good at something, blog about it and share that blog on Facebook and LinkedIn .  Not only does this help others,  it helps you as well. Having some form of blog can be highly beneficial. A lot of data science is about communication and presenting data. Blogging is a way of practicing this and showing you can do this. Writing about a project or a data science topic allows you to share with the community as well as encourages you to write out your work process and thoughts. This is a useful skill when interviewing. As  David Robinson  said, A blog is your chance to practice the relevant skills. By writing a blog, you can practice communicate findings to others. It also is another form of advertising yourself. Blogs about  Using Scrapy to Build your Own Dataset , and ironically  Python Environment Management with Conda  have taught me a lot and have gotten me a lot of opportunities I would normally not have gotten. Recently, my  boxplot blog  brought me the opportunity to create my own  Python for Data Visualization course . One of the major benefits I have found is that throughout the process of people critiquing my projects and suggesting improvements (though the comments section of the blog) makes it so interviewers aren‚Äôt the first ones pointing out these same flaws. The more obvious benefit is that by making a blog you tend to read a lot more data science/machine learning blog posts and hence learn more. As for what platform to blog on, I recommend using Medium.  Manali Shinde  in her blog post  How to Construct a Data Science Portfolio from Scratch  had a really good point on why she choose Medium for her blog. I thought of creating my own website on a platform such as WordPress or Squarespace. While those platforms are amazing to host your own portfolio, I wanted a place where I would get some visibility, and a pretty good tagging system to reach greater audiences. Luckily Medium, as we know, has those options (and it‚Äôs also free). If you don‚Äôt know what to write about, I suggest you look at  David Robinson‚Äôs advice . Being active on Twitter is a great way to identify and interact with people in your field. You can also promote your blog on Twitter so that your portfolio can be that much more visible. There are so many opportunities to interact with people on twitter. One of them as  Reshama Shaikh  said in her famous blog post ‚Äú How Do I Get My First Data Science Job? ‚Äù was, David Robinson  generously offers to retweet your first data science post. With 20K+ followers, that‚Äôs an offer that can‚Äôt be refused. Twitter can be used for other things than self promotion.  Data Science Renee  has a post ‚Äú How to use Twitter to Learn Data Science (or Anything) ‚Äù that is quite insightful about taking Twitter to learn skills. One other takeaway from her article was how much her Twitter presence helped her network and get opportunities. I have been asked to be interviewed on podcasts and blogs (some of those should be coming up soon), offered contract work, and offered free admission to a conference I unfortunately couldn‚Äôt go to, but was excited to be considered for. ‚ÄúFamous‚Äù people in the industry are now coming to me to work with them in some way. Not every data science job uses Tableau or other BI tools. However, if you are applying to jobs where these tools are used, it is important to note that there are websites where you can put dashboards for public consumption. For example, if you say you are learning or know Tableau, put a couple dashboards on  Tableau Public . While a lot of companies might be okay with you learning Tableau on the job, having public evidence of your Tableau skill can help. If you want to see good examples of Tableau Public profiles, please see  Orysya Stus‚Äô  and  Brit Cava‚Äôs  profiles. Having a strong resume has long been the primary tool for job seekers to relay their skills to potential employers. These days, there is more than one way to showoff your skills and get a job. A portfolio of public evidence is a way to get opportunities that you normally wouldn‚Äôt get. It is important to emphasize that a portfolio is an iterative process. As your knowledge grows, your portfolio should be updated over time. Never stop learning or growing. Even this blog post will be updated with feedback and with increasing knowledge. If you want interview advice/guides/courses, time to check out  Brandon Rohrer‚Äôs advice on how to survive a data science interview ,  Sadat‚Äôs   interview guide , or my  15 Tips for Landing a Data Science Job course . If you want some general data science career advice, I wrote an article on it  here . If you have any questions or thoughts on the tutorial, feel free to reach out in the comments below or through  Twitter ."
"I ranked every Intro to Data Science course on the internet, based on thousands of data points"," ranked every Intro to Data Science course on the internet, based on thousands of data point","A year ago, I dropped out of one of the best computer science programs in Canada. I started creating my own  data science master‚Äôs program  using online resources. I realized that I could learn everything I needed through edX, Coursera, and Udacity instead. And I could learn it faster, more efficiently, and for a fraction of the cost. I‚Äôm almost finished now. I‚Äôve taken many data science-related courses and audited portions of many more. I know the options out there, and what skills are needed for learners preparing for a data analyst or data scientist role.  A few months ago, I started creating a review-driven guide that recommends the best courses for each subject within data science. For the first guide in the series, I recommended a few  coding classes  for the beginner data scientist. Then it was  statistics and probability classes . (Don‚Äôt worry if you‚Äôre unsure of what an intro to data science course entails. I‚Äôll explain shortly.) For this guide, I spent 10+ hours trying to identify every online intro to data science course offered as of January 2017, extracting key bits of information from their syllabi and reviews, and compiling their ratings. For this task, I turned to none other than the open source Class Central community and its database of thousands of course ratings and reviews. Since 2011,  Class Central  founder  Dhawal Shah  has kept a closer eye on online courses than arguably anyone else in the world. Dhawal personally helped me assemble this list of resources. Hey, it‚Äôs David. I wrote this guide back in 2017. Since then, I‚Äôve become a professional data analyst and created courses for multiple industry-leading online education companies. Do you want to become a data analyst, without spending 4 years and $41,762 to go to university? Follow my latest  27-day curriculum  and learn alongside other aspiring data pros.  My top intro to data science course recommendation for 2023 is in there, too. datamaverickhq.com Okay, back to the guide. Each course must fit three criteria: We believe we covered every notable course that fits the above criteria. Since there are seemingly hundreds of courses on  Udemy , we chose to consider the most-reviewed and highest-rated ones only. There‚Äôs always a chance that we missed something, though. So please let us know in the comments section if we left a good course out. We compiled average rating and number of reviews from Class Central and other review sites to calculate a weighted average rating for each course. We read text reviews and used this feedback to supplement the numerical ratings. We made subjective syllabus judgment calls based on two factors: 1.  Coverage of the data science process.  Does the course brush over or skip certain subjects? Does it cover certain subjects in too much detail? See the next section for what this process entails. 2.  Usage of common data science tools.  Is the course taught using popular programming languages like Python and/or R? These aren‚Äôt necessary, but helpful in most cases so slight preference is given to these courses. What is data science? What does a data scientist do?  These are the types of fundamental questions that an intro to data science course should answer. The following infographic from Harvard professors Joe Blitzstein and Hanspeter Pfister outlines a typical  data science process , which will help us answer these questions. Our goal with this introduction to data science course is to become familiar with the data science process. We don‚Äôt want too in-depth coverage of specific aspects of the process, hence the ‚Äúintro to‚Äù portion of the title. For each aspect, the ideal course explains key concepts within the framework of the process, introduces common tools, and provides a few examples (preferably hands-on). We‚Äôre only looking for an introduction. This guide therefore won‚Äôt include full specializations or programs like Johns Hopkins University‚Äôs  Data Science Specialization  on Coursera or Udacity‚Äôs  Data Analyst Nanodegree . These compilations of courses elude the purpose of this series: to find the best  individual  courses for each subject to comprise a data science education. The final three guides in this series of articles will cover each aspect of the data science process in detail. Several courses listed below require basic programming, statistics, and probability experience. This requirement is understandable given that the new content is reasonably advanced, and that these subjects often have several courses dedicated to them. This experience can be acquired through our recommendations in the first two articles ( programming ,  statistics ) in this Data Science Career Guide. Kirill Eremenko‚Äôs  Data Science A-Z‚Ñ¢  on Udemy is the clear winner in terms of breadth and depth of coverage of the data science process of the 20+ courses that qualified. It has a 4.5-star weighted average rating over 3,071 reviews, which places it among the highest rated and most reviewed courses of the ones considered. It outlines the full process and provides real-life examples. At 21 hours of content, it is a good length. Reviewers love the instructor‚Äôs delivery and the organization of the content. The price varies depending on Udemy discounts, which are frequent, so you may be able to purchase access for as little as $10. Though it doesn‚Äôt check our ‚Äúusage of common data science tools‚Äù box ,  the non-Python/R tool choices (gretl, Tableau, Excel) are used effectively in context. Eremenko mentions the following when explaining the gretl choice (gretl is a statistical software package), though it applies to all of the tools he uses (emphasis mine): In gretl, we will be able to do the same modeling just like in R and Python but we won‚Äôt have to code. That‚Äôs the big deal here. Some of you may already know R very well, but some may not know it at all. My goal is to show you how to build a robust model and  give you a framework that you can apply in any tool you choose . gretl will help us avoid getting bogged down in our coding. One prominent reviewer noted the following: Kirill is the best teacher I‚Äôve found online. He uses real life examples and explains common problems so that you get a deeper understanding of the coursework. He also provides a lot of insight as to what it means to be a data scientist from working with insufficient data all the way to presenting your work to C-class management. I highly recommend this course for beginner students to intermediate data analysts! Udacity‚Äôs  Intro to Data Analysis  is a relatively new offering that is part of Udacity‚Äôs popular  Data Analyst Nanodegree . It covers the data science process clearly and cohesively using Python, though it lacks a bit in the modeling aspect. The estimated timeline is 36 hours (six hours per week over six weeks), though it is shorter in my experience. It has a 5-star weighted average rating over two reviews. It is free. The videos are well-produced and the instructor (Caroline Buckey) is clear and personable. Lots of programming quizzes enforce the concepts learned in the videos. Students will leave the course confident in their new and/or improved NumPy and Pandas skills (these are popular Python libraries). The final project ‚Äî which is graded and reviewed in the Nanodegree but not in the free individual course ‚Äî can be a nice add to a portfolio. Data Science Fundamentals is a four-course series provided by IBM‚Äôs Big Data University. It includes courses titled  Data Science 101 ,  Data Science Methodology ,  Data Science Hands-on with Open Source Tools , and  R 101 . It covers the full data science process and introduces Python, R, and several other open-source tools. The courses have tremendous production value. 13‚Äì18 hours of effort is estimated, depending on if you take the ‚ÄúR 101‚Äù course at the end, which isn‚Äôt necessary for the purpose of this guide. Unfortunately, it has no review data on the major review sites that we used for this analysis, so we can‚Äôt recommend it over the above two options yet. It is free. Our #1 pick had a weighted average rating of 4.5 out of 5 stars over 3,068 reviews. Let‚Äôs look at the other alternatives, sorted by descending rating. Below you‚Äôll find several R-focused courses, if you are set on an introduction in that language. The following courses had no reviews as of January 2017. This is the third of a six-piece series that covers the best online courses for launching yourself into the data science field. We covered programming in the  first article  and statistics and probability in the  second article . The remainder of the series will cover other data science core competencies: data visualization and machine learning. medium.freecodecamp.com medium.freecodecamp.com The final piece will be a summary of those articles, plus the best online courses for other key topics such as data wrangling, databases, and even software engineering. If you‚Äôre looking for a complete list of Data Science online courses, you can find them on Class Central‚Äôs  Data Science and Big Data  subject page. If you enjoyed reading this, check out some of  Class Central ‚Äôs other pieces: medium.freecodecamp.com medium.freecodecamp.com If you have suggestions for courses I missed, let me know in the responses! If you found this helpful, click the üíö so more people will see it here on Medium. This is a condensed version of my  original article published on Class Central , where I‚Äôve included further course descriptions, syllabi, and multiple reviews."
"The best Data Science courses on the internet, ranked by your reviews","he best Data Science courses on the internet, ranked by your review","A year and a half ago, I dropped out of one of the best computer science programs in Canada. I started creating my own  data science master‚Äôs program  using online resources. I realized that I could learn everything I needed through edX, Coursera, and Udacity instead. And I could learn it faster, more efficiently, and for a fraction of the cost. I‚Äôm almost finished now. I‚Äôve taken many data science-related courses and audited portions of many more. I know the options out there, and what skills are needed for learners preparing for a data analyst or data scientist role.   So I started creating a review-driven guide that recommends the best courses for each subject within data science. For the first guide in the series, I recommended a few  coding classes  for the beginner data scientist. Then it was  statistics and probability classes . Then  introductions to data science . Then  data visualization .  Machine learning  was the fifth and latest guide. And now I‚Äôm back to conclude this series with even more resources. For each of the five major guides in this series, I spent several hours trying to identify every online course for the subject in question, extracting key bits of information from their syllabi and reviews, and compiling their ratings. My goal was to identify the three best courses available for each subject and present them to you. The 13 supplemental topics ‚Äî like databases, big data, and general software engineering ‚Äî didn‚Äôt have enough courses to justify full guides. But over the past eight months, I kept track of them as I came across them. I also scoured the internet for courses I may have missed. For these tasks, I turned to none other than the open source Class Central community, and its database of thousands of course ratings and reviews. Since 2011,  Class Central  founder  Dhawal Shah  has kept a closer eye on online courses than arguably anyone else in the world. Dhawal personally helped me assemble this list of resources. Hey, it‚Äôs David. I wrote this guide back in 2017. Since then, I‚Äôve become a professional data analyst and created courses for multiple industry-leading online education companies. Do you want to become a data analyst, without spending 4 years and $41,762 to go to university? Follow my latest  27-day curriculum  and learn alongside other aspiring data pros. datamaverickhq.com Okay, back to the guide. Each course within each guide must fit certain criteria. There were subject-specific criteria, then two common ones that each guide shared: We believe we covered every notable course that fit the criteria in each guide. There is always a chance that we missed something, though. Please let us know in each guide‚Äôs comments section if we left a good course out. We compiled average ratings and number of reviews from Class Central and other review sites to calculate a weighted average rating for each course. We read text reviews and used this feedback to supplement the numerical ratings. We made subjective syllabus judgment calls based on a variety of factors specific to each subject. The criteria in our intro to programming guide, for example: Learn to Program: The Fundamentals (LPT1)  and  Crafting Quality Code (LPT2)  by the University of Toronto via Coursera The University of Toronto‚Äôs Learn to Program series has an excellent mix of content difficulty and scope for the beginner data scientist. Taught in Python, the series has a 4.71-star weighted average rating over 284 reviews. An Introduction to Interactive Programming in Python (Part 1)  and  (Part 2)  by Rice University via Coursera Rice University‚Äôs Interactive Programming in Python series contains two of the best online courses ever. They skew towards games and interactive applications, which are less applicable topics in data science. The series has a 4.93-star weighted average rating over 6,069 reviews. R Programming Track  by DataCamp If you are set on learning R, DataCamp‚Äôs R Programming Track effectively combines programming fundamentals and R syntax instruction. It has a 4.29-star weighted average rating over 14 reviews. Foundations of Data Analysis ‚Äî Part 1: Statistics Using R  and  Part 2: Inferential Statistics  by the University of Texas at Austin via edX The courses in the UT Austin‚Äôs Foundations of Data Analysis series are two of the few with great reviews that also teach statistics and probability with a focus on coding up examples. The series has a 4.61-star weighted average rating over 28 reviews. Statistics with R Specialization  by Duke University via Coursera Duke‚Äôs Statistics with R Specialization, which is split into five courses, has a comprehensive syllabus with full sections dedicated to probability. It has a 3.6-star weighted average rating over 5 reviews, but the course it was based upon has a 4.77-star weighted average rating over 60 reviews. Introduction to Probability ‚Äî The Science of Uncertainty  by the Massachusetts Institute of Technology (MIT) via edX MIT‚Äôs Intro to Probability course by far has the highest ratings of the courses considered in the statistics and probability guide. It exclusively probability in great detail, plus it is longer (15 weeks) and more challenging than most MOOCs. It has a 4.82-star weighted average rating over 38 reviews. Data Science A-Z‚Ñ¢: Real-Life Data Science Exercises Included  by Kirill Eremenko and the SuperDataScience Team via Udemy Kirill Eremenko‚Äôs Data Science A-Z excels in breadth and depth of coverage of the data science process. The instructor‚Äôs natural teaching ability is frequently praised by reviewers. It has a 4.5-star weighted average rating over 5,078 reviews. Intro to Data Analysis  by Udacity Udacity‚Äôs Intro to Data Analysis covers the data science process cohesively using Python. It has a 5-star weighted average rating over 2 reviews. Data Science Fundamentals  by Big Data University Big Data University‚Äôs Data Science Fundamentals covers the full data science process and introduces Python, R, and several other open-source tools. There are no reviews for this course on the review sites used for this analysis. Data Visualization with Tableau Specialization  by the University of California, Davis via Coursera A five-course series, UC Davis‚Äô Data Visualization with Tableau Specialization dives deep into visualization theory. Opportunities to practice Tableau are provided through walkthroughs and a final project. It has a 4-star weighted average rating over 2 reviews. Data Visualization with ggplot2 Series  by DataCamp Endorsed by ggplot2 creator Hadley Wickham, a substantial amount of theory is covered in DataCamp‚Äôs Data Visualization with ggplot2 series. You will know R and its quirky syntax quite well leaving these courses. There are no reviews for these courses on the review sites used for this analysis. Tableau 10 Series ( Tableau 10 A-Z  and  Tableau 10 Advanced Training ) by Kirill Eremenko and the SuperDataScience Team on Udemy An effective practical introduction, Kirill Eremenko‚Äôs Tableau 10 series focuses mostly on tool coverage (Tableau) rather than data visualization theory. Together, the two courses have a 4.6-star weighted average rating over 3,724 reviews. Machine Learning  by Stanford University via Coursera Taught by the famous Andrew Ng, Google Brain founder and former chief scientist at Baidu, Stanford University‚Äôs Machine Learning covers all aspects of the machine learning workflow and several algorithms. Taught in MATLAB or Octave, It has a 4.7-star weighted average rating over 422 reviews. Machine Learning  by Columbia University via edX A more advanced introduction than Stanford‚Äôs, CoIumbia University‚Äôs Machine Learning is a newer course with exceptional reviews and a revered instructor. The course‚Äôs assignments can be completed using Python, MATLAB, or Octave. It has a 4.8-star weighted average rating over 10 reviews. Machine Learning A-Z‚Ñ¢: Hands-On Python & R In Data Science  by Kirill Eremenko and Hadelin de Ponteves via Udemy Kirill Eremenko and Hadelin de Ponteves‚Äô Machine Learning A-Z is an impressively detailed offering that provides instruction in both Python and R, which is rare and can‚Äôt be said for any of the other top courses. It has a 4.5-star weighted average rating over 8,119 reviews. Creative Applications of Deep Learning with TensorFlow  by Kadenze Parag Mital‚Äôs Creative Applications of Deep Learning with Tensorflow adds a unique twist to a technical subject. The ‚Äúcreative applications‚Äù are inspiring, the course is professionally produced, and the instructor knows his stuff. Taught in Python, It has a 4.75-star weighted average rating over 16 reviews. Neural Networks for Machine Learning  by the University of Toronto via Coursera Learn from a legend.  Geoffrey Hinton  is known as the ‚Äúgodfather of deep learning‚Äù is internationally distinguished for his work on artificial neural nets. His Neural Networks for Machine Learning is an advanced class. Taught in Octave with exercises also in Python, it has a 4.11-star weighted average rating over 35 reviews. Deep Learning A-Z‚Ñ¢: Hands-On Artificial Neural Networks  by Kirill Eremenko and Hadelin de Ponteves via Udemy Deep Learning A-Z is an accessible introduction to deep learning, with intuitive explanations from Kirill Eremenko and helpful code demos from Hadelin de Ponteves. Taught in Python, it has a 4.6-star weighted average rating over 1,314 reviews. Python Programming Track  by DataCamp, plus their individual pandas courses: DataCamp‚Äôs code-heavy instruction style and in-browser programming environment are great for learning syntax. Their Python courses have a 4.64-star weighted average rating over 14 reviews. Udacity‚Äôs Intro to Data Analysis, one of our recommendations for intro to data science courses, covers NumPy and pandas as well. R Programming Track  by DataCamp, plus their individual dplyr and data.table courses: Again, DataCamp‚Äôs code-heavy instruction style and in-browser programming environment are great for learning syntax. Their R Programming Track, which is also one of our recommendations for programming courses in general, effectively combines programming fundamentals and R syntax instruction. The series has a 4.29-star weighted average rating over 14 reviews. Introduction to Databases  by Stanford University via Stanford OpenEdx (note:  reviews  from the deprecated version on Coursera) Stanford University‚Äôs Introduction to Databases covers database theory comprehensively while introducing several open source tools. Programming exercises are challenging. Jennifer Widom,  now the Dean of Stanford‚Äôs School of Engineering , is clear and precise. It has a 4.61-star weighted average rating over 59 reviews. Importing & Cleaning Data Tracks by DataCamp: DataCamp‚Äôs Importing & Cleaning Data Tracks (one in Python and one in R) excel at teaching the mechanics of preparing your data for analysis and/or visualization. There are no reviews for these courses on the review sites used for this analysis. Data Analysis with R  by Udacity and Facebook Udacity‚Äôs Data Analysis with R is an enjoyable introduction to exploratory data analysis. The expert interviews with Facebook‚Äôs data scientists are insightful and inspiring. The course has a 4.58-star weighted average rating over 19 reviews. It also serves as a light introduction to R. The Ultimate Hands-On Hadoop ‚Äî Tame your Big Data!  by Frank Kane via Udemy, then if you want more on specific tools (all by Frank Kane via Udemy): Frank Kane‚Äôs Big Data series teaches all of the most popular big data technologies, including over 25 in the ‚ÄúUltimate‚Äù course alone. Kane shares his knowledge from a decade of industry experience working with distributed systems at Amazon and IMDb. Together, the courses have a 4.52-star weighted average rating over 6,932 reviews. Software Testing  by Udacity Software Debugging  by Udacity Version Control with Git  and  GitHub & Collaboration  by Udacity (updates to Udacity‚Äôs popular  How to Use Git & GitHub  course) Software skills are an  oft-overlooked  part of a data science education. Udacity‚Äôs testing, debugging, and version control courses introduce three core topics relevant to anyone who deals with code, especially those in team-based environments. Together, the courses have a 4.34-star weighted average rating over 68 reviews. Georgia Tech and Udacity have a  new course  that covers software testing and debugging together, though it is more advanced and not all relevant for data scientists. Building a Data Science Team  by Johns Hopkins University via Coursera Learning How to Learn: Powerful mental tools to help you master tough subjects  by Dr. Barbara Oakley and the University of California, San Diego via Coursera Mindshift: Break Through Obstacles to Learning and Discover Your Hidden Potential  by Dr. Barbara Oakley and McMaster University via Coursera Johns Hopkins University‚Äôs Building a Data Science Team provides a useful peek into data science in practice. It is an extremely short course that can be completed in a handful of hours and audited for free. Ignore its 3.41-star weighted average rating over 12 reviews, some of which were likely from paying customers. Dr. Barbara Oakley‚Äôs Learning How to Learn and Mindshift aren‚Äôt data science courses per se. Learning How to Learn, the  most popular online course ever , covers best practices shown by research to be most effective for mastering tough subjects, including memory techniques and dealing with procrastination. In Mindshift, she demonstrates how to get the most out of online learning and MOOCs, how to seek out and work with mentors, and the secrets to avoiding career ruts and general ruts in life. These are two courses that  everyone  should take. They have a 4.74-star and a 4.87-star weighted average rating over 959 and 407 reviews, respectively. Both courses are four weeks in duration. This Data Science Career Guide will continue to be updated as new courses are released and ratings and reviews for them are generated. Are you passionate about another discipline (e.g. Computer Science)? Would you like to help educate the world? If you are interested in creating a Career Guide similar in structure to this one, drop us a note at  guides@class-central.com . As for my future, I‚Äôm excited to share that I have taken a position with Udacity as a  Content Developer . That means I‚Äôll be creating and teaching courses. That also means that this guide will be updated by somebody else. I‚Äôm joining Udacity because I believe they are best positioned to create the best education product on the planet. Of all of the courses I have taken, online or at university, I learned best while enrolled a Nanodegree. They are incorporating the latest in pedagogy and production and feature an excellent project review system, upbeat instructors, and healthy student and career support teams. Though a piecewise approach like the one we took in this guide can work, a cohesive program with projects and reviews throughout is much more student-friendly. Updating the  Data Analyst Nanodegree  is my first task, which is a part of a larger effort to create a clear path of Nanodegrees for all things data. Students will soon be able to start from scratch with data basics at Udacity and progress all the way through  machine learning ,  artificial intelligence , and even  self-driving cars  if they wish. This is the final piece of a six-piece series that covers the best online courses for launching yourself into the data science field. We covered programming in the  first article , statistics and probability in the  second article , intros to data science in the  third article , data visualization in the  fourth , and machine learning in the  fifth . medium.freecodecamp.com Here, we summarized the above five articles, and recommended the best online courses for other key topics such as databases, big data, and even software engineering. If you‚Äôre looking for a complete list of Data Science online courses, you can find them on Class Central‚Äôs  Data Science and Big Data  subject page. If you enjoyed reading this, check out some of  Class Central ‚Äôs other pieces: medium.freecodecamp.com medium.freecodecamp.com If you found this helpful, click the üíö so more people will see it here on Medium. This is a modified version of my  original article  published on Class Central, where a simple list of the courses mentioned here is also provided."
Bringing the best out of Jupyter Notebooks for Data Science,ringing the best out of Jupyter Notebooks for Data Scienc,"Reimagining what a Jupyter notebook can be and what can be done with it. Netflix  aims to provide personalized content to their 130 million viewers. One of the significant ways by which data scientists and engineers at Netflix interact with their data is through  Jupyter notebooks . Notebooks leverage the use of collaborative, extensible, scalable, and reproducible data science. For many of us, Jupyter Notebooks is the  de facto  platform when it comes to quick prototyping and exploratory analysis. However, there‚Äôs more to this than meets the eye. A lot of Jupyter functionalities sometimes lies under the hood and is not adequately explored. Let us try and explore Jupyter Notebooks‚Äô features which can enhance our productivity while working with them. The notebook is the new shell The shell is a way to interact textually with the computer. The  most popular  Unix shell is Bash( Bourne Again SHell  ). Bash is the default shell on most modern implementations of Unix and in most packages that provide Unix-like tools for Windows. Now, when we work with any Python interpreter, we need to regularly switch between the shell and the IDLE, in case we need to use the command line tools. However, the Jupyter Notebook gives us the ease to execute shell commands from within the notebook by placing an extra  ! before the commands.  Any  command that works at the command-line can be used in IPython by prefixing it with the  !  character. We can even pass values to and from the shell as follows: Notice, the data type of the returned results is not a list. Theme-ify your Jupyter Notebooks! If you are a person who gets bored while staring at the white background of the Jupyter notebook, themes are just for you. The themes also enhance the presentation of the code. You can find more about Jupyter themes  here . Let‚Äôs get to the working part. Installation List of available themes Currently, the available themes are  chesterish, grade3, gruvboxd, gruvboxl monokai, oceans16, onedork, solarizedd ,solarizedl. Extend the possibilities Notebook extensions let you move beyond the general vanilla way of using the Jupyter Notebooks. Notebook extensions (or nbextensions) are JavaScript modules that you can load on most of the views in your Notebook‚Äôs frontend. These extensions modify the user experience and interface. Installation with conda: Or with pip: Start a Jupyter notebook now, and you should be able to see an  NBextensions Tab  with a lot of options. Click the ones you want and see the magic happen. In case you couldn‚Äôt find the tab, a second small nbextension, can be located under the menu Edit . Let us discuss some of the useful extensions. Hinterland  enables code autocompletion menu for every keypress in a code cell, instead of only calling it with the tab. This makes Jupyter notebook‚Äôs autocompletion behave like other popular IDEs such as PyCharm. This extension adds a drop-down menu to the Notebook toolbar that allows easy insertion of code snippet cells into the current notebook. This extension splits the cells of the notebook and places then adjacent to each other. This extension enables to collect all running headers and display them in a floating window, as a sidebar or with a navigation menu. The extension is also draggable, resizable, collapsible and dockable. Collapsible Headings a llows the notebook to have collapsible sections, separated by headings. So in case you have a lot of dirty code in your notebook, you can simply collapse it to avoid scrolling it again and again. Autopep8 helps to reformat/prettify the contents of code cells with just a click. If you are tired of hitting the spacebar again and again to format the code, autopep8 is your savior. Make notebooks interactive Widgets  are eventful python objects that have a representation in the browser, often as a control like a slider, textbox, etc. Widgets can be used to build  interactive GUIs  for the notebooks. Let us have a look at some of the widgets. For complete details, you can visit their  Github repository . Interact The  interact  function ( ipywidgets.interact ) automatically creates a user interface (UI) controls for exploring code and data interactively. It is the easiest way to get started using IPython's widgets. Here is a list of some of the useful advanced widgets. The Play widget is useful to perform animations by iterating on a sequence of integers at a certain speed. The value of the slider below is linked to the player. The date picker widget works in Chrome and IE Edge but does not currently work in Firefox or Safari because they do not support the HTML date input field. Make Data frames intuitive Qgrid is also a Jupyter notebook widget but mainly focussed at dataframes. It uses  SlickGrid  to render pandas DataFrames within a Jupyter notebook. This allows you to explore your DataFrames with intuitive scrolling, sorting and filtering controls, as well as edit your DataFrames by double-clicking cells. The  Github Repository  contains more details and examples. Installing with pip: Installing with conda: Code is great when communicated. Notebooks are an effective tool for teaching and writing explainable codes. However, when we want to present our work either we display our entire notebook(with all the codes) or we take the help of powerpoint. Not any more. Jupyter Notebooks can be easily converted to slides and we can easily choose what to show and what to hide from the notebooks. There are two ways to convert the notebooks into slides: Open a new notebook and navigate to  View ‚Üí Cell Toolbar ‚Üí Slideshow.  A light grey bar appears on top of each cell, and you can customize the slides. Now go to the directory where the notebook is present and enter the following code: The slides get displayed at port 8000. Also, a  .html  file will be generated in the directory, and you can also access the slides from there. This would look even more classy with a themed background. Let us apply the theme ‚Äô onedork ‚Äô to the notebook and then convert it into a slideshow. These slides have a drawback i.e. you can see the code but cannot edit it. RISE plugin offers a solution. RISE is an acronym for  Reveal.js ‚Äî Jupyter/IPython Slideshow Extension . It utilized the  reveal.js  to run the slideshow. This is super useful since it also gives the ability to run the code without having to exit the slideshow. Installation 1 ‚Äî Using conda (recommended): 2 ‚Äî Using pip (less recommended): and then two more steps to install the JS and CSS in the proper places: Let us now use RISE for the interactive slideshow. We shall re-open the Jupyter Notebook we created earlier. Now we notice a new extension that says ‚ÄúEnter/Exit RISE Slideshow.‚Äù Click on it, and you are good to go. Welcome to the world of interactive slides. Refer to the  documentation  for more information. Display it right there! Why go with mere links when you can easily embed an URL, pdf, and videos into your Jupyter Notebooks using IPython‚Äôs  display  module. These were some of the features of the Jupyter Notebooks that I found useful and worth sharing. Some of them would be obvious to you while some may be new. So, go ahead and experiment with them. Hopefully, they will be able to save you some time and give you a better UI experience. Also feel free to suggest other useful features in the comments."
How I Got 4 Data Science Offers and Doubled my Income 2 Months after being Laid Off,ow I Got 4 Data Science Offers and Doubled my Income 2 Months after being Laid Of,"During this unprecedented time with the pandemic, many are finding their careers affected. This includes some of the most talented data scientists with which I have ever worked. Having shared my personal experience with some close friends to help them find a new job after being laid off, I thought it worth sharing publicly. After all, this touches more than me and my friends. Any data scientist who was laid off due to the pandemic or who is actively looking for a data science position can find something here to which they can relate, and which I hope will ultimately offer hope in your job search. So if you‚Äôve ever been stuck - in getting interviews, in interview preparation, in negotiation, anything - I‚Äôve been there, and I want to help. You can reach out to me  here  if you think I might be able to make your journey easier in any way! Here‚Äôs my story. I hope you find some useful tips and encouragement within it. In December of 2018, I was informed by my manager that I was to be laid off in January 2019. Three months before, the VP of Engineering of my then startup company had written a letter to our head of People Success. This letter explained why I was one of the top performers in the company and advocated for an increase in my salary. This helped me get a 33% increase in my salary. I was naturally feeling motivated and eager to crack the next milestone on an important project. The company‚Äôs future and my own looked bright. It was during this moment of success that I was told that I was impacted by the company-wise cost-cutting initiative. I was let go on January 15th. To be forced to start looking for a new job was daunting, to say the least. After browsing the data science job openings on the market, I soon realized my knowledge gap. What I was doing at the B2B startup (a mix of entry-level data engineering and machine learning) was simply irrelevant to many of the job requirements out there, such as product sense, SQL, stats, and more. I knew the basics but was unsure how to fill the gap towards more advanced skills. However, even that issue seemed secondary to more pressing questions, such as  how do I even get an interview ? I had a mere 1.5 years of work experience with a startup, and I lacked any statistics or computer science-related degree. More questions soon followed. What if I cannot find a job before I lose my visa status? What if the economy takes a downturn before I can find a new job? Despite my fears, there was little choice.  I had to find a new job . In the face of what felt like an overwhelming task, I needed some information to decide my next steps. After doing some research, I realized that more than half of the data science positions on the market were  product-driven positions  (‚Äòproduct analytics‚Äô), and the rest were either modeling or data engineering oriented positions. I also noted that positions other than product analytics tended to have higher requirements. For example, most modeling positions required a PhD degree, and engineering positions required a computer science background. Clearly, the requirements for different tracks varied widely, so it followed that preparation for each would differ as well. With this knowledge in hand, I made an important decision: preparing for all tracks would be both overwhelming and most likely less effective. I would need to  focus on one . I choose product analytics because, based on my background and experience, there was a higher chance that I could get interviews on this track. Of course, not everyone in data science has my exact background and experience, so below I have summarized the general requirements for three categories of data science positions at big companies. Understanding this basic breakdown saved me a lot of time, and I trust it will prove useful for others looking for a job in data science. I will add, however, that for small startups it‚Äôs possible that the interview will be less structured and require more of a mixture of all three. Product Analytics (~70% on the market) Modeling (~20% on the market) Data Engineering (~10% on the market) In light of my own experience, the rest of this post is strongly tailored towards those preparing for positions in  product analytics . Come back later to check out my post on preparation for a data engineering position. The very first thing I did once I knew I was going to be laid off was to apply widely and aggressively to other jobs. I used all the job boards I knew including  GlassDoor ,  Indeed  and  LinkedIn . I also asked everyone I knew for referrals. However, since it was almost at the end of the year, I did not receive any responses until January 2019. Asking for referrals proved to be much more effective than applying by myself.  Out of about 50 raw applications, I only got 3 interviews, but out of 18 referrals, I got 7 interviews . Overall, it was becoming obvious that I was not considered a strong candidate in this market. While the structure of interviews was different for each company, there was a general outline that most companies followed: Around half of the companies (4/10) that I‚Äôve interviewed with had a take-home assignment before or instead of a TPS. Take-home assignments consumed a lot of energy. Typically, an 8-hour take-home assignment caused me to need at least half a day to rest after submission. Because of this, I did my best to schedule the interview accordingly. There were no interviews the morning after my take-home assignment. Simply being aware of the basic structure can go a long way in making you feel more at ease and able to cope with the process of finding a new job. Going into my interviews,  every opportunity was critical   to me . Although I was aware that some people learn by interviewing, becoming better after many interviews, and typically obtaining offers for the last few companies with which they interview, I did not feel I could take this approach. When I graduated in 2017, I only received 4 interviews out of 500 raw applications. I was not expecting to get many more in 2019. Thus, my plan was to be fully prepared for each interview I got. I would let  no opportunity go to waste . One benefit of being laid off was that I could study full time for the interview. Each day I structured what I studied, focusing on two or three things per day. No more. From previous interviews, I had learned that a deep understanding allows you to give more thorough answers during interviews. It especially helps to have a depth of knowledge in an interview situation when you tend to be more nervous and anxious than usual. That is not the time when you want to try faking things. As I describe my own experience, I can‚Äôt help thinking of a  common misconception  I often hear: it‚Äôs not possible to gain the knowledge on product/experimentation without real experience. I firmly disagree. I did not have any prior experience in product or A/B testing, but I believed that those skills could be gained by reading, listening, thinking, and summarizing. After all, this is the same way we were taught things in school. Actually, as I get to know more senior data scientists I continue to learn that this method is common, even for people with years of experience. What you will be interviewed on may not be related to what you were doing at all, but you can gain the knowledge you need in ways other than job experience. Here are the basics of what you can expect. Typically, product and SQL questions were asked during a TPS. Onsite interviews included a few rounds of questions, including product sense, SQL, stats, modeling, behavior, and maybe a presentation. The next few subsections summarize the most useful resources (all freely available) I used when preparing for interviews. In general,  GlassDoor  was a good source to get a sense of company-specific problems. Once I saw those problems, I understood both what the company needed and where my gaps were in fulfilling those needs. I was then able to develop a plan to fill those gaps. The following six subsections are how I prepared for the specific content that comes up in interviews for the product analytics track. In explaining my own preparation, I hope to make the path smoother for those who come after me. Working as a data scientist at a startup, I was mainly responsible for developing and deploying machine learning models and writing spark jobs. Thus, I barely gained any product knowledge. When I saw some real interview questions on  GlassDoor , such as ‚Äúhow to measure success?‚Äù or ‚Äúhow to validate the new feature by current users‚Äô behaviors?‚Äù, I had utterly no idea how to approach such questions. At the time, they seemed far too abstract and open-ended. To learn product sense I resorted to the basic  read and summarize  strategy, using the resources listed below. All this reading helped me build up my product knowledge. As a result, I came up with a structured way (my own ‚Äò framework ‚Äô) to answer any type of product questions. I then put my knowledge and framework to the test with that all essential to learning any skill:  practice . I wrote out answers to questions involving product sense. I said my answers out loud (even recording myself with my phone), and used the recordings to finetune my answers. Soon I could not only fake it for an interview, I actually knew my stuff. Resources: The first time I took a SQL TPS I failed, and it was with a company in which I was very interested. Clearly, something needed to change. I needed to, once again, practice, and so I spent time grinding SQL questions. Eventually, I was able to complete in a day, questions that had previously taken me an entire week. Practice makes perfect! Resources: To prepare for these kinds of questions, I brushed up on elementary statistics and probability and did some coding exercises. While this may seem overwhelming (there is a lot of content for both topics), the interview questions for a product data scientist were never hard. The resources below are a great way to review. Resources: Without a CS degree, I went into the job search with limited machine knowledge. I had taken some courses during my previous job, and I reviewed my notes from these to prep for interviews. However, even though modeling questions are getting more and more frequent nowadays, the interview questions for a product data scientist mainly geared toward how to apply those models rather than the underlying math and theories. Still here are some helpful resources to bump up your machine learning skills before the interview time. Resources: Some companies required candidates to either present the take-home assignment or a project of which they are most proud. Still, other companies asked about the most impactful project during behavioral interviews. However, no matter what the form the key is to make your presentation interesting and challenging. That sounds great, but how do you do that? My main recommendation is to  think through all the details , such as high-level goals and success metrics to ETL to modeling implementation details, to deployment, monitoring, and improvement. The little things add up to make a great presentation rather than one big idea. Here are a few questions worth rethinking to help reach your ideal presentation: When presenting a project, you want to engage the audience. To make my presentations interesting, I often share  interesting findings and the biggest challenges  of the project. But the best way to make sure you are engaging is practice. Practice and practice out loud. I practiced presenting to my family to ensure my grasp of the material and ease of communication. If you can engage the people you know, an interviewer, who is required to listen, doesn‚Äôt stand a chance. While it is easy to get caught up in preparing for the technical interview questions, don‚Äôt forget that the behavioral questions are equally important. All companies I‚Äôve interviewed with had at least 1 round of behavior interviews during the onsite portions. These questions typically fall into these three categories: Behavioral questions are very important for data scientists. So be prepared! Understanding a company‚Äôs mission and core values helps answer questions in the first group. Questions like 2 and 3 can be answered by telling a story ‚Äî 3 stories were enough to answer all behavioral questions. Make sure you‚Äôve got a few good stories on hand when you walk in for an interview. Similar to product questions, I practiced a lot by saying it out loud, recording, and listening to then fine-tune my answers. Hearing a story is the best way to make sure it works. The night before an onsite interview was typically a stressful, hectic night. I always tried to cram in more technical knowledge while simultaneously reviewing my statistics notes and thinking of my framework to answer a product question. Of course, as we all learned in school, none of that was incredibly useful. The results were largely determined due to the amount of preparation before not a single night of cramming. So preparation is important, but there are some rules you can follow the day of to make sure your interview is a success. Using these rules, this was the feedback I got from onsite interviews: After receiving verbal offers, the next step was to work with recruiters to finalize the numbers. There‚Äôs only one rule here that I stick with -  ALWAYS negotiate . But how? Haseeb Qureshi has a very helpful guide on  negotiating a job offer  (with scripts!) which I followed religiously during my offer negotiation phase. Every single rule was so true. I negotiated with all companies that gave me an offer. The average increase for offers was  15% , and the highest offer was, in total value, increased by  25% . Negotiating works, so don‚Äôt be afraid to try it! After losing 11 pounds and lots of cries and screaming (job hunting is stressful and it is okay to admit that), I finally got 4 offers within 2 months of being laid off. 3 of those offers were from companies that I have never dreamed of joining:  Twitter, Lyft , and  Airbnb  (where I ultimately joined) and another offer from a healthcare startup. By the end of two frenzied months, I had received a total of 10 interviews, 4 onsite interviews, and 4 job offers, giving me a  40% TPS-to-onsite rate  and  100% onsite-to-offer rate . I was so lucky that I got lots of support and help from family and friends after being laid off, which was critical to landing a job at my dream company. It was difficult. Ironically looking for a job is also a lot of work, but everything was worth it. I wrote this blog because I know how overwhelmed I was. There is so much to prepare for interviews. I hope this post has made things clearer for other data specialists out there in need of work, and if you want more advice feel free to contact me  here . I am grateful to now be working in a great job, and I would be happy to help you get there too! Since I published this post three weeks ago, I got hundreds of questions on data science interviews. So I decided to make a series of videos to help you land your dream data science job. Check my YouTube channel if you are interested! If you like this post and want to support me‚Ä¶"
Python for Data Science: 8 Concepts You May Have Forgotten,ython for Data Science: 8 Concepts You May Have Forgotte,"If you‚Äôve ever found yourself looking up the same question, concept, or syntax over and over again when programming, you‚Äôre not alone. I find myself doing this constantly. While it‚Äôs not unnatural to look things up on StackOverflow or other resources, it does slow you down a good bit and raise questions as to your complete understanding of the language. We live in a world where there is a seemingly infinite amount of accessible, free resources looming just one search away at all times. However, this can be both a blessing and a curse. When not managed effectively, an over-reliance on these resources can build poor habits that will set you back long-term. Personally, I find myself pulling code from similar discussion threads several times, rather than taking the time to learn and solidify the concept so that I can reproduce the code myself the next time. This approach is lazy and while it may be the path of least resistance in the short-term, it will ultimately hurt your growth, productivity, and ability to recall syntax (cough,  interviews ) down the line. Recently, I‚Äôve been working through an online data science course titled  Python for Data Science and Machine Learning on Udemy  (Oh God, I sound like  that guy on Youtube ). Over the early lectures in the series, I was reminded of some concepts and syntax that I consistently overlook when performing data analysis in Python. In the interest of solidifying my understanding of these concepts once and for all and saving you guys a couple of StackOverflow searches, here‚Äôs the stuff that I‚Äôm always forgetting when working with Python, NumPy, and Pandas. I‚Äôve included a short description and example for each, however for your benefit, I will also include links to videos and other resources that explore each concept more in-depth as well. Writing out a for loop every time you need to define some sort of list is tedious, luckily Python has a built-in way to address this problem in just one line of code. The syntax can be a little hard to wrap your head around but once you get familiar with this technique you‚Äôll use it fairly often. See the example above and below for how you would normally go about list comprehension with a for loop vs. creating your list with in one simple line with no loops necessary. Ever get tired of creating function after function for limited use cases? Lambda functions to the rescue! Lambda functions are used for creating small, one-time and anonymous function objects in Python. Basically, they let you create a function,  without creating a function . The basic syntax of lambda functions is: Note that lambda functions can do everything that regular functions can do, as long as there‚Äôs just one expression. Check out the simple example below and the upcoming video to get a better feel for the power of lambda functions: Once you have a grasp on lambda functions, learning to pair them with the map and filter functions can be a powerful tool. Specifically, map takes in a list and transforms it into a new list by performing some sort of operation on each element. In this example, it goes through each element and maps the result of itself times 2 to a new list. Note that the list function simply converts the output to list type. The filter function takes in a list and a rule, much like map, however it returns a subset of the original list by comparing each element against the boolean filtering rule. For creating quick and easy Numpy arrays, look no further than the arange and linspace functions. Each one has their specific purpose, but the appeal here (instead of using range), is that they output NumPy arrays, which are typically easier to work with for data science. Arange returns evenly spaced values within a given interval. Along with a starting and stopping point, you can also define a step size or data type if necessary. Note that the stopping point is a ‚Äòcut-off‚Äô value, so it will not be included in the array output. Linspace is very similar, but with a slight twist. Linspace returns evenly spaced numbers over a specified interval. So given a starting and stopping point, as well as a number of values, linspace will evenly space them out for you in a NumPy array. This is especially helpful for data visualizations and declaring axes when plotting. You may have ran into this when dropping a column in Pandas or summing values in NumPy matrix. If not, then you surely will at some point. Let‚Äôs use the example of dropping a column for now: I don‚Äôt know how many times I wrote this line of code before I actually knew why I was declaring axis what I was. As you can probably deduce from above, set axis to 1 if you want to deal with columns and set it to 0 if you want rows. But why is this? My favorite reasoning, or atleast how I remember this: Calling the shape attribute from a Pandas dataframe gives us back a tuple with the first value representing the number of rows and the second value representing the number of columns. If you think about how this is indexed in Python, rows are at 0 and columns are at 1, much like how we declare our axis value. Crazy, right? If you‚Äôre familiar with SQL, then these concepts will probably come a lot easier for you. Anyhow, these functions are essentially just ways to combine dataframes in specific ways. It can be difficult to keep track of which is best to use at which time, so let‚Äôs review it. Concat allows the user to append one or more dataframes to each other either below or next to it (depending on how you define the axis). Merge combines multiple dataframes on specific, common columns that serve as the primary key. Join, much like merge, combines two dataframes. However, it joins them based on their indices, rather than some specified column. Check out the excellent  Pandas documentation  for specific syntax and more concrete examples, as well as some special cases that you may run into. Think of apply as a map function, but made for Pandas DataFrames or more specifically, for Series. If you‚Äôre not as familiar, Series are pretty similar to NumPy arrays for the most part. Apply sends a function to every element along a column or row depending on what you specify. You might imagine how useful this can be, especially for formatting and manipulating values across a whole DataFrame column, without having to loop at all. Last but certainly not least is pivot tables. If you‚Äôre familiar with Microsoft Excel, then you‚Äôve probably heard of pivot tables in some respect. The Pandas built-in pivot_table function creates a spreadsheet-style pivot table as a DataFrame. Note that the levels in the pivot table are stored in MultiIndex objects on the index and columns of the resulting DataFrame. That‚Äôs it for now. I hope a couple of these overviews have effectively jogged your memory regarding important yet somewhat tricky methods, functions, and concepts you frequently encounter when using Python for data science. Personally, I know that even the act of writing these out and trying to explain them in  simple terms  has helped me out a ton. Thanks for reading! Feel free to check out some of my similar essays below and  subscribe  to my newsletter for interesting links and new content. You can follow me on Medium for more posts like this and find me on  Twitter  as well. For more on me and what I‚Äôm up to, check out  my website ."
Want to know how Deep Learning works? Here‚Äôs a quick guide for everyone.,ant to know how Deep Learning works? Here‚Äôs a quick guide for everyone,"Artificial Intelligence  (AI) and  Machine Learning  (ML) are some of the hottest topics right now. The term  ‚ÄúAI‚Äù  is thrown around casually every day. You hear aspiring developers saying they want to learn AI. You also hear executives saying they want to implement AI in their services. But quite often, many of these people don‚Äôt understand what‚Ä¶"
Deep Learning Is Going to Teach Us All the Lesson of Our Lives: Jobs Are for Machines,eep Learning Is Going to Teach Us All the Lesson of Our Lives: Jobs Are for Machine,"(An alternate version of this article was originally published in  the Boston Globe) On December 2nd, 1942, a team of scientists led by Enrico Fermi came back from lunch and watched as humanity created the first self-sustaining nuclear reaction inside a pile of bricks and wood underneath a football field at the University of Chicago. Known to history as  Chicago Pile-1 , it was celebrated in silence with a single bottle of Chianti, for those who were there understood exactly what it meant for humankind, without any need for words. Now, something new has occurred that, again, quietly changed the world forever. Like a whispered word in a foreign language, it was quiet in that you may have heard it, but its full meaning may not have been comprehended. However, it‚Äôs vital we understand this new language, and what it‚Äôs increasingly telling us, for the ramifications are set to alter everything we take for granted about the way our globalized economy functions, and the ways in which we as humans exist within it. The language is a new class of machine learning known as  deep learning , and the ‚Äúwhispered word‚Äù was a computer‚Äôs use of it to seemingly out of nowhere  defeat three-time European Go champion Fan Hui , not once but five times in a row without defeat. Many who read this news, considered that as impressive, but in no way comparable to a match against Lee Se-dol instead, who many consider to be one of the world‚Äôs best living Go players, if not  the  best. Imagining such a grand duel of man versus machine,  China‚Äôs top Go player predicted that Lee would not lose a single game, and Lee himself confidently expected to possibly lose one at the most . What actually ended up happening when they faced off? Lee went on to lose  all but one  of their match‚Äôs five games. An AI named AlphaGo is now a better Go player than any human and has been  granted the ‚Äúdivine‚Äù rank of 9 dan . In other words, its level of play borders on godlike. Go has officially fallen to machine, just as Jeopardy did before it to Watson, and chess before that to Deep Blue. ‚ÄúAlphaGo‚Äôs historic victory is a clear signal that we‚Äôve gone from linear to parabolic.‚Äù So, what is Go? Very simply, think of Go as Super Ultra Mega Chess. This may still sound like a small accomplishment, another feather in the cap of machines as they continue to prove themselves superior in the fun games we play, but it is no small accomplishment, and what‚Äôs happening is no game. AlphaGo‚Äôs historic victory is a clear signal that we‚Äôve gone  from linear to parabolic . Advances in technology are now so visibly exponential in nature that we can expect to see a lot more milestones being crossed long before we would otherwise expect. These exponential advances, most notably in forms of artificial intelligence limited to specific tasks, we are entirely unprepared for as long as we continue to insist upon employment as our primary source of income. This may all sound like exaggeration, so let‚Äôs take a few decade steps back, and look at what computer technology has been actively doing to human employment so far: Let the above chart sink in. Do not be fooled into thinking this conversation about the automation of labor is set in the future. It‚Äôs already here.  Computer technology is already eating jobs and has been since 1990. All work can be divided into four types: routine and nonroutine, cognitive and manual. Routine work is the same stuff day in and day out, while nonroutine work varies. Within these two varieties, is the work that requires mostly our brains (cognitive) and the work that requires mostly our bodies (manual). Where once all four types saw growth, the stuff that is routine stagnated back in 1990. This happened because routine labor is easiest for technology to shoulder. Rules can be written for work that doesn‚Äôt change, and that work can be better handled by machines. Distressingly, it‚Äôs exactly routine work that once formed the basis of the American middle class. It‚Äôs routine manual work that Henry Ford transformed by paying people middle class wages to perform, and it‚Äôs routine cognitive work that once filled US office spaces.  Such jobs are now increasingly unavailable , leaving only two kinds of jobs with rosy outlooks: jobs that require so little thought, we pay people little to do them, and jobs that require so much thought, we pay people well to do them. If we can now imagine our economy as a plane with four engines, where it can still fly on only two of them as long as they both keep roaring, we can avoid concerning ourselves with crashing. But what happens when our two remaining engines also fail? That‚Äôs what the advancing fields of robotics and AI represent to those final two engines, because for the first time, we are successfully teaching machines to  learn . I‚Äôm a writer at heart, but my educational background happens to be in psychology and physics. I‚Äôm fascinated by both of them so my undergraduate focus ended up being in the physics of the human brain, otherwise known as  cognitive neuroscience . I think once you start to look into how the human brain works, how our mass of interconnected neurons somehow results in what we describe as the mind, everything changes. At least it did for me. As a quick primer in the way our brains function, they‚Äôre a giant network of interconnected cells. Some of these connections are short, and some are long. Some cells are only connected to one other, and some are connected to many. Electrical signals then pass through these connections, at various rates, and subsequent neural firings happen in turn. It‚Äôs all kind of like falling dominoes, but far faster, larger, and more complex. The result amazingly is us, and what we‚Äôve been learning about how we work, we‚Äôve now begun applying to the way machines work. One of these applications is the creation of  deep neural networks  - kind of like pared-down virtual brains. They provide an avenue to machine learning that‚Äôs made incredible leaps that were previously thought to be much further down the road, if even possible at all. How? It‚Äôs not just the obvious growing capability of our computers and our expanding knowledge in the neurosciences, but the vastly growing expanse of our collective data, aka  big data . Big data isn‚Äôt just some buzzword. It‚Äôs information, and when it comes to information, we‚Äôre creating more and more of it every day. In fact we‚Äôre creating so much that a 2013 report by SINTEF estimated that  90% of all information in the world had been created in the prior two years . This incredible rate of data creation is even  doubling every 1.5 years  thanks to the Internet, where in 2015  every minute  we were liking 4.2 million things on Facebook, uploading 300 hours of video to YouTube, and sending 350,000 tweets . Everything we do is generating data like never before, and lots of data is exactly what machines need in order to learn  to learn . Why? Imagine programming a computer to recognize a chair. You‚Äôd need to enter a ton of instructions, and the result would still be a program detecting chairs that aren‚Äôt, and  not  detecting chairs that are. So how did  we  learn to detect chairs? Our parents pointed at a chair and said, ‚Äúchair.‚Äù Then we thought we had that whole chair thing all figured out, so we pointed at a table and said ‚Äúchair‚Äù, which is when our parents told us that was ‚Äútable.‚Äù This is called reinforcement learning. The label ‚Äúchair‚Äù gets connected to every chair we see, such that certain neural pathways are weighted and others aren‚Äôt. For ‚Äúchair‚Äù to fire in our brains, what we perceive has to be close enough to our previous chair encounters. Essentially, our lives are big data filtered through our brains. The power of deep learning is that it‚Äôs a way of using massive amounts of data to get machines to operate more like we do without giving them explicit instructions. Instead of describing ‚Äúchairness‚Äù to a computer, we instead just plug it into the Internet and feed it millions of pictures of chairs. It can then have a general idea of ‚Äúchairness.‚Äù Next we test it with even more images. Where it‚Äôs wrong, we correct it, which further improves its ‚Äúchairness‚Äù detection. Repetition of this process results in a computer that knows what a chair is when it sees it,  for the most part as well as we can . The important difference though is that  unlike us, it can then sort through  millions  of images  within a matter of  seconds . This combination of deep learning and big data has resulted in astounding accomplishments just in the past year. Aside from the incredible accomplishment of AlphaGo,  Google‚Äôs DeepMind AI learned how to read and comprehend what it read  through hundreds of thousands of annotated news articles.  DeepMind also  taught itself  to play dozens of Atari 2600 video games better than humans , just by looking at the screen and its score, and playing games repeatedly. An AI named Giraffe taught itself how to play chess in a similar manner using a dataset of 175 million chess positions,  attaining International Master level status in just 72 hours by repeatedly playing itself . In 2015,  an AI even passed a visual Turing test by learning to learn  in a way that enabled it to be shown an unknown character in a fictional alphabet, then instantly reproduce that letter in a way that was entirely indistinguishable from a human given the same task. These are all  major  milestones in AI. However, despite all these milestones, when asked to estimate when a computer would defeat a prominent Go player, the answer even just months prior to  the announcement by Google of AlphaGo‚Äôs  victory, was by experts essentially, ‚Äú Maybe in another ten years .‚Äù A decade was considered a fair guess because Go is a game so complex I‚Äôll just let Ken Jennings of Jeopardy fame,  another former champion human defeated by AI , describe it: Go is famously a more complex game than chess, with its larger board, longer games, and many more pieces. Google‚Äôs DeepMind artificial intelligence team likes to say that there are more possible Go boards than atoms in the known universe, but that vastly  understates  the computational problem. There are about 10¬π‚Å∑‚Å∞ board positions in Go, and  only  10‚Å∏‚Å∞ atoms in the universe. That means that if there were as many parallel universes as there are atoms in our universe (!), then the  total  number of atoms in  all  those universes combined would be close to the possibilities on a single Go board. Such confounding complexity makes impossible any brute-force approach to scan every possible move to determine the next best move. But deep neural networks get around that barrier in the same way our own minds do, by learning to estimate what  feels  like the best move. We do this through observation and practice, and so did AlphaGo, by analyzing millions of professional games and  playing itself millions of times . So the answer to when the game of Go would fall to machines wasn‚Äôt even close to ten years. The correct answer ended up being, ‚Äú Any time now. ‚Äù Any time now. That‚Äôs the new go-to response in the 21st century for any question involving something new machines can do better than humans, and we need to try to wrap our heads around it. We need to recognize what it means for exponential technological change to be entering the labor market space for nonroutine jobs for the first time ever. Machines that can learn mean  nothing  humans do as a job is uniquely safe anymore. From  hamburgers  to  healthcare , machines can be created to successfully perform such tasks with no need or less need for humans, and at lower costs than humans. Amelia  is just one AI out there currently being beta-tested in companies right  now . Created by IPsoft over the past 16 years, she‚Äôs learned how to perform the work of call center employees. She can learn in seconds what takes us months, and she can do it in 20 languages. Because she‚Äôs able to learn, she‚Äôs able to do more over time. In one company putting her through the paces, she successfully handled one of every ten calls in the first week, and by the end of the second month, she could resolve six of ten calls. Because of this, it‚Äôs been estimated that she can put 250 million people out of a job,  worldwide . Viv  is an AI coming soon from the creators of Siri who‚Äôll be our own personal assistant. She‚Äôll perform tasks online for us, and even function as a Facebook News Feed on steroids by suggesting we consume the media she‚Äôll know we‚Äôll like best. In doing all of this for us, we‚Äôll see far fewer ads, and that means the entire advertising industry ‚Äî that industry the entire Internet is built upon ‚Äî stands to be hugely disrupted. A world with Amelia and Viv ‚Äî and the countless other AI counterparts coming online soon ‚Äî in combination with robots like  Boston Dynamics‚Äô next generation Atlas  portends, is a world where machines can do  all four   types of jobs  and that means serious societal reconsiderations. If a machine can do a job instead of a human,  should any human be forced at the threat of destitution to perform that job ? Should income itself remain coupled to employment, such that having a job is the only way to obtain income, when  jobs for many are entirely unobtainable ? If machines are performing an increasing percentage of our jobs for us, and not getting paid to do them,  where does that money go instead ? And  what does it no longer buy ?  Is it even possible that many of the jobs we‚Äôre creating don‚Äôt need to exist at all , and only do because of the incomes they provide? These are questions we need to start asking, and fast. Fortunately, people  are  beginning  to   ask   these   questions , and there‚Äôs an answer that‚Äôs building up momentum. The idea is to put machines to work for us, but empower ourselves to seek out the forms of remaining work we as humans find most valuable, by simply providing everyone a monthly paycheck independent of work. This paycheck would be granted to all citizens unconditionally, and its name is  universal basic income . By adopting UBI, aside from  immunizing  against the negative effects of automation, we‚Äôd also be decreasing  the risks inherent in entrepreneurship , and  the sizes of bureaucracies  necessary to boost incomes. It‚Äôs for these reasons, it has  cross-partisan support , and is even now in the beginning stages of possible implementation in countries like  Switzerland ,  Finland , the  Netherlands , and  Canada . The future is a place of accelerating changes. It seems unwise to continue looking at the future as if it were the past, where just because new jobs have historically appeared, they always will.  The WEF started 2016 off by estimating the creation by 2020 of 2 million new jobs alongside the elimination of 7 million . That‚Äôs a net loss, not a net gain of 5 million jobs. In a frequently cited paper,  an Oxford study estimated the automation of about half of all existing jobs by 2033 . Meanwhile self-driving vehicles, again thanks to machine learning, have the capability of drastically impacting all economies ‚Äî  especially the US economy as I wrote last year about automating truck driving  ‚Äî by eliminating millions of jobs within a short span of time. And now even the White House,  in a stunning report to Congress , has put the probability at 83 percent that a worker making less than $20 an hour in 2010 will eventually lose their job to a machine. Even workers making as much as $40 an hour face odds of 31 percent. To ignore odds like these is tantamount to our now laughable ‚Äú duck and cover ‚Äù strategies for avoiding nuclear blasts during the Cold War. All of this is why it‚Äôs those most knowledgeable in the AI field who are now actively sounding the alarm for basic income. During a panel discussion at the end of 2015 at Singularity University, prominent data scientist  Jeremy Howard  asked ‚ÄúDo you want half of people to starve because they literally can‚Äôt add economic value, or not?‚Äù before going on to suggest, ‚ÄùIf the answer is  not , then the smartest way to distribute the wealth is by implementing a  universal basic income .‚Äù AI pioneer  Chris Eliasmith , director of the Centre for Theoretical Neuroscience, warned about the immediate impacts of AI on society in an interview with Futurism, ‚ÄúAI is already having a big impact on our economies‚Ä¶ My suspicion is that more countries will have to follow Finland‚Äôs lead in exploring  basic income guarantees  for people.‚Äù Moshe Vardi  expressed the same sentiment  after speaking at the 2016 annual meeting of the American Association for the Advancement of Science about the emergence of intelligent machines, ‚Äúwe need to rethink the very basic structure of our economic system‚Ä¶ we may have to consider instituting a  basic income guarantee .‚Äù Even Baidu‚Äôs chief scientist and founder of Google‚Äôs ‚ÄúGoogle Brain‚Äù deep learning project,  Andrew Ng , during an onstage interview at this year‚Äôs Deep Learning Summit, expressed the shared notion that  basic income  must be ‚Äúseriously considered‚Äù by governments, citing ‚Äúa high chance that AI will create massive labor displacement.‚Äù When those building the tools begin warning about the implications of their use, shouldn‚Äôt those wishing to use those tools listen with the utmost attention, especially when it‚Äôs the very livelihoods of millions of people at stake? If not then, what about when  Nobel prize winning economists  begin agreeing with them in increasing numbers? No nation is yet ready for the changes ahead. High labor force non-participation leads to social instability, and a lack of consumers within consumer economies leads to economic instability. So let‚Äôs ask ourselves, what‚Äôs the purpose of the technologies we‚Äôre creating? What‚Äôs the purpose of a car that can drive for us, or artificial intelligence that can shoulder 60% of our workload? Is it to allow us to work more hours for even less pay? Or is it to enable us to choose  how  we work, and to decline any pay/hours we deem insufficient because we‚Äôre already earning the incomes that machines aren‚Äôt? What‚Äôs the big lesson to learn, in a century when machines can learn? I offer it‚Äôs that jobs are for machines, and life is for people. This article was written on a crowdfunded monthly basic income. If you found value in this article, you can support it along with all my advocacy for basic income with  a monthly patron pledge  of $1+. Are you a creative? Become a creator on Patreon . Join me in taking  the BIG Patreon Creator Pledge for basic income Special thanks to Arjun Banker, Steven Grimm, Larry Cohen, Topher Hunt, Aaron Marcus-Kubitza, Andrew Stern, Keith Davis, Albert Wenger, Richard Just, Chris Smothers, Mark Witham, David Ihnen, Danielle Texeira, Katie Doemland, Paul Wicks, Jan Smole, Joe Esposito, Jack Wagner, Joe Ballou, Stuart Matthews, Natalie Foster, Chris McCoy, Michael Honey, Gary Aranovich, Kai Wong, John David Hodge, Louise Whitmore, Dan O‚ÄôSullivan, Harish Venkatesan, Michiel Dral, Gerald Huff, Susanne Berg, Cameron Ottens, Kian Alavi, Gray Scott, Kirk Israel, Robert Solovay, Jeff Schulman, Andrew Henderson, Robert F. Greene, Martin Jordo, Victor Lau, Shane Gordon, Paolo Narciso, Johan Grahn, Tony DeStefano, Erhan Altay, Bryan Herdliska, Stephane Boisvert, Dave Shelton, Rise & Shine PAC, Luke Sampson, Lee Irving, Kris Roadruck, Amy Shaffer, Thomas Welsh, Olli Niinim√§ki, Casey Young, Elizabeth Balcar, Masud Shah, Allen Bauer, all my other funders for their support, and my amazing partner, Katie Smith. Would you like to see your name here too? Scott Santens writes about basic income on  his blog . You can also follow him here on  Medium , on  Twitter , on  Facebook , or on  Reddit  where he is a moderator for the  /r/BasicIncome  community of over 30,000 subscribers. If you feel others would appreciate this article, please click the green heart."
Thoughts after taking the Deeplearning.ai courses,houghts after taking the Deeplearning.ai course,"[ Update ‚Äî Feb 2nd 2018: When this blog post was written, only 3 courses had been released.  All 5 courses in this specialization are now out . I will have a follow-up blog post soon. ] Between a full time job and a toddler at home, I spend my spare time learning about the ideas in cognitive science & AI. Once in a while a great paper/video/course comes out and you‚Äôre instantly hooked. Andrew Ng‚Äôs new deeplearning.ai course is like that  Shane Carruth  or  Rajnikanth movie  that one yearns for! Naturally, as soon as the course was released on coursera, I registered and spent the past 4 evenings binge watching the lectures, working through quizzes and programming assignments. DL practitioners and ML engineers typically spend most days working at an abstract Keras or TensorFlow level. But it‚Äôs nice to take a break once in a while to get down to the nuts and bolts of learning algorithms and actually do back-propagation by hand. It is both fun and  incredibly useful ! Andrew Ng‚Äôs new  ad venture is a  bottom-up approach  to teaching neural networks ‚Äî powerful non-linearity learning algorithms, at a beginner-mid level. In classic Ng style, the course is delivered through a carefully chosen curriculum, neatly timed videos and precisely positioned information nuggets. Andrew picks up from where his classic ML course left off and introduces the idea of neural networks using a single neuron(logistic regression) and slowly adding complexity ‚Äî more neurons and layers. By the end of the 4 weeks(course 1), a student is introduced to all the core ideas required to build a dense neural network such as cost/loss functions, learning iteratively using gradient descent and vectorized parallel python(numpy) implementations. Andrew patiently explains the requisite math and programming concepts in a carefully planned order and a well regulated pace suitable for learners who could be rusty in math/coding. Lectures are delivered using presentation slides on which Andrew writes using digital pens. It felt like an effective way to get the listener to focus. I felt comfortable watching videos at 1.25x or 1.5x speed. Quizzes are placed at the end of each lecture sections and are in the multiple choice question format. If you watch the videos once, you should be able to quickly answer all the quiz questions. You can attempt quizzes multiple times and the system is designed to keep your highest score. Programming assignments are done via J upyter notebooks  ‚Äî powerful browser based applications. Assignments have a nice guided sequential structure and you are not required to write more than 2‚Äì3 lines of code in each section. If you understand the concepts like vectorization intuitively, you can complete most programming sections with just 1 line of code! After the assignment is coded, it takes 1 button click to submit your code to the automated grading system which returns your score in a few minutes. Some assignments have time restrictions ‚Äî say, three attempts in 8 hours etc. Jupyter notebooks are well designed and work without any issues. Instructions are precise and it feels like a polished product. Anyone interested in understanding what neural networks are, how they work, how to build them and the tools available to bring your ideas to life. If your math is rusty, there is no need to worry ‚Äî Andrew explains all the required calculus and provides derivatives at every occasion so that you can focus on building the network and concentrate on implementing your ideas in code. If your programming is rusty, there is a nice coding assignment to teach you numpy. But I recommend learning python first on  codecademy . Let me explain this with an analogy:  Assume you are trying to learn how to drive a car. Jeremy‚Äôs FAST.AI course  puts you in the drivers seat from the get-go. He teaches you to move the steering wheel, press the brake, accelerator etc. Then he slowly explains more details about how the car works ‚Äî why rotating the wheel makes the car turn, why pressing the brake pedal makes you slow down and stop etc. He keeps getting deeper into the inner workings of the car and by the end of the course, you know how the internal combustion engine works, how the fuel tank is designed etc.  The goal of the course is to get you driving. You can choose to stop at any point after you can drive reasonably well ‚Äî there is no need to learn how to build/repair the car. Andrew‚Äôs DL course  does all of this, but in  the complete opposite order . He teaches you about internal combustion engine first! He keeps adding  layers  of abstraction and by the end of the course you are driving like an F1 racer! The fast AI course mainly teaches you the  art of driving  while Andrew‚Äôs course primarily teaches you the  engineering behind the car . If you have not done any machine learning before this, don‚Äôt take this course first. The best starting point is Andrew‚Äôs original  ML course on coursera . After you complete that course, please try to complete part-1 of Jeremy Howard‚Äôs excellent  deep learning course . Jeremy teaches deep learning  Top-Down which is essential for absolute beginners . Once you are comfortable creating deep neural networks, it makes sense to take this  new deeplearning.ai course specialization  which fills up any gaps in your understanding of the underlying details and concepts. 2. Andrew stresses on the engineering aspects of deep learning and provides plenty of practical tips to save time and money ‚Äî the third course in the DL specialization felt incredibly useful for my role as an  architect leading engineering teams . 3. Jargon is handled well. Andrew explains that an  empirical process = trial & error  ‚Äî He is brutally honest about the reality of designing and training deep nets. At some point I felt  he might have as well just called Deep Learning as glorified curve-fitting 4. Squashes all hype around DL and AI ‚Äî Andrew makes restrained, careful comments about proliferation of AI hype in the mainstream media and by the end of the course it is pretty clear that DL is nothing like the terminator. 5.Wonderful boilerplate code that just works out of the box! 6. Excellent course structure. 7. Nice, consistent and useful notation. Andrew strives to establish a fresh nomenclature for neural nets and I feel he could be quite successful in this endeavor. 8. Style of teaching that is unique to Andrew and carries over from ML ‚Äî I could feel the same excitement I felt in 2013 when I took his original ML course. 9.The interviews with deep learning heroes are refreshing ‚Äî It is motivating and fun to hear personal stories and anecdotes. I wish that he‚Äôd said ‚Äò concretely ‚Äô  more often ! 2. Good tools are important and will help you accelerate your learning pace. I bought a digital pen after seeing Andrew teach with one. It helped me work more efficiently. 3. There is  a psychological reason  why I recommend the Fast.ai course before this one. Once you find your passion, you can learn uninhibited. 4. You just get that dopamine rush each time you score full points: 5. Don‚Äôt be scared by DL jargon ( hyperparameters = settings, architecture/topology=style etc. ) or the math symbols. If you take a leap of faith and pay attention to the lectures, Andrew shows why the symbols and notation are actually quite useful.  They will soon become your tools of choice and you will wield them with style ! Thanks for reading and best wishes! Update: Thanks for the overwhelmingly positive response! Many people are asking me to explain gradient descent and the differential calculus.  I hope this helps !"
Machine Learning is Fun Part 6: How to do Speech Recognition with Deep Learning,achine Learning is Fun Part 6: How to do Speech Recognition with Deep Learnin,"Update:  This article is part of a series. Check out the full series:  Part 1 ,  Part 2 ,  Part 3 ,  Part 4 ,  Part 5 ,  Part 6 ,  Part 7  and  Part 8 ! You can also read this article in  ÊôÆÈÄöËØù  ,  ÌïúÍµ≠Ïñ¥ ,  Ti·∫øng Vi·ªát ,  ŸÅÿßÿ±ÿ≥€å  or  –†—É—Å—Å–∫–∏–π . Giant update:   I‚Äôve written a new book based on these articles ! It not only expands and updates all my articles, but it has tons of brand new content and lots of hands-on coding projects.  Check it out now ! Speech recognition is invading our lives. It‚Äôs built into our phones, our game consoles and our smart watches. It‚Äôs even automating our homes. For just $50, you can get an Amazon Echo Dot ‚Äî a magic box that allows you to order pizza, get a weather report or even buy trash bags ‚Äî just by speaking out loud: The Echo Dot has been so popular this holiday season that Amazon  can‚Äôt seem to keep them in stock ! But speech recognition has been around for decades, so why is it just now hitting the mainstream? The reason is that deep learning finally made speech recognition accurate enough to be useful outside of carefully controlled environments. Andrew Ng  has long predicted that as speech recognition goes from 95% accurate to 99% accurate, it will become a primary way that we interact with computers. The idea is that this 4% accuracy gap is the difference between  annoyingly unreliable  and  incredibly useful . Thanks to Deep Learning, we‚Äôre finally cresting that peak. Let‚Äôs learn how to do speech recognition with deep learning! If you know  how neural machine translation works , you might guess that we could simply feed sound recordings into a neural network and train it to produce text: That‚Äôs the holy grail of speech recognition with deep learning, but we aren‚Äôt quite there yet (at least at the time that I wrote this ‚Äî I bet that we will be in a couple of years). The big problem is that speech varies in speed. One person might say ‚Äúhello!‚Äù very quickly and another person might say ‚Äúheeeelllllllllllllooooo!‚Äù very slowly, producing a much longer sound file with much more data. Both both sound files should be recognized as exactly the same text ‚Äî ‚Äúhello!‚Äù Automatically aligning audio files of various lengths to a fixed-length piece of text turns out to be pretty hard. To work around this, we have to use some special tricks and extra precessing in addition to a deep neural network. Let‚Äôs see how it works! The first step in speech recognition is obvious ‚Äî we need to feed sound waves into a computer. In  Part 3 , we learned how to take an image and treat it as an array of numbers so that we can feed directly into a neural network for image recognition: But sound is transmitted as  waves . How do we turn sound waves into numbers? Let‚Äôs use this sound clip of me saying ‚ÄúHello‚Äù: Sound waves are one-dimensional. At every moment in time, they have a single value based on the height of the wave. Let‚Äôs zoom in on one tiny part of the sound wave and take a look: To turn this sound wave into numbers, we just record of the height of the wave at equally-spaced points: This is called  sampling . We are taking a reading thousands of times a second and recording a number representing the height of the sound wave at that point in time. That‚Äôs basically all an uncompressed .wav audio file is. ‚ÄúCD Quality‚Äù audio is sampled at 44.1khz (44,100 readings per second). But for speech recognition, a sampling rate of 16khz (16,000 samples per second) is enough to cover the frequency range of human speech. Lets sample our ‚ÄúHello‚Äù sound wave 16,000 times per second. Here‚Äôs the first 100 samples: You might be thinking that sampling is only creating a rough approximation of the original sound wave because it‚Äôs only taking occasional readings. There‚Äôs gaps in between our readings so we must be losing data, right? But thanks to the  Nyquist theorem , we know that we can use math to perfectly reconstruct the original sound wave from the spaced-out samples ‚Äî as long as we sample at least twice as fast as the highest frequency we want to record. I mention this only because  nearly everyone gets this wrong  and assumes that using higher sampling rates always leads to better audio quality. It doesn‚Äôt. </end rant> We now have an array of numbers with each number representing the sound wave‚Äôs amplitude at 1/16,000th of a second intervals. We  could  feed these numbers right into a neural network. But trying to recognize speech patterns by processing these samples directly is difficult. Instead, we can make the problem easier by doing some pre-processing on the audio data. Let‚Äôs start by grouping our sampled audio into 20-millisecond-long chunks. Here‚Äôs our first 20 milliseconds of audio (i.e., our first 320 samples): Plotting those numbers as a simple line graph gives us a rough approximation of the original sound wave for that 20 millisecond period of time: This recording is only  1/50th of a second   long . But even this short recording is a complex mish-mash of different frequencies of sound. There‚Äôs some low sounds, some mid-range sounds, and even some high-pitched sounds sprinkled in. But taken all together, these different frequencies mix together to make up the complex sound of human speech. To make this data easier for a neural network to process, we are going to break apart this complex sound wave into it‚Äôs component parts. We‚Äôll break out the low-pitched parts, the next-lowest-pitched-parts, and so on. Then by adding up how much energy is in each of those frequency bands (from low to high), we create a  fingerprint  of sorts for this audio snippet. Imagine you had a recording of someone playing a C Major chord on a piano. That sound is the combination of three musical notes‚Äî C, E and G ‚Äî all mixed together into one complex sound. We want to break apart that complex sound into the individual notes to discover that they were C, E and G. This is the exact same idea. We do this using a mathematic operation called a  Fourier transform . It breaks apart the complex sound wave into the simple sound waves that make it up. Once we have those individual sound waves, we add up how much energy is contained in each one. The end result is a score of how important each frequency range is, from low pitch (i.e. bass notes) to high pitch. Each number below represents how much energy was in each 50hz band of our 20 millisecond audio clip: But this is a lot easier to see when you draw this as a chart: If we repeat this process on every 20 millisecond chunk of audio, we end up with a spectrogram (each column from left-to-right is one 20ms chunk): A spectrogram is cool because you can actually  see  musical notes and other pitch patterns in audio data. A neural network can find patterns in this kind of data more easily than raw sound waves. So this is the data representation we‚Äôll actually feed into our neural network. Now that we have our audio in a format that‚Äôs easy to process, we will feed it into a deep neural network. The input to the neural network will be 20 millisecond audio chunks. For each little audio slice, it will try to figure out the  letter  that corresponds the sound currently being spoken. We‚Äôll use a  recurrent neural network  ‚Äî that is, a neural network that has a memory that influences future predictions. That‚Äôs because each letter it predicts should affect the likelihood of the next letter it will predict too. For example, if we have said ‚ÄúHEL‚Äù so far, it‚Äôs very likely we will say ‚ÄúLO‚Äù next to finish out the word ‚ÄúHello‚Äù. It‚Äôs much less likely that we will say something unpronounceable next like ‚ÄúXYZ‚Äù. So having that memory of previous predictions helps the neural network make more accurate predictions going forward. After we run our entire audio clip through the neural network (one chunk at a time), we‚Äôll end up with a mapping of each audio chunk to the letters most likely spoken during that chunk. Here‚Äôs what that mapping looks like for me saying ‚ÄúHello‚Äù: Our neural net is predicting that one likely thing I said was ‚ÄúHHHEE_LL_LLLOOO‚Äù. But it also thinks that it was possible that I said ‚ÄúHHHUU_LL_LLLOOO‚Äù or even ‚ÄúAAAUU_LL_LLLOOO‚Äù. We have some steps we follow to clean up this output. First, we‚Äôll replace any repeated characters a single character: Then we‚Äôll remove any blanks: That leaves us with three possible transcriptions ‚Äî ‚ÄúHello‚Äù, ‚ÄúHullo‚Äù and ‚ÄúAullo‚Äù. If you say them out loud, all of these sound similar to ‚ÄúHello‚Äù. Because it‚Äôs predicting one character at a time, the neural network will come up with these very  sounded-out  transcriptions. For example if you say ‚ÄúHe would not go‚Äù, it might give one possible transcription as ‚ÄúHe wud net go‚Äù. The trick is to combine these pronunciation-based predictions with likelihood scores based on large database of written text (books, news articles, etc). You throw out transcriptions that seem the least likely to be real and keep the transcription that seems the most realistic. Of our possible transcriptions ‚ÄúHello‚Äù, ‚ÄúHullo‚Äù and ‚ÄúAullo‚Äù, obviously ‚ÄúHello‚Äù will appear more frequently in a database of text (not to mention in our original audio-based training data) and thus is probably correct. So we‚Äôll pick ‚ÄúHello‚Äù as our final transcription instead of the others. Done! You might be thinking  ‚ÄúBut what if someone says ‚Äò Hullo ‚Äô? It‚Äôs a valid word. Maybe ‚ÄòHello‚Äô is the wrong transcription!‚Äù Of course it is possible that someone actually said ‚ÄúHullo‚Äù instead of ‚ÄúHello‚Äù. But a speech recognition system like this (trained on American English) will basically never produce ‚ÄúHullo‚Äù as the transcription. It‚Äôs just such an unlikely thing for a user to say compared to ‚ÄúHello‚Äù that it will always think you are saying ‚ÄúHello‚Äù no matter how much you emphasize the ‚ÄòU‚Äô sound. Try it out! If your phone is set to American English, try to get your phone‚Äôs digital assistant to recognize the world ‚ÄúHullo.‚Äù You can‚Äôt! It refuses! It will always understand it as ‚ÄúHello.‚Äù Not recognizing ‚ÄúHullo‚Äù is a reasonable behavior, but sometimes you‚Äôll find annoying cases where your phone just refuses to understand something valid you are saying. That‚Äôs why these speech recognition models are always being retrained with more data to fix these edge cases. One of the coolest things about machine learning is how simple it sometimes seems. You get a bunch of data, feed it into a machine learning algorithm, and then magically you have a world-class AI system running on your gaming laptop‚Äôs video card‚Ä¶  Right ? That sort of true in some cases, but not for speech. Recognizing speech is a hard problem. You have to overcome almost limitless challenges: bad quality microphones, background noise, reverb and echo, accent variations, and on and on. All of these issues need to be present in your training data to make sure the neural network can deal with them. Here‚Äôs another example: Did you know that when you speak in a loud room you unconsciously raise the pitch of your voice to be able to talk over the noise? Humans have no problem understanding you either way, but neural networks need to be trained to handle this special case. So you need training data with people yelling over noise! To build a voice recognition system that performs on the level of Siri, Google Now!, or Alexa, you will need a  lot  of training data ‚Äî far more data than you can likely get without hiring hundreds of people to record it for you. And since users have low tolerance for poor quality voice recognition systems, you can‚Äôt skimp on this. No one wants a voice recognition system that works 80% of the time. For a company like Google or Amazon, hundreds of thousands of hours of spoken audio recorded in real-life situations is  gold . That‚Äôs the single biggest thing that separates their world-class speech recognition system from your hobby system. The whole point of putting  Google Now!  and  Siri  on every cell phone for free or selling $50  Alexa  units that have no subscription fee is to get you to  use them as much as possible . Every single thing you say into one of these systems is  recorded forever  and used as training data for future versions of speech recognition algorithms. That‚Äôs the whole game! Don‚Äôt believe me? If you have an Android phone with  Google Now! ,  click here to listen to actual recordings of yourself saying every dumb thing you‚Äôve ever said into it : So if you are looking for a start-up idea, I wouldn‚Äôt recommend trying to build your own speech recognition system to compete with Google. Instead, figure out a way to get people to give you recordings of themselves talking for hours. The data can be your product instead. If you liked this article, please consider  signing up for my Machine Learning is Fun! email list . I‚Äôll only email you when I have something new and awesome to share. It‚Äôs the best way to find out when I write more articles like this. You can also follow me on Twitter at  @ageitgey ,  email me directly  or  find me on linkedin . I‚Äôd love to hear from you if I can help you or your team with machine learning. Now continue on to Machine Learning is Fun! Part 7 !"
How to learn Deep Learning in 6 months,ow to learn Deep Learning in 6 month,"It is quite possible to learn, follow and contribute to state-of-art work in deep learning in about 6 months‚Äô time. This article details out the steps to achieve that. Pre-requisites - You are willing to spend 10‚Äì20 hours per week for the next 6 months - You have some programming skills. You should be comfortable to pick up Python along the way. And cloud. (No background in Python and cloud assumed). - Some math education in the past (algebra, geometry etc).  - Access to internet and computer. Step 1 We learn driving a car ‚Äî by driving. Not by learning how the clutch and the internal combustion engine work. Atleast not initially. When learning deep learning, we will follow the same top-down approach. Do the  fast.ai  course ‚Äî  Practical Deep Learning for Coders ‚Äî Part 1 . This takes about 4‚Äì6 weeks of effort. This course has a session on running the code on cloud.  Google Colaboratory  has free GPU access. Start with that. Other options include  Paperspace ,  AWS ,  GCP ,  Crestle  and  Floydhub . All of these are great. Do not start to build your own machine. Atleast not yet. Step 2 This is the time to know some of the basics. Learn about calculus and linear algebra. For calculus,  Big Picture of Calculus  provides a good overview. For Linear Algebra, Gilbert Strang‚Äôs MIT course on  OpenCourseWare  is amazing. Once you finish the above two, read the  Matrix Calculus for Deep Learning . Step 3 Now is the time to understand the bottom-up approach to deep learning. Do all the 5 courses in the  deep learning specialisation  in Coursera. You need to pay to get the assignments graded. But the effort is truly worth it. Ideally, given the background you have gained so far, you should be able to complete one course every week. Step 4 ‚ÄúAll work and no play makes Jack a dull boy‚Äù Do a capstone project. This is the time where you delve deep into a deep learning library(eg: Tensorflow, PyTorch, MXNet) and implement an architecture from scratch for a problem of your liking. The first three steps are about understanding how and where to use deep learning and gaining a solid foundation. This step is all about implementing a project from scratch and developing a strong foundation on the tools. Step 5 Now go and do  fast.ai‚Äôs  part II course ‚Äî  Cutting Edge Deep Learning for Coders . This covers more advanced topics and you will learn to read the latest research papers and make sense out of them. Each of the steps should take about 4‚Äì6 weeks‚Äô time. And in about 26 weeks since the time you started, and if you followed all of the above religiously, you will have a solid foundation in deep learning. Where to go next? Do the Stanford‚Äôs  CS231n  and  CS224d  courses. These two are amazing courses with great depth for vision and NLP respectively. They cover the latest state-of-art. And read the  deep learning book . This will solidify your understanding. Happy deep learning. Create every single day."
